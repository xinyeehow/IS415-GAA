[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "My name is Xinyee, and I’m a year 3 student in SMU majoring in Information Systems. I am also specialising in Business Analytics.\nAs an avid foodie, I go around different parts of Singapore and even overseas like Korea, Japan, Taiwan, Thailand, Indonesia and Malaysia to look for good food."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex02/Hands-On_Ex02.html",
    "href": "Hands-On_Ex/Hands-On_Ex02/Hands-On_Ex02.html",
    "title": "Hands On Exercise 02",
    "section": "",
    "text": "For Week 2"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex02/Hands-On_Ex02.html#installing-packages",
    "href": "Hands-On_Ex/Hands-On_Ex02/Hands-On_Ex02.html#installing-packages",
    "title": "Hands On Exercise 02",
    "section": "Installing packages",
    "text": "Installing packages\n\nInstall sf and tidyverse\n\npacman::p_load(sf, tidyverse)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex02/Hands-On_Ex02.html#importing-geospatial-data",
    "href": "Hands-On_Ex/Hands-On_Ex02/Hands-On_Ex02.html#importing-geospatial-data",
    "title": "Hands On Exercise 02",
    "section": "Importing Geospatial Data",
    "text": "Importing Geospatial Data\nImporting polygon feature data in shapefile format\n\nmpsz = st_read(dsn = \"chap01/data/geospatial/master-plan-2014-subzone-boundary-web-shp\", \n                  layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\xinyeehow\\IS415-GAA\\Hands-On_Ex\\Hands-On_Ex02\\chap01\\data\\geospatial\\master-plan-2014-subzone-boundary-web-shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nImporting polyline feature data in shapefile form\n\ncyclingpath = st_read(dsn = \"chap01/data/geospatial/CyclingPath_Jun2022\", \n                         layer = \"CyclingPathGazette\")\n\nReading layer `CyclingPathGazette' from data source \n  `C:\\xinyeehow\\IS415-GAA\\Hands-On_Ex\\Hands-On_Ex02\\chap01\\data\\geospatial\\CyclingPath_Jun2022' \n  using driver `ESRI Shapefile'\nSimple feature collection with 2248 features and 2 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11854.32 ymin: 28347.98 xmax: 42626.09 ymax: 48948.15\nProjected CRS: SVY21\n\n\nImporting GIS data in kml format\n\npreschool = st_read(\"chap01/data/geospatial/pre-schools-location-kml.kml\")\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\xinyeehow\\IS415-GAA\\Hands-On_Ex\\Hands-On_Ex02\\chap01\\data\\geospatial\\pre-schools-location-kml.kml' \n  using driver `KML'\nSimple feature collection with 1925 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex02/Hands-On_Ex02.html#checking-the-content-of-a-simple-feature-data-frame",
    "href": "Hands-On_Ex/Hands-On_Ex02/Hands-On_Ex02.html#checking-the-content-of-a-simple-feature-data-frame",
    "title": "Hands On Exercise 02",
    "section": "Checking the Content of A Simple Feature Data Frame",
    "text": "Checking the Content of A Simple Feature Data Frame\nWorking with st_geometry()\n\nst_geometry(mpsz)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\nWorking with glimpse()\n\nglimpse(mpsz)\n\nRows: 323\nColumns: 16\n$ OBJECTID   <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO <int> 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  <chr> \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  <chr> \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     <chr> \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N <chr> \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C <chr> \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   <chr> \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   <chr> \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    <chr> \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D <date> 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     <dbl> 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     <dbl> 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng <dbl> 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area <dbl> 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n\n\nWorking with head()\n\nhead(mpsz, n=5) \n\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30..."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex02/Hands-On_Ex02.html#plotting-the-geospatial-data",
    "href": "Hands-On_Ex/Hands-On_Ex02/Hands-On_Ex02.html#plotting-the-geospatial-data",
    "title": "Hands On Exercise 02",
    "section": "Plotting the Geospatial Data",
    "text": "Plotting the Geospatial Data\n\nplot(mpsz)\n\n\n\n\n\nplot(st_geometry(mpsz))\n\n\n\n\n\nplot(mpsz[\"PLN_AREA_N\"])"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex02/Hands-On_Ex02.html#working-with-projection",
    "href": "Hands-On_Ex/Hands-On_Ex02/Hands-On_Ex02.html#working-with-projection",
    "title": "Hands On Exercise 02",
    "section": "Working with Projection",
    "text": "Working with Projection\nAssigning EPSG code to a simple feature data frame\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\n\nmpsz3414 <- st_set_crs(mpsz, 3414)\n\n\nst_crs(mpsz3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nTransforming the projection of preschool from wgs84 to svy21\n\npreschool3414 <- st_transform(preschool, \n                              crs = 3414)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex02/Hands-On_Ex02.html#importing-and-converting-aspatial-data",
    "href": "Hands-On_Ex/Hands-On_Ex02/Hands-On_Ex02.html#importing-and-converting-aspatial-data",
    "title": "Hands On Exercise 02",
    "section": "Importing and Converting Aspatial Data",
    "text": "Importing and Converting Aspatial Data\n\nlistings <- read_csv(\"chap01/data/aspatial/listings.csv\")\n\n\nlist(listings) \n\n[[1]]\n# A tibble: 4,161 × 75\n       id listing_url    scrap…¹ last_scr…² source name  descr…³ neigh…⁴ pictu…⁵\n    <dbl> <chr>            <dbl> <date>     <chr>  <chr> <chr>   <chr>   <chr>  \n 1  50646 https://www.a… 2.02e13 2022-09-23 previ… Plea… Fully … The se… https:…\n 2  71609 https://www.a… 2.02e13 2022-09-22 city … Ensu… For 3 … <NA>    https:…\n 3  71896 https://www.a… 2.02e13 2022-09-22 city … B&B … <b>The… <NA>    https:…\n 4  71903 https://www.a… 2.02e13 2022-09-22 city … Room… Like y… Quiet … https:…\n 5 275344 https://www.a… 2.02e13 2022-09-22 city … 15 m… Lovely… Bus st… https:…\n 6 289234 https://www.a… 2.02e13 2022-09-22 city … Book… This w… A quie… https:…\n 7 294281 https://www.a… 2.02e13 2022-09-22 city … 5 mi… I have… <NA>    https:…\n 8 324945 https://www.a… 2.02e13 2022-09-22 city … Cozy… <b>The… <NA>    https:…\n 9 330089 https://www.a… 2.02e13 2022-09-22 city … Cozy… A unit… <NA>    https:…\n10 330095 https://www.a… 2.02e13 2022-09-22 city … 10 m… Cosy, … Near I… https:…\n# … with 4,151 more rows, 66 more variables: host_id <dbl>, host_url <chr>,\n#   host_name <chr>, host_since <date>, host_location <chr>, host_about <chr>,\n#   host_response_time <chr>, host_response_rate <chr>,\n#   host_acceptance_rate <chr>, host_is_superhost <lgl>,\n#   host_thumbnail_url <chr>, host_picture_url <chr>, host_neighbourhood <chr>,\n#   host_listings_count <dbl>, host_total_listings_count <dbl>,\n#   host_verifications <chr>, host_has_profile_pic <lgl>, …\n\n\nCreating a simple feature data frame from an aspatial data frame\n\nlistings_sf <- st_as_sf(listings, \n                       coords = c(\"longitude\", \"latitude\"),\n                       crs=4326) %>%\n  st_transform(crs = 3414)\n\n\nglimpse(listings_sf)\n\nRows: 4,161\nColumns: 74\n$ id                                           <dbl> 50646, 71609, 71896, 7190…\n$ listing_url                                  <chr> \"https://www.airbnb.com/r…\n$ scrape_id                                    <dbl> 2.022092e+13, 2.022092e+1…\n$ last_scraped                                 <date> 2022-09-23, 2022-09-22, …\n$ source                                       <chr> \"previous scrape\", \"city …\n$ name                                         <chr> \"Pleasant Room along Buki…\n$ description                                  <chr> \"Fully furnished bedroom …\n$ neighborhood_overview                        <chr> \"The serenity & quiet sur…\n$ picture_url                                  <chr> \"https://a0.muscache.com/…\n$ host_id                                      <dbl> 227796, 367042, 367042, 3…\n$ host_url                                     <chr> \"https://www.airbnb.com/u…\n$ host_name                                    <chr> \"Sujatha\", \"Belinda\", \"Be…\n$ host_since                                   <date> 2010-09-08, 2011-01-29, …\n$ host_location                                <chr> \"Singapore\", \"Singapore\",…\n$ host_about                                   <chr> \"I am a working professio…\n$ host_response_time                           <chr> \"a few days or more\", \"wi…\n$ host_response_rate                           <chr> \"0%\", \"100%\", \"100%\", \"10…\n$ host_acceptance_rate                         <chr> \"N/A\", \"100%\", \"100%\", \"1…\n$ host_is_superhost                            <lgl> FALSE, FALSE, FALSE, FALS…\n$ host_thumbnail_url                           <chr> \"https://a0.muscache.com/…\n$ host_picture_url                             <chr> \"https://a0.muscache.com/…\n$ host_neighbourhood                           <chr> \"Bukit Timah\", \"Tampines\"…\n$ host_listings_count                          <dbl> 1, 6, 6, 6, 44, 6, 7, 44,…\n$ host_total_listings_count                    <dbl> 4, 15, 15, 15, 57, 15, 8,…\n$ host_verifications                           <chr> \"['email', 'phone', 'work…\n$ host_has_profile_pic                         <lgl> TRUE, TRUE, TRUE, TRUE, T…\n$ host_identity_verified                       <lgl> TRUE, TRUE, TRUE, TRUE, T…\n$ neighbourhood                                <chr> \"Singapore, Singapore\", N…\n$ neighbourhood_cleansed                       <chr> \"Bukit Timah\", \"Tampines\"…\n$ neighbourhood_group_cleansed                 <chr> \"Central Region\", \"East R…\n$ property_type                                <chr> \"Private room in rental u…\n$ room_type                                    <chr> \"Private room\", \"Private …\n$ accommodates                                 <dbl> 2, 6, 1, 2, 1, 4, 2, 1, 1…\n$ bathrooms                                    <lgl> NA, NA, NA, NA, NA, NA, N…\n$ bathrooms_text                               <chr> \"1 bath\", \"1 private bath…\n$ bedrooms                                     <dbl> 1, 2, 1, 1, 1, 3, 1, 1, N…\n$ beds                                         <dbl> 1, 3, 1, 2, 1, 5, 1, 1, 1…\n$ amenities                                    <chr> \"[\\\"Gym\\\", \\\"Washer\\\", \\\"…\n$ price                                        <chr> \"$80.00\", \"$145.00\", \"$85…\n$ minimum_nights                               <dbl> 92, 92, 92, 92, 60, 92, 9…\n$ maximum_nights                               <dbl> 730, 1125, 1125, 1125, 99…\n$ minimum_minimum_nights                       <dbl> 92, 92, 92, 92, 60, 92, 9…\n$ maximum_minimum_nights                       <dbl> 92, 92, 92, 92, 60, 92, 9…\n$ minimum_maximum_nights                       <dbl> 730, 1125, 1125, 1125, 99…\n$ maximum_maximum_nights                       <dbl> 730, 1125, 1125, 1125, 99…\n$ minimum_nights_avg_ntm                       <dbl> 92, 92, 92, 92, 60, 92, 9…\n$ maximum_nights_avg_ntm                       <dbl> 730, 1125, 1125, 1125, 99…\n$ calendar_updated                             <lgl> NA, NA, NA, NA, NA, NA, N…\n$ has_availability                             <lgl> TRUE, TRUE, TRUE, TRUE, T…\n$ availability_30                              <dbl> 30, 5, 0, 30, 0, 0, 30, 5…\n$ availability_60                              <dbl> 60, 35, 1, 60, 0, 0, 60, …\n$ availability_90                              <dbl> 90, 65, 1, 90, 21, 10, 90…\n$ availability_365                             <dbl> 365, 340, 265, 365, 296, …\n$ calendar_last_scraped                        <date> 2022-09-23, 2022-09-22, …\n$ number_of_reviews                            <dbl> 18, 20, 24, 47, 14, 12, 1…\n$ number_of_reviews_ltm                        <dbl> 0, 0, 0, 0, 1, 0, 0, 3, 2…\n$ number_of_reviews_l30d                       <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ first_review                                 <date> 2014-04-18, 2011-12-19, …\n$ last_review                                  <date> 2014-12-26, 2020-01-17, …\n$ review_scores_rating                         <dbl> 4.56, 4.44, 4.16, 4.41, 4…\n$ review_scores_accuracy                       <dbl> 4.72, 4.37, 4.22, 4.39, 4…\n$ review_scores_cleanliness                    <dbl> 4.78, 4.00, 4.09, 4.52, 4…\n$ review_scores_checkin                        <dbl> 4.78, 4.63, 4.43, 4.63, 4…\n$ review_scores_communication                  <dbl> 4.94, 4.78, 4.43, 4.64, 4…\n$ review_scores_location                       <dbl> 4.72, 4.26, 4.17, 4.50, 4…\n$ review_scores_value                          <dbl> 4.50, 4.32, 4.04, 4.36, 4…\n$ license                                      <chr> NA, NA, NA, NA, \"S0399\", …\n$ instant_bookable                             <lgl> FALSE, FALSE, TRUE, FALSE…\n$ calculated_host_listings_count               <dbl> 1, 6, 6, 6, 44, 6, 7, 44,…\n$ calculated_host_listings_count_entire_homes  <dbl> 0, 0, 0, 0, 2, 0, 1, 2, 2…\n$ calculated_host_listings_count_private_rooms <dbl> 1, 6, 6, 6, 42, 6, 6, 42,…\n$ calculated_host_listings_count_shared_rooms  <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ reviews_per_month                            <dbl> 0.18, 0.15, 0.18, 0.34, 0…\n$ geometry                                     <POINT [m]> POINT (22646.02 351…"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex02/Hands-On_Ex02.html#geoprocessing-with-sf-package",
    "href": "Hands-On_Ex/Hands-On_Ex02/Hands-On_Ex02.html#geoprocessing-with-sf-package",
    "title": "Hands On Exercise 02",
    "section": "Geoprocessing with sf package",
    "text": "Geoprocessing with sf package\nBuffering\n\nbuffer_cycling <- st_buffer(cyclingpath, \n                               dist=5, nQuadSegs = 30)\n\n\nbuffer_cycling$AREA <- st_area(buffer_cycling)\n\nTotal land involved\n\nsum(buffer_cycling$AREA)\n\n1556978 [m^2]\n\n\n\nPoint-in-polygon count\nIdentify pre-schools located inside each Planning Subzone by using st_intersects() and length() of Base R is used to calculate numbers of pre-schools that fall inside each planning subzone\n\nmpsz3414$`PreSch Count`<- lengths(st_intersects(mpsz3414, preschool3414))\n\nSummary statistics\n\nsummary(mpsz3414$`PreSch Count`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    3.00    5.96    9.00   58.00 \n\n\nList the planning subzone with the most number of pre-school\n\ntop_n(mpsz3414, 1, `PreSch Count`)\n\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 39655.33 ymin: 35966 xmax: 42940.57 ymax: 38622.37\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO     SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      189          2 TAMPINES EAST    TMSZ02      N   TAMPINES         TM\n     REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR SHAPE_Leng\n1 EAST REGION       ER 21658EAAF84F4D8D 2014-12-05 41122.55 37392.39   10180.62\n  SHAPE_Area                       geometry PreSch Count\n1    4339824 MULTIPOLYGON (((42196.76 38...           58\n\n\nDensity of pre-school by planning subzone\n\nmpsz3414$Area <- mpsz3414 %>%\n  st_area()\n\n\nmpsz3414 <- mpsz3414 %>%\n  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex02/Hands-On_Ex02.html#exploratory-data-analysis-eda",
    "href": "Hands-On_Ex/Hands-On_Ex02/Hands-On_Ex02.html#exploratory-data-analysis-eda",
    "title": "Hands On Exercise 02",
    "section": "Exploratory Data Analysis (EDA)",
    "text": "Exploratory Data Analysis (EDA)\nDistribution of PreSch Density\n\nhist(mpsz3414$`PreSch Density`)\n\n\n\n\n\nggplot(data=mpsz3414, \n       aes(x= as.numeric(`PreSch Density`)))+\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  labs(title = \"Are pre-school even distributed in Singapore?\",\n       subtitle= \"There are many planning sub-zones with a single pre-school, on the other hand, \\nthere are two planning sub-zones with at least 20 pre-schools\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Frequency\")\n\n\n\n\nScatter Plot\n\nggplot(data=mpsz3414, \n       aes(y = `PreSch Count`, \n           x= as.numeric(`PreSch Density`)))+\n  geom_point(color=\"black\", \n             fill=\"light blue\") +\n  xlim(0, 40) +\n  ylim(0, 40) +\n  labs(title = \"\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Pre-school count\")"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex03/Hands-On_Ex03.html",
    "href": "Hands-On_Ex/Hands-On_Ex03/Hands-On_Ex03.html",
    "title": "Hands-On Exercise 03",
    "section": "",
    "text": "Import packages\n\npacman::p_load(sf, tmap, tidyverse)\n\n\n\n\nmpsz <- st_read(dsn = \"chap02/data/geospatial/master-plan-2014-subzone-boundary-web-shp\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\xinyeehow\\IS415-GAA\\Hands-On_Ex\\Hands-On_Ex03\\chap02\\data\\geospatial\\master-plan-2014-subzone-boundary-web-shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nExamine layer\n\nmpsz\n\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n\n\n\n\n\n\npopdata <- read_csv(\"chap02/data/aspatial/respopagesextod2011to2020.csv\")\n\n\n\n\n\npopdata2020 <- popdata %>%\n  filter(Time == 2020) %>%\n  group_by(PA, SZ, AG) %>%\n  summarise(`POP` = sum(`Pop`)) %>%\n  ungroup()%>%\n  pivot_wider(names_from=AG, \n              values_from=POP) %>%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %>%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\nrowSums(.[13:15]))%>%\nmutate(`AGED`=rowSums(.[16:21])) %>%\nmutate(`TOTAL`=rowSums(.[3:21])) %>%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMY ACTIVE`) %>%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n\n\n\n\npopdata2020 <- popdata2020 %>%\n  mutate_at(.vars = vars(PA, SZ), \n          .funs = funs(toupper)) %>%\n  filter(`ECONOMY ACTIVE` > 0)\n\n\nmpsz_pop2020 <- left_join(mpsz, popdata2020,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n\n\nwrite_rds(mpsz_pop2020, \"chap02/data/rds/mpszpop2020.rds\")\n\n\n\n\n\n\n\n\ntmap_mode(\"plot\")\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons()\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\") +\n  tm_borders(lwd = 0.1,  alpha = 1)\n\n\n\n\n\n\n\n\n\nQuantile data classification that used 5 classes\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nEqual data classification\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nsummary(mpsz_pop2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.0000  0.6540  0.7063  0.7712  0.7657 19.0000      92 \n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"Blues\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"No. of persons\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\ntmap_style(\"white\")\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n\n\n\n\n\ntm_shape(mpsz_pop2020)+ \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE, \n            drop.shapes=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nyoungmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\nagedmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04a.html",
    "href": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04a.html",
    "title": "Hands-On Exercise 04A",
    "section": "",
    "text": "pacman::p_load(maptools, sf, raster, spatstat, tmap)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04a.html#importing-the-spatial-data",
    "href": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04a.html#importing-the-spatial-data",
    "title": "Hands-On Exercise 04A",
    "section": "Importing the spatial data",
    "text": "Importing the spatial data\n\nchildcare_sf <- st_read(\"data/child-care-services-geojson.geojson\") %>%\n  st_transform(crs = 3414)\n\nReading layer `child-care-services-geojson' from data source \n  `C:\\xinyeehow\\IS415-GAA\\Hands-On_Ex\\Hands-On_Ex04\\data\\child-care-services-geojson.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 1545 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.248403 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\nsg_sf <- st_read(dsn = \"data\", layer=\"CostalOutline\")\n\nReading layer `CostalOutline' from data source \n  `C:\\xinyeehow\\IS415-GAA\\Hands-On_Ex\\Hands-On_Ex04\\data' using driver `ESRI Shapefile'\nSimple feature collection with 60 features and 4 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 2663.926 ymin: 16357.98 xmax: 56047.79 ymax: 50244.03\nProjected CRS: SVY21\n\n\n\nmpsz_sf <- st_read(dsn = \"data\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\xinyeehow\\IS415-GAA\\Hands-On_Ex\\Hands-On_Ex04\\data' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04a.html#referencing-system-check",
    "href": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04a.html#referencing-system-check",
    "title": "Hands-On Exercise 04A",
    "section": "Referencing System Check",
    "text": "Referencing System Check\n\nst_geometry(mpsz_sf)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\n\nst_geometry(sg_sf)\n\nGeometry set for 60 features \nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 2663.926 ymin: 16357.98 xmax: 56047.79 ymax: 50244.03\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\n\nst_geometry(childcare_sf)\n\nGeometry set for 1545 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 11203.01 ymin: 25667.6 xmax: 45404.24 ymax: 49300.88\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\nFirst 5 geometries:"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04a.html#assigning-crs",
    "href": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04a.html#assigning-crs",
    "title": "Hands-On Exercise 04A",
    "section": "Assigning CRS",
    "text": "Assigning CRS\n\nmpsz_sf <- st_set_crs(mpsz_sf, 3414)\n\n\nst_crs(mpsz_sf)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\nsg_sf <- st_set_crs(sg_sf, 3414)\n\n\nst_crs(sg_sf)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\nMapping the geospatial data sets\n\nplot(mpsz_sf)\n\n\n\n\n\nplot(st_geometry(mpsz_sf))\n\n\n\n\n\ntmap_mode('view')\ntm_shape(childcare_sf)+\n  tm_dots()\n\n\n\n\n\n\n\ntmap_mode('plot')"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04a.html#geospatial-data-wrangling",
    "href": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04a.html#geospatial-data-wrangling",
    "title": "Hands-On Exercise 04A",
    "section": "Geospatial Data Wrangling",
    "text": "Geospatial Data Wrangling\nConverting sf data frames to sp’s Spatial* class\n\nchildcare <- as_Spatial(childcare_sf)\nmpsz <- as_Spatial(mpsz_sf)\nsg <- as_Spatial(sg_sf)\n\n\nchildcare\n\nclass       : SpatialPointsDataFrame \nfeatures    : 1545 \nextent      : 11203.01, 45404.24, 25667.6, 49300.88  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 2\nnames       :    Nameescription \nmin values  :   kml_1, <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSBLOCKHOUSENUMBER</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSBUILDINGNAME</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSPOSTALCODE</th> <td>018989</td> </tr><tr bgcolor=\"\"> <th>ADDRESSSTREETNAME</th> <td>1, MARINA BOULEVARD, #B1 - 01, ONE MARINA BOULEVARD, SINGAPORE 018989</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSTYPE</th> <td></td> </tr><tr bgcolor=\"\"> <th>DESCRIPTION</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>HYPERLINK</th> <td></td> </tr><tr bgcolor=\"\"> <th>LANDXADDRESSPOINT</th> <td>0</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>LANDYADDRESSPOINT</th> <td>0</td> </tr><tr bgcolor=\"\"> <th>NAME</th> <td>THE LITTLE SKOOL-HOUSE INTERNATIONAL PTE. LTD.</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>PHOTOURL</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSFLOORNUMBER</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>08F73931F4A691F4</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20200826094036</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSUNITNUMBER</th> <td></td> </tr></table></center> \nmax values  : kml_999,                  <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSBLOCKHOUSENUMBER</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSBUILDINGNAME</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSPOSTALCODE</th> <td>829646</td> </tr><tr bgcolor=\"\"> <th>ADDRESSSTREETNAME</th> <td>200, PONGGOL SEVENTEENTH AVENUE, SINGAPORE 829646</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSTYPE</th> <td></td> </tr><tr bgcolor=\"\"> <th>DESCRIPTION</th> <td>Child Care Services</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>HYPERLINK</th> <td></td> </tr><tr bgcolor=\"\"> <th>LANDXADDRESSPOINT</th> <td>0</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>LANDYADDRESSPOINT</th> <td>0</td> </tr><tr bgcolor=\"\"> <th>NAME</th> <td>RAFFLES KIDZ @ PUNGGOL PTE LTD</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>PHOTOURL</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSFLOORNUMBER</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>379D017BF244B0FA</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20200826094036</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSUNITNUMBER</th> <td></td> </tr></table></center> \n\n\n\nmpsz\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 323 \nextent      : 2667.538, 56396.44, 15748.72, 50256.33  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 15\nnames       : OBJECTID, SUBZONE_NO, SUBZONE_N, SUBZONE_C, CA_IND, PLN_AREA_N, PLN_AREA_C,       REGION_N, REGION_C,          INC_CRC, FMEL_UPD_D,     X_ADDR,     Y_ADDR,    SHAPE_Leng,    SHAPE_Area \nmin values  :        1,          1, ADMIRALTY,    AMSZ01,      N, ANG MO KIO,         AM, CENTRAL REGION,       CR, 00F5E30B5C9B7AD8,      16409,  5092.8949,  19579.069, 871.554887798, 39437.9352703 \nmax values  :      323,         17,    YUNNAN,    YSSZ09,      Y,     YISHUN,         YS,    WEST REGION,       WR, FFCCF172717C2EAF,      16409, 50424.7923, 49552.7904, 68083.9364708,  69748298.792 \n\n\n\nsg\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 60 \nextent      : 2663.926, 56047.79, 16357.98, 50244.03  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 4\nnames       : GDO_GID, MSLINK, MAPID,              COSTAL_NAM \nmin values  :       1,      1,     0,             ISLAND LINK \nmax values  :      60,     67,     0, SINGAPORE - MAIN ISLAND \n\n\nConverting the Spatial* class into generic sp format\n\nchildcare_sp <- as(childcare, \"SpatialPoints\")\nsg_sp <- as(sg, \"SpatialPolygons\")\n\n\nchildcare_sp\n\nclass       : SpatialPoints \nfeatures    : 1545 \nextent      : 11203.01, 45404.24, 25667.6, 49300.88  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \n\n\n\nsg_sp\n\nclass       : SpatialPolygons \nfeatures    : 60 \nextent      : 2663.926, 56047.79, 16357.98, 50244.03  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04a.html#converting-the-generic-sp-format-into-spatstats-ppp-format",
    "href": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04a.html#converting-the-generic-sp-format-into-spatstats-ppp-format",
    "title": "Hands-On Exercise 04A",
    "section": "Converting the generic sp format into spatstat’s ppp format",
    "text": "Converting the generic sp format into spatstat’s ppp format\n\nchildcare_ppp <- as(childcare_sp, \"ppp\")\nchildcare_ppp\n\nPlanar point pattern: 1545 points\nwindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units\n\n\n\nplot(childcare_ppp)\n\n\n\n\n\nsummary(childcare_ppp)\n\nPlanar point pattern:  1545 points\nAverage intensity 1.91145e-06 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 3 decimal places\ni.e. rounded to the nearest multiple of 0.001 units\n\nWindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units\n                    (34200 x 23630 units)\nWindow area = 808287000 square units\n\n\n\nHandling duplicated points\n\nany(duplicated(childcare_ppp))\n\n[1] TRUE\n\n\n\nmultiplicity(childcare_ppp)\n\n   1    2    3    4    5    6    7    8    9   10   11   12   13   14   15   16 \n   1    1    1    3    1    1    1    1    2    1    1    1    1    1    1    1 \n  17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32 \n   1    1    1    1    1    1    1    1    1    1    9    1    1    1    1    1 \n  33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n  49   50   51   52   53   54   55   56   57   58   59   60   61   62   63   64 \n   1    1    1    1    1    1    2    1    1    3    1    1    1    1    1    1 \n  65   66   67   68   69   70   71   72   73   74   75   76   77   78   79   80 \n   1    1    1    1    1    2    1    1    1    1    1    2    1    1    1    1 \n  81   82   83   84   85   86   87   88   89   90   91   92   93   94   95   96 \n   1    1    1    3    1    1    1    1    1    1    1    1    1    1    1    1 \n  97   98   99  100  101  102  103  104  105  106  107  108  109  110  111  112 \n   1    1    1    1    1    1    1    1    2    1    1    1    1    1    1    1 \n 113  114  115  116  117  118  119  120  121  122  123  124  125  126  127  128 \n   1    1    1    1    1    1    2    1    1    1    3    1    1    1    2    1 \n 129  130  131  132  133  134  135  136  137  138  139  140  141  142  143  144 \n   1    1    1    1    1    2    1    1    1    1    1    1    1    1    3    2 \n 145  146  147  148  149  150  151  152  153  154  155  156  157  158  159  160 \n   1    2    1    1    1    2    2    3    1    5    1    5    1    1    1    2 \n 161  162  163  164  165  166  167  168  169  170  171  172  173  174  175  176 \n   1    1    1    1    2    1    1    1    1    1    1    2    1    1    1    1 \n 177  178  179  180  181  182  183  184  185  186  187  188  189  190  191  192 \n   1    4    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 193  194  195  196  197  198  199  200  201  202  203  204  205  206  207  208 \n   1    1    1    1    1    2    2    1    1    1    1    2    1    4    1    1 \n 209  210  211  212  213  214  215  216  217  218  219  220  221  222  223  224 \n   2    1    1    1    1    1    1    1    1    1    1    1    2    1    1    1 \n 225  226  227  228  229  230  231  232  233  234  235  236  237  238  239  240 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 241  242  243  244  245  246  247  248  249  250  251  252  253  254  255  256 \n   1    1    1    1    2    1    1    1    1    1    1    1    1    1    1    1 \n 257  258  259  260  261  262  263  264  265  266  267  268  269  270  271  272 \n   1    1    1    1    1    1    1    1    1    1    2    1    1    1    1    3 \n 273  274  275  276  277  278  279  280  281  282  283  284  285  286  287  288 \n   1    1    1    1    1    1    3    1    1    1    1    1    1    1    1    1 \n 289  290  291  292  293  294  295  296  297  298  299  300  301  302  303  304 \n   1    1    1    1    1    1    1    9    1    1    2    1    1    1    1    1 \n 305  306  307  308  309  310  311  312  313  314  315  316  317  318  319  320 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 321  322  323  324  325  326  327  328  329  330  331  332  333  334  335  336 \n   1    1    1    5    1    1    1    1    1    2    1    1    2    2    1    1 \n 337  338  339  340  341  342  343  344  345  346  347  348  349  350  351  352 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    2    2    1 \n 353  354  355  356  357  358  359  360  361  362  363  364  365  366  367  368 \n   1    1    1    1    9    1    1    1    1    1    1    1    1    1    1    1 \n 369  370  371  372  373  374  375  376  377  378  379  380  381  382  383  384 \n   1    3    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 385  386  387  388  389  390  391  392  393  394  395  396  397  398  399  400 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 401  402  403  404  405  406  407  408  409  410  411  412  413  414  415  416 \n   1    1    2    1    1    1    1    1    1    1    2    1    1    1    1    1 \n 417  418  419  420  421  422  423  424  425  426  427  428  429  430  431  432 \n   1    1    1    1    1    1    1    2    1    1    2    1    1    1    1    1 \n 433  434  435  436  437  438  439  440  441  442  443  444  445  446  447  448 \n   1    1    1    1    2    1    1    1    1    1    1    1    1    1    1    1 \n 449  450  451  452  453  454  455  456  457  458  459  460  461  462  463  464 \n   1    1    9    9    1    1    1    1    1    1    1    1    1    1    2    1 \n 465  466  467  468  469  470  471  472  473  474  475  476  477  478  479  480 \n   2    1    1    1    1    1    1    1    1    1    1    1    2    2    1    1 \n 481  482  483  484  485  486  487  488  489  490  491  492  493  494  495  496 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 497  498  499  500  501  502  503  504  505  506  507  508  509  510  511  512 \n   1    1    1    1    1    1    2    1    1    1    1    1    1    1    1    2 \n 513  514  515  516  517  518  519  520  521  522  523  524  525  526  527  528 \n   1    1    1    1    1    1    1    1    1    1    1    2    1    1    3    1 \n 529  530  531  532  533  534  535  536  537  538  539  540  541  542  543  544 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 545  546  547  548  549  550  551  552  553  554  555  556  557  558  559  560 \n   1    1    1    1    1    1    1    1    1    3    1    1    1    1    1    1 \n 561  562  563  564  565  566  567  568  569  570  571  572  573  574  575  576 \n   2    2    2    1    1    1    1    2    1    1    2    1    1    1    2    1 \n 577  578  579  580  581  582  583  584  585  586  587  588  589  590  591  592 \n   1    2    1    1    1    1    1    9    1    4    1    2    1    1    1    1 \n 593  594  595  596  597  598  599  600  601  602  603  604  605  606  607  608 \n   2    1    1    1    1    1    1    1    2    1    2    1    1    1    1    1 \n 609  610  611  612  613  614  615  616  617  618  619  620  621  622  623  624 \n   1    1    1    1    1    1    1    1    1    2    1    2    1    1    1    1 \n 625  626  627  628  629  630  631  632  633  634  635  636  637  638  639  640 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 641  642  643  644  645  646  647  648  649  650  651  652  653  654  655  656 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    4 \n 657  658  659  660  661  662  663  664  665  666  667  668  669  670  671  672 \n   1    1    1    1    1    1    1    3    1    1    1    1    1    1    1    1 \n 673  674  675  676  677  678  679  680  681  682  683  684  685  686  687  688 \n   1    1    1    1    1    4    1    1    1    1    1    4    1    1    1    1 \n 689  690  691  692  693  694  695  696  697  698  699  700  701  702  703  704 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 705  706  707  708  709  710  711  712  713  714  715  716  717  718  719  720 \n   1    1    2    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 721  722  723  724  725  726  727  728  729  730  731  732  733  734  735  736 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 737  738  739  740  741  742  743  744  745  746  747  748  749  750  751  752 \n   1    2    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 753  754  755  756  757  758  759  760  761  762  763  764  765  766  767  768 \n   1    1    1    1    1    2    1    1    1    1    1    1    1    1    1    1 \n 769  770  771  772  773  774  775  776  777  778  779  780  781  782  783  784 \n   1    1    1    1    1    1    1    1    1    4    1    1    1    1    1    1 \n 785  786  787  788  789  790  791  792  793  794  795  796  797  798  799  800 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 801  802  803  804  805  806  807  808  809  810  811  812  813  814  815  816 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 817  818  819  820  821  822  823  824  825  826  827  828  829  830  831  832 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 833  834  835  836  837  838  839  840  841  842  843  844  845  846  847  848 \n   1    1    1    1    1    1    1    2    1    1    1    1    1    1    1    1 \n 849  850  851  852  853  854  855  856  857  858  859  860  861  862  863  864 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 865  866  867  868  869  870  871  872  873  874  875  876  877  878  879  880 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    2 \n 881  882  883  884  885  886  887  888  889  890  891  892  893  894  895  896 \n   3    1    1    1    2    1    1    1    3    1    1    3    1    1    1    1 \n 897  898  899  900  901  902  903  904  905  906  907  908  909  910  911  912 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 913  914  915  916  917  918  919  920  921  922  923  924  925  926  927  928 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 929  930  931  932  933  934  935  936  937  938  939  940  941  942  943  944 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 945  946  947  948  949  950  951  952  953  954  955  956  957  958  959  960 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    2 \n 961  962  963  964  965  966  967  968  969  970  971  972  973  974  975  976 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 977  978  979  980  981  982  983  984  985  986  987  988  989  990  991  992 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 993  994  995  996  997  998  999 1000 1001 1002 1003 1004 1005 1006 1007 1008 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 \n   1    1    1    1    1    1    1    1    1    2    2    1    1    1    1    1 \n1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 \n   1    1    1    1    1    2    1    1    1    1    1    1    1    1    1    1 \n1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 \n   1    1    1    1    1    1    1    1    2    2    1    1    1    5    1    1 \n1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 \n   1    1    1    1    1    1    1    1    1    2    1    1    1    1    1    1 \n1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 \n   1    1    1    1    1    1    1    1    1    1    2    1    1    1    1    1 \n1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 \n   1    9    1    2    2    1    1    1    2    1    1    1    1    1    1    1 \n1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 \n   1    1    1    1    2    1    1    1    3    1    1    1    1    1    1    1 \n1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 \n   9    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 \n   1    1    1    2    1    1    1    1    1    1    1    1    1    1    1    1 \n1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    2 \n1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 \n   1    1    1    2    1    2    1    1    1    2    2    2    1    1    1    1 \n1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 \n   1    1    2    1    1    1    1    1    1    1    1    1    2    1    1    1 \n1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 \n   1    1    1    1    3    1    1    1    1    1    1    1    1    1    1    1 \n1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 \n   1    1    1    1    1    1    1    1    4    1    1    1    1    1    2    1 \n1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 \n   1    1    1    1    1    1    1    1    1    9    1    1    1    1    1    1 \n1393 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    2    1 \n1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 \n   1    2    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 \n   1    1    1    1    1    1    1    1    1    1    2    1    1    1    1    1 \n1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 \n   1    1    1    1    1    1    2    1    1    1    1    1    1    1    1    1 \n1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 1502 1503 1504 \n   1    1    1    1    1    1    1    1    1    1    5    1    1    1    1    1 \n1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 \n   1    1    1    1    1    2    1    1    1    1    2    1    1    1    1    3 \n1537 1538 1539 1540 1541 1542 1543 1544 1545 \n   1    1    1    1    1    1    2    1    1 \n\n\n\nsum(multiplicity(childcare_ppp) > 1)\n\n[1] 128\n\n\n\ntmap_mode('view')\ntm_shape(childcare) +\n  tm_dots(alpha=0.4, \n          size=0.05)\n\n\n\n\n\n\n\ntmap_mode('plot')\n\nJittering approach\n\nchildcare_ppp_jit <- rjitter(childcare_ppp, \n                             retry=TRUE, \n                             nsim=1, \n                             drop=TRUE)\n\nCheck for duplicates\n\nany(duplicated(childcare_ppp_jit))\n\n[1] FALSE\n\n\n\n\nCreating owin object\n\nsg_owin <- as(sg_sp, \"owin\")\n\n\nplot(sg_owin)\n\n\n\n\n\nsummary(sg_owin)\n\nWindow: polygonal boundary\n60 separate polygons (no holes)\n            vertices        area relative.area\npolygon 1         38 1.56140e+04      2.09e-05\npolygon 2        735 4.69093e+06      6.27e-03\npolygon 3         49 1.66986e+04      2.23e-05\npolygon 4         76 3.12332e+05      4.17e-04\npolygon 5       5141 6.36179e+08      8.50e-01\npolygon 6         42 5.58317e+04      7.46e-05\npolygon 7         67 1.31354e+06      1.75e-03\npolygon 8         15 4.46420e+03      5.96e-06\npolygon 9         14 5.46674e+03      7.30e-06\npolygon 10        37 5.26194e+03      7.03e-06\npolygon 11        53 3.44003e+04      4.59e-05\npolygon 12        74 5.82234e+04      7.78e-05\npolygon 13        69 5.63134e+04      7.52e-05\npolygon 14       143 1.45139e+05      1.94e-04\npolygon 15       165 3.38736e+05      4.52e-04\npolygon 16       130 9.40465e+04      1.26e-04\npolygon 17        19 1.80977e+03      2.42e-06\npolygon 18        16 2.01046e+03      2.69e-06\npolygon 19        93 4.30642e+05      5.75e-04\npolygon 20        90 4.15092e+05      5.54e-04\npolygon 21       721 1.92795e+06      2.57e-03\npolygon 22       330 1.11896e+06      1.49e-03\npolygon 23       115 9.28394e+05      1.24e-03\npolygon 24        37 1.01705e+04      1.36e-05\npolygon 25        25 1.66227e+04      2.22e-05\npolygon 26        10 2.14507e+03      2.86e-06\npolygon 27       190 2.02489e+05      2.70e-04\npolygon 28       175 9.25904e+05      1.24e-03\npolygon 29      1993 9.99217e+06      1.33e-02\npolygon 30        38 2.42492e+04      3.24e-05\npolygon 31        24 6.35239e+03      8.48e-06\npolygon 32        53 6.35791e+05      8.49e-04\npolygon 33        41 1.60161e+04      2.14e-05\npolygon 34        22 2.54368e+03      3.40e-06\npolygon 35        30 1.08382e+04      1.45e-05\npolygon 36       327 2.16921e+06      2.90e-03\npolygon 37       111 6.62927e+05      8.85e-04\npolygon 38        90 1.15991e+05      1.55e-04\npolygon 39        98 6.26829e+04      8.37e-05\npolygon 40       415 3.25384e+06      4.35e-03\npolygon 41       222 1.51142e+06      2.02e-03\npolygon 42       107 6.33039e+05      8.45e-04\npolygon 43         7 2.48299e+03      3.32e-06\npolygon 44        17 3.28303e+04      4.38e-05\npolygon 45        26 8.34758e+03      1.11e-05\npolygon 46       177 4.67446e+05      6.24e-04\npolygon 47        16 3.19460e+03      4.27e-06\npolygon 48        15 4.87296e+03      6.51e-06\npolygon 49        66 1.61841e+04      2.16e-05\npolygon 50       149 5.63430e+06      7.53e-03\npolygon 51       609 2.62570e+07      3.51e-02\npolygon 52         8 7.82256e+03      1.04e-05\npolygon 53       976 2.33447e+07      3.12e-02\npolygon 54        55 8.25379e+04      1.10e-04\npolygon 55       976 2.33447e+07      3.12e-02\npolygon 56        61 3.33449e+05      4.45e-04\npolygon 57         6 1.68410e+04      2.25e-05\npolygon 58         4 9.45963e+03      1.26e-05\npolygon 59        46 6.99702e+05      9.35e-04\npolygon 60        13 7.00873e+04      9.36e-05\nenclosing rectangle: [2663.93, 56047.79] x [16357.98, 50244.03] units\n                     (53380 x 33890 units)\nWindow area = 748741000 square units\nFraction of frame area: 0.414\n\n\nCombining point events object and owin object\n\nchildcareSG_ppp = childcare_ppp[sg_owin]\n\n\nsummary(childcareSG_ppp)\n\nPlanar point pattern:  1545 points\nAverage intensity 2.063463e-06 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 3 decimal places\ni.e. rounded to the nearest multiple of 0.001 units\n\nWindow: polygonal boundary\n60 separate polygons (no holes)\n            vertices        area relative.area\npolygon 1         38 1.56140e+04      2.09e-05\npolygon 2        735 4.69093e+06      6.27e-03\npolygon 3         49 1.66986e+04      2.23e-05\npolygon 4         76 3.12332e+05      4.17e-04\npolygon 5       5141 6.36179e+08      8.50e-01\npolygon 6         42 5.58317e+04      7.46e-05\npolygon 7         67 1.31354e+06      1.75e-03\npolygon 8         15 4.46420e+03      5.96e-06\npolygon 9         14 5.46674e+03      7.30e-06\npolygon 10        37 5.26194e+03      7.03e-06\npolygon 11        53 3.44003e+04      4.59e-05\npolygon 12        74 5.82234e+04      7.78e-05\npolygon 13        69 5.63134e+04      7.52e-05\npolygon 14       143 1.45139e+05      1.94e-04\npolygon 15       165 3.38736e+05      4.52e-04\npolygon 16       130 9.40465e+04      1.26e-04\npolygon 17        19 1.80977e+03      2.42e-06\npolygon 18        16 2.01046e+03      2.69e-06\npolygon 19        93 4.30642e+05      5.75e-04\npolygon 20        90 4.15092e+05      5.54e-04\npolygon 21       721 1.92795e+06      2.57e-03\npolygon 22       330 1.11896e+06      1.49e-03\npolygon 23       115 9.28394e+05      1.24e-03\npolygon 24        37 1.01705e+04      1.36e-05\npolygon 25        25 1.66227e+04      2.22e-05\npolygon 26        10 2.14507e+03      2.86e-06\npolygon 27       190 2.02489e+05      2.70e-04\npolygon 28       175 9.25904e+05      1.24e-03\npolygon 29      1993 9.99217e+06      1.33e-02\npolygon 30        38 2.42492e+04      3.24e-05\npolygon 31        24 6.35239e+03      8.48e-06\npolygon 32        53 6.35791e+05      8.49e-04\npolygon 33        41 1.60161e+04      2.14e-05\npolygon 34        22 2.54368e+03      3.40e-06\npolygon 35        30 1.08382e+04      1.45e-05\npolygon 36       327 2.16921e+06      2.90e-03\npolygon 37       111 6.62927e+05      8.85e-04\npolygon 38        90 1.15991e+05      1.55e-04\npolygon 39        98 6.26829e+04      8.37e-05\npolygon 40       415 3.25384e+06      4.35e-03\npolygon 41       222 1.51142e+06      2.02e-03\npolygon 42       107 6.33039e+05      8.45e-04\npolygon 43         7 2.48299e+03      3.32e-06\npolygon 44        17 3.28303e+04      4.38e-05\npolygon 45        26 8.34758e+03      1.11e-05\npolygon 46       177 4.67446e+05      6.24e-04\npolygon 47        16 3.19460e+03      4.27e-06\npolygon 48        15 4.87296e+03      6.51e-06\npolygon 49        66 1.61841e+04      2.16e-05\npolygon 50       149 5.63430e+06      7.53e-03\npolygon 51       609 2.62570e+07      3.51e-02\npolygon 52         8 7.82256e+03      1.04e-05\npolygon 53       976 2.33447e+07      3.12e-02\npolygon 54        55 8.25379e+04      1.10e-04\npolygon 55       976 2.33447e+07      3.12e-02\npolygon 56        61 3.33449e+05      4.45e-04\npolygon 57         6 1.68410e+04      2.25e-05\npolygon 58         4 9.45963e+03      1.26e-05\npolygon 59        46 6.99702e+05      9.35e-04\npolygon 60        13 7.00873e+04      9.36e-05\nenclosing rectangle: [2663.93, 56047.79] x [16357.98, 50244.03] units\n                     (53380 x 33890 units)\nWindow area = 748741000 square units\nFraction of frame area: 0.414\n\n\n\nplot(childcareSG_ppp)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04a.html#first-order-spatial-point-patterns-analysis",
    "href": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04a.html#first-order-spatial-point-patterns-analysis",
    "title": "Hands-On Exercise 04A",
    "section": "First-order Spatial Point Patterns Analysis",
    "text": "First-order Spatial Point Patterns Analysis\n\nKernel Density Estimation\n\nComputing kernel density estimation using automatic bandwidth selection method\n\nkde_childcareSG_bw <- density(childcareSG_ppp,\n                              sigma=bw.diggle,\n                              edge=TRUE,\n                            kernel=\"gaussian\") \n\n\nplot(kde_childcareSG_bw)\n\n\n\n\n\n\nRetrieve bandwidth used\n\nbw <- bw.diggle(childcareSG_ppp)\nbw\n\n   sigma \n298.4095 \n\n\n\n\nRe-scaling KDE values\n\nchildcareSG_ppp.km <- rescale(childcareSG_ppp, 1000, \"km\")\n\n\nkde_childcareSG.bw <- density(childcareSG_ppp.km, sigma=bw.diggle, edge=TRUE, kernel=\"gaussian\")\nplot(kde_childcareSG.bw)\n\n\n\n\nWorking with different automatic badwidth methods\nChecking bandwidth\n\nbw.CvL(childcareSG_ppp.km)\n\n   sigma \n4.543278 \n\n\n\nbw.scott(childcareSG_ppp.km)\n\n sigma.x  sigma.y \n2.224898 1.450966 \n\n\n\nbw.ppl(childcareSG_ppp.km)\n\n    sigma \n0.3897114 \n\n\n\nbw.diggle(childcareSG_ppp.km)\n\n    sigma \n0.2984095 \n\n\nCompare output\n\nkde_childcareSG.ppl <- density(childcareSG_ppp.km, \n                               sigma=bw.ppl, \n                               edge=TRUE,\n                               kernel=\"gaussian\")\npar(mfrow=c(1,2))\nplot(kde_childcareSG.bw, main = \"bw.diggle\")\nplot(kde_childcareSG.ppl, main = \"bw.ppl\")\n\n\n\n\n\n\n\nWorking with different kernel methods\nCompute three more kernel density estimations\n\npar(mfrow=c(2,2))\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"gaussian\"), \n     main=\"Gaussian\")\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"epanechnikov\"), \n     main=\"Epanechnikov\")\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"quartic\"), \n     main=\"Quartic\")\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"disc\"), \n     main=\"Disc\")"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04a.html#fixed-and-adaptive-kde",
    "href": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04a.html#fixed-and-adaptive-kde",
    "title": "Hands-On Exercise 04A",
    "section": "Fixed and Adaptive KDE",
    "text": "Fixed and Adaptive KDE\n\nComputing KDE by using fixed bandwidth\n\nkde_childcareSG_600 <- density(childcareSG_ppp.km, sigma=0.6, edge=TRUE, kernel=\"gaussian\")\nplot(kde_childcareSG_600)\n\n\n\n\nComputing KDE by using adaptive bandwidth\nDerive adaptive kernel density estimation\n\nkde_childcareSG_adaptive <- adaptive.density(childcareSG_ppp.km, method=\"kernel\")\nplot(kde_childcareSG_adaptive)\n\n\n\n\nComparing estimations\n\npar(mfrow=c(1,2))\nplot(kde_childcareSG.bw, main = \"Fixed bandwidth\")\nplot(kde_childcareSG_adaptive, main = \"Adaptive bandwidth\")\n\n\n\n\n\n\nConverting KDE output into grid object\n\ngridded_kde_childcareSG_bw <- as.SpatialGridDataFrame.im(kde_childcareSG.bw)\nspplot(gridded_kde_childcareSG_bw)\n\n\n\n\nConverting gridded output into raster\n\nkde_childcareSG_bw_raster <- raster(gridded_kde_childcareSG_bw)\n\nProperties\n\nkde_childcareSG_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.4170614, 0.2647348  (x, y)\nextent     : 2.663926, 56.04779, 16.35798, 50.24403  (xmin, xmax, ymin, ymax)\ncrs        : NA \nsource     : memory\nnames      : v \nvalues     : -8.476185e-15, 28.51831  (min, max)\n\n\nAssigning projection systems\n\nprojection(kde_childcareSG_bw_raster) <- CRS(\"+init=EPSG:3414\")\nkde_childcareSG_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.4170614, 0.2647348  (x, y)\nextent     : 2.663926, 56.04779, 16.35798, 50.24403  (xmin, xmax, ymin, ymax)\ncrs        : +init=EPSG:3414 \nsource     : memory\nnames      : v \nvalues     : -8.476185e-15, 28.51831  (min, max)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04a.html#visualising-the-output-in-tmap",
    "href": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04a.html#visualising-the-output-in-tmap",
    "title": "Hands-On Exercise 04A",
    "section": "Visualising the output in tmap",
    "text": "Visualising the output in tmap\n\ntm_shape(kde_childcareSG_bw_raster) + \n  tm_raster(\"v\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\"), frame = FALSE)\n\n\n\n\n\nComparing Spatial Point Patterns using KDE\nExtracting study area\n\npg = mpsz[mpsz@data$PLN_AREA_N == \"PUNGGOL\",]\ntm = mpsz[mpsz@data$PLN_AREA_N == \"TAMPINES\",]\nck = mpsz[mpsz@data$PLN_AREA_N == \"CHOA CHU KANG\",]\njw = mpsz[mpsz@data$PLN_AREA_N == \"JURONG WEST\",]\n\nPlotting areas\n\npar(mfrow=c(2,2))\nplot(pg, main = \"Ponggol\")\nplot(tm, main = \"Tampines\")\nplot(ck, main = \"Choa Chu Kang\")\nplot(jw, main = \"Jurong West\")\n\n\n\n\n\nConverting the spatial point data frame into generic sp format\nConverting these SpatialPolygonsDataFrame layers into generic spatialpolygons layers\n\npg_sp = as(pg, \"SpatialPolygons\")\ntm_sp = as(tm, \"SpatialPolygons\")\nck_sp = as(ck, \"SpatialPolygons\")\njw_sp = as(jw, \"SpatialPolygons\")"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04a.html#creating-owin-object-1",
    "href": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04a.html#creating-owin-object-1",
    "title": "Hands-On Exercise 04A",
    "section": "Creating owin object",
    "text": "Creating owin object\n\npg_owin = as(pg_sp, \"owin\")\ntm_owin = as(tm_sp, \"owin\")\nck_owin = as(ck_sp, \"owin\")\njw_owin = as(jw_sp, \"owin\")\n\n\nCombining childcare points and the study area\n\nchildcare_pg_ppp = childcare_ppp_jit[pg_owin]\nchildcare_tm_ppp = childcare_ppp_jit[tm_owin]\nchildcare_ck_ppp = childcare_ppp_jit[ck_owin]\nchildcare_jw_ppp = childcare_ppp_jit[jw_owin]\n\n\nchildcare_pg_ppp.km = rescale(childcare_pg_ppp, 1000, \"km\")\nchildcare_tm_ppp.km = rescale(childcare_tm_ppp, 1000, \"km\")\nchildcare_ck_ppp.km = rescale(childcare_ck_ppp, 1000, \"km\")\nchildcare_jw_ppp.km = rescale(childcare_jw_ppp, 1000, \"km\")\n\n\npar(mfrow=c(2,2))\nplot(childcare_pg_ppp.km, main=\"Punggol\")\nplot(childcare_tm_ppp.km, main=\"Tampines\")\nplot(childcare_ck_ppp.km, main=\"Choa Chu Kang\")\nplot(childcare_jw_ppp.km, main=\"Jurong West\")\n\n\n\n\n\n\nComputing KDE\n\npar(mfrow=c(2,2))\nplot(density(childcare_pg_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Punggol\")\nplot(density(childcare_tm_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Tampines\")\nplot(density(childcare_ck_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Choa Chu Kang\")\nplot(density(childcare_jw_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Jurong West\")\n\n\n\n\n\n\nComputing fixed bandwidth KDE (using 250m)\n\npar(mfrow=c(2,2))\nplot(density(childcare_ck_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Chou Chu Kang\")\nplot(density(childcare_jw_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Jurong West\")\nplot(density(childcare_pg_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Punggol\")\nplot(density(childcare_tm_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Tampines\")"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04a.html#nearest-neighbour-analysis",
    "href": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04a.html#nearest-neighbour-analysis",
    "title": "Hands-On Exercise 04A",
    "section": "Nearest Neighbour Analysis",
    "text": "Nearest Neighbour Analysis\nTesting spatial point patterns using Clark and Evans Test\nThe test hypotheses are:\nHo = The distribution of childcare services are randomly distributed.\nH1= The distribution of childcare services are not randomly distributed.\nThe 95% confident interval will be used.\n\nclarkevans.test(childcareSG_ppp,\n                correction=\"none\",\n                clipregion=\"sg_owin\",\n                alternative=c(\"clustered\"),\n                nsim=99)\n\n\n    Clark-Evans test\n    No edge correction\n    Monte Carlo test based on 99 simulations of CSR with fixed n\n\ndata:  childcareSG_ppp\nR = 0.54756, p-value = 0.01\nalternative hypothesis: clustered (R < 1)\n\n\n\nClark and Evans Test: Choa Chu Kang planning area\n\nclarkevans.test(childcare_ck_ppp,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=999)\n\n\n    Clark-Evans test\n    No edge correction\n    Monte Carlo test based on 999 simulations of CSR with fixed n\n\ndata:  childcare_ck_ppp\nR = 0.91943, p-value = 0.058\nalternative hypothesis: two-sided\n\n\n\n\nClark and Evans Test: Tampines planning area\n\nclarkevans.test(childcare_tm_ppp,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=999)\n\n\n    Clark-Evans test\n    No edge correction\n    Monte Carlo test based on 999 simulations of CSR with fixed n\n\ndata:  childcare_tm_ppp\nR = 0.82182, p-value = 0.002\nalternative hypothesis: two-sided"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04b.html",
    "href": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04b.html",
    "title": "Hands-On Exercise 04B",
    "section": "",
    "text": "pacman::p_load(maptools, sf, raster, spatstat, tmap)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04b.html#importing-spatial-data",
    "href": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04b.html#importing-spatial-data",
    "title": "Hands-On Exercise 04B",
    "section": "Importing spatial data",
    "text": "Importing spatial data\n\nchildcare_sf <- st_read(\"data/child-care-services-geojson.geojson\") %>%\n  st_transform(crs = 3414)\n\nReading layer `child-care-services-geojson' from data source \n  `C:\\xinyeehow\\IS415-GAA\\Hands-On_Ex\\Hands-On_Ex04\\data\\child-care-services-geojson.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 1545 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.248403 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\nsg_sf <- st_read(dsn = \"data\", layer=\"CostalOutline\")  %>%\n  st_transform(crs = 3414)\n\nReading layer `CostalOutline' from data source \n  `C:\\xinyeehow\\IS415-GAA\\Hands-On_Ex\\Hands-On_Ex04\\data' using driver `ESRI Shapefile'\nSimple feature collection with 60 features and 4 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 2663.926 ymin: 16357.98 xmax: 56047.79 ymax: 50244.03\nProjected CRS: SVY21\n\n\n\nst_crs(sg_sf)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\nmpsz_sf <- st_read(dsn = \"data\", \n                layer = \"MP14_SUBZONE_WEB_PL\")  %>%\n  st_transform(crs = 3414)\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\xinyeehow\\IS415-GAA\\Hands-On_Ex\\Hands-On_Ex04\\data' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\ntmap_mode('view')\n\n\ntm_shape(childcare_sf)+\n  tm_dots()\n\n\n\n\n\n\n\ntmap_mode('plot')\n\n\nConverting sf data frames to sp’s Spatial* class\n\nchildcare <- as_Spatial(childcare_sf)\nmpsz <- as_Spatial(mpsz_sf)\nsg <- as_Spatial(sg_sf)\n\n\n\nConverting the Spatial* class into generic sp format\n\nchildcare_sp <- as(childcare, \"SpatialPoints\")\nsg_sp <- as(sg, \"SpatialPolygons\")\n\n\nchildcare_sp\n\nclass       : SpatialPoints \nfeatures    : 1545 \nextent      : 11203.01, 45404.24, 25667.6, 49300.88  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \n\n\n\nsg_sp\n\nclass       : SpatialPolygons \nfeatures    : 60 \nextent      : 2663.926, 56047.79, 16357.98, 50244.03  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \n\n\n\n\nConverting the generic sp format into spatstat’s ppp format\n\nchildcare_ppp <- as(childcare_sp, \"ppp\")\nchildcare_ppp\n\nPlanar point pattern: 1545 points\nwindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units\n\n\n\nplot(childcare_ppp)\n\n\n\n\n\nsummary(childcare_ppp)\n\nPlanar point pattern:  1545 points\nAverage intensity 1.91145e-06 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 3 decimal places\ni.e. rounded to the nearest multiple of 0.001 units\n\nWindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units\n                    (34200 x 23630 units)\nWindow area = 808287000 square units\n\n\n\n\nHandling Duplicates\n\nany(duplicated(childcare_ppp))\n\n[1] TRUE\n\n\n\nsum(multiplicity(childcare_ppp) > 1)\n\n[1] 128\n\n\n\ntmap_mode('view')\n\n\ntm_shape(childcare) +\n  tm_dots(alpha=0.4, \n          size=0.05)\n\n\n\n\n\n\n\ntmap_mode('plot')\n\n\nchildcare_ppp_jit <- rjitter(childcare_ppp, \n                             retry=TRUE, \n                             nsim=1, \n                             drop=TRUE)\n\n\nany(duplicated(childcare_ppp_jit))\n\n[1] FALSE\n\n\n\n\nCreating owin object\n\nsg_owin <- as(sg_sp, \"owin\")\n\n\nplot(sg_owin)\n\n\n\n\n\nsummary(sg_owin)\n\nWindow: polygonal boundary\n60 separate polygons (no holes)\n            vertices        area relative.area\npolygon 1         38 1.56140e+04      2.09e-05\npolygon 2        735 4.69093e+06      6.27e-03\npolygon 3         49 1.66986e+04      2.23e-05\npolygon 4         76 3.12332e+05      4.17e-04\npolygon 5       5141 6.36179e+08      8.50e-01\npolygon 6         42 5.58317e+04      7.46e-05\npolygon 7         67 1.31354e+06      1.75e-03\npolygon 8         15 4.46420e+03      5.96e-06\npolygon 9         14 5.46674e+03      7.30e-06\npolygon 10        37 5.26194e+03      7.03e-06\npolygon 11        53 3.44003e+04      4.59e-05\npolygon 12        74 5.82234e+04      7.78e-05\npolygon 13        69 5.63134e+04      7.52e-05\npolygon 14       143 1.45139e+05      1.94e-04\npolygon 15       165 3.38736e+05      4.52e-04\npolygon 16       130 9.40465e+04      1.26e-04\npolygon 17        19 1.80977e+03      2.42e-06\npolygon 18        16 2.01046e+03      2.69e-06\npolygon 19        93 4.30642e+05      5.75e-04\npolygon 20        90 4.15092e+05      5.54e-04\npolygon 21       721 1.92795e+06      2.57e-03\npolygon 22       330 1.11896e+06      1.49e-03\npolygon 23       115 9.28394e+05      1.24e-03\npolygon 24        37 1.01705e+04      1.36e-05\npolygon 25        25 1.66227e+04      2.22e-05\npolygon 26        10 2.14507e+03      2.86e-06\npolygon 27       190 2.02489e+05      2.70e-04\npolygon 28       175 9.25904e+05      1.24e-03\npolygon 29      1993 9.99217e+06      1.33e-02\npolygon 30        38 2.42492e+04      3.24e-05\npolygon 31        24 6.35239e+03      8.48e-06\npolygon 32        53 6.35791e+05      8.49e-04\npolygon 33        41 1.60161e+04      2.14e-05\npolygon 34        22 2.54368e+03      3.40e-06\npolygon 35        30 1.08382e+04      1.45e-05\npolygon 36       327 2.16921e+06      2.90e-03\npolygon 37       111 6.62927e+05      8.85e-04\npolygon 38        90 1.15991e+05      1.55e-04\npolygon 39        98 6.26829e+04      8.37e-05\npolygon 40       415 3.25384e+06      4.35e-03\npolygon 41       222 1.51142e+06      2.02e-03\npolygon 42       107 6.33039e+05      8.45e-04\npolygon 43         7 2.48299e+03      3.32e-06\npolygon 44        17 3.28303e+04      4.38e-05\npolygon 45        26 8.34758e+03      1.11e-05\npolygon 46       177 4.67446e+05      6.24e-04\npolygon 47        16 3.19460e+03      4.27e-06\npolygon 48        15 4.87296e+03      6.51e-06\npolygon 49        66 1.61841e+04      2.16e-05\npolygon 50       149 5.63430e+06      7.53e-03\npolygon 51       609 2.62570e+07      3.51e-02\npolygon 52         8 7.82256e+03      1.04e-05\npolygon 53       976 2.33447e+07      3.12e-02\npolygon 54        55 8.25379e+04      1.10e-04\npolygon 55       976 2.33447e+07      3.12e-02\npolygon 56        61 3.33449e+05      4.45e-04\npolygon 57         6 1.68410e+04      2.25e-05\npolygon 58         4 9.45963e+03      1.26e-05\npolygon 59        46 6.99702e+05      9.35e-04\npolygon 60        13 7.00873e+04      9.36e-05\nenclosing rectangle: [2663.93, 56047.79] x [16357.98, 50244.03] units\n                     (53380 x 33890 units)\nWindow area = 748741000 square units\nFraction of frame area: 0.414\n\n\n\n\nCombining point events object and owin object\n\nchildcareSG_ppp = childcare_ppp[sg_owin]\n\n\nsummary(childcareSG_ppp)\n\nPlanar point pattern:  1545 points\nAverage intensity 2.063463e-06 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 3 decimal places\ni.e. rounded to the nearest multiple of 0.001 units\n\nWindow: polygonal boundary\n60 separate polygons (no holes)\n            vertices        area relative.area\npolygon 1         38 1.56140e+04      2.09e-05\npolygon 2        735 4.69093e+06      6.27e-03\npolygon 3         49 1.66986e+04      2.23e-05\npolygon 4         76 3.12332e+05      4.17e-04\npolygon 5       5141 6.36179e+08      8.50e-01\npolygon 6         42 5.58317e+04      7.46e-05\npolygon 7         67 1.31354e+06      1.75e-03\npolygon 8         15 4.46420e+03      5.96e-06\npolygon 9         14 5.46674e+03      7.30e-06\npolygon 10        37 5.26194e+03      7.03e-06\npolygon 11        53 3.44003e+04      4.59e-05\npolygon 12        74 5.82234e+04      7.78e-05\npolygon 13        69 5.63134e+04      7.52e-05\npolygon 14       143 1.45139e+05      1.94e-04\npolygon 15       165 3.38736e+05      4.52e-04\npolygon 16       130 9.40465e+04      1.26e-04\npolygon 17        19 1.80977e+03      2.42e-06\npolygon 18        16 2.01046e+03      2.69e-06\npolygon 19        93 4.30642e+05      5.75e-04\npolygon 20        90 4.15092e+05      5.54e-04\npolygon 21       721 1.92795e+06      2.57e-03\npolygon 22       330 1.11896e+06      1.49e-03\npolygon 23       115 9.28394e+05      1.24e-03\npolygon 24        37 1.01705e+04      1.36e-05\npolygon 25        25 1.66227e+04      2.22e-05\npolygon 26        10 2.14507e+03      2.86e-06\npolygon 27       190 2.02489e+05      2.70e-04\npolygon 28       175 9.25904e+05      1.24e-03\npolygon 29      1993 9.99217e+06      1.33e-02\npolygon 30        38 2.42492e+04      3.24e-05\npolygon 31        24 6.35239e+03      8.48e-06\npolygon 32        53 6.35791e+05      8.49e-04\npolygon 33        41 1.60161e+04      2.14e-05\npolygon 34        22 2.54368e+03      3.40e-06\npolygon 35        30 1.08382e+04      1.45e-05\npolygon 36       327 2.16921e+06      2.90e-03\npolygon 37       111 6.62927e+05      8.85e-04\npolygon 38        90 1.15991e+05      1.55e-04\npolygon 39        98 6.26829e+04      8.37e-05\npolygon 40       415 3.25384e+06      4.35e-03\npolygon 41       222 1.51142e+06      2.02e-03\npolygon 42       107 6.33039e+05      8.45e-04\npolygon 43         7 2.48299e+03      3.32e-06\npolygon 44        17 3.28303e+04      4.38e-05\npolygon 45        26 8.34758e+03      1.11e-05\npolygon 46       177 4.67446e+05      6.24e-04\npolygon 47        16 3.19460e+03      4.27e-06\npolygon 48        15 4.87296e+03      6.51e-06\npolygon 49        66 1.61841e+04      2.16e-05\npolygon 50       149 5.63430e+06      7.53e-03\npolygon 51       609 2.62570e+07      3.51e-02\npolygon 52         8 7.82256e+03      1.04e-05\npolygon 53       976 2.33447e+07      3.12e-02\npolygon 54        55 8.25379e+04      1.10e-04\npolygon 55       976 2.33447e+07      3.12e-02\npolygon 56        61 3.33449e+05      4.45e-04\npolygon 57         6 1.68410e+04      2.25e-05\npolygon 58         4 9.45963e+03      1.26e-05\npolygon 59        46 6.99702e+05      9.35e-04\npolygon 60        13 7.00873e+04      9.36e-05\nenclosing rectangle: [2663.93, 56047.79] x [16357.98, 50244.03] units\n                     (53380 x 33890 units)\nWindow area = 748741000 square units\nFraction of frame area: 0.414\n\n\n\nplot(sg_owin, col='light blue')\npoints(childcareSG_ppp, col='black', cex=.5)\n\n\n\n\nAlternative method:\n\nplot(childcareSG_ppp)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04b.html#extract-study-area-by-target-planning-area",
    "href": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04b.html#extract-study-area-by-target-planning-area",
    "title": "Hands-On Exercise 04B",
    "section": "Extract study area by target planning area",
    "text": "Extract study area by target planning area\n\npg = mpsz[mpsz@data$PLN_AREA_N == \"PUNGGOL\",]\ntm = mpsz[mpsz@data$PLN_AREA_N == \"TAMPINES\",]\nck = mpsz[mpsz@data$PLN_AREA_N == \"CHOA CHU KANG\",]\njw = mpsz[mpsz@data$PLN_AREA_N == \"JURONG WEST\",]\n\n\npar(mfrow=c(2,2))\nplot(pg, main = \"Ponggol\")\nplot(tm, main = \"Tampines\")\nplot(ck, main = \"Choa Chu Kang\")\nplot(jw, main = \"Jurong West\")\n\n\n\n\n\nConverting spatial point data frame into generic sp format\n\npg_sp = as(pg, \"SpatialPolygons\")\ntm_sp = as(tm, \"SpatialPolygons\")\nck_sp = as(ck, \"SpatialPolygons\")\njw_sp = as(jw, \"SpatialPolygons\")\n\n\n\nCreating owin object\n\npg_owin = as(pg_sp, \"owin\")\ntm_owin = as(tm_sp, \"owin\")\nck_owin = as(ck_sp, \"owin\")\njw_owin = as(jw_sp, \"owin\")\n\n\n\nCombining childcare points and study areas\n\nchildcare_pg_ppp = childcare_ppp_jit[pg_owin]\nchildcare_tm_ppp = childcare_ppp_jit[tm_owin]\nchildcare_ck_ppp = childcare_ppp_jit[ck_owin]\nchildcare_jw_ppp = childcare_ppp_jit[jw_owin]\n\ntransform the unit of measurements from m to km.\n\nchildcare_pg_ppp.km = rescale(childcare_pg_ppp, 1000, \"km\")\nchildcare_tm_ppp.km = rescale(childcare_tm_ppp, 1000, \"km\")\nchildcare_ck_ppp.km = rescale(childcare_ck_ppp, 1000, \"km\")\nchildcare_jw_ppp.km = rescale(childcare_jw_ppp, 1000, \"km\")\n\nPlotting them out\n\npar(mfrow=c(2,2))\nplot(childcare_pg_ppp.km, main=\"Punggol\")\nplot(childcare_tm_ppp.km, main=\"Tampines\")\nplot(childcare_ck_ppp.km, main=\"Choa Chu Kang\")\nplot(childcare_jw_ppp.km, main=\"Jurong West\")"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04b.html#second-order-spatial-point-pattern-analysis",
    "href": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04b.html#second-order-spatial-point-pattern-analysis",
    "title": "Hands-On Exercise 04B",
    "section": "Second-order Spatial Point Pattern Analysis",
    "text": "Second-order Spatial Point Pattern Analysis\n\nAnalysing spatial point process using G-function Gest() function\n\nEstimates the nearest neighbour distance distribution function G(r) from a point pattern in a window of arbitrary shape.\nThe estimate of G is a useful statistic summarizing one aspect of the “clustering” points.\n\n\n\nChoa Chu Kang Planning Area\n\nG_CK = Gest(childcare_ck_ppp, correction = \"border\")\nplot(G_CK, xlim=c(0,500))\n\n\n\n\n\n\nPerforming complete spatial Randomness Test\n\nHo = The distribution of childcare services at Choa Chu Kang are randomly distributed.\nH1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001. (99.9%)\n\nMonte Carlo test with G-function\n\nG_CK.csr <- envelope(childcare_ck_ppp, Gest, nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60........\n.70.........80.........90.........100.........110.........120.........130......\n...140.........150.........160.........170.........180.........190.........200....\n.....210.........220.........230.........240.........250.........260.........270..\n.......280.........290.........300.........310.........320.........330.........340\n.........350.........360.........370.........380.........390.........400........\n.410.........420.........430.........440.........450.........460.........470......\n...480.........490.........500.........510.........520.........530.........540....\n.....550.........560.........570.........580.........590.........600.........610..\n.......620.........630.........640.........650.........660.........670.........680\n.........690.........700.........710.........720.........730.........740........\n.750.........760.........770.........780.........790.........800.........810......\n...820.........830.........840.........850.........860.........870.........880....\n.....890.........900.........910.........920.........930.........940.........950..\n.......960.........970.........980.........990........ 999.\n\nDone.\n\n\n\nplot(G_CK.csr)\n\n\n\n\n\n\nTampines Planning Area\n\nG_tm = Gest(childcare_tm_ppp, correction = \"best\")\nplot(G_tm)\n\n\n\n\n\nHo = The distribution of childcare services at Tampines are randomly distributed.\nH1= The distribution of childcare services at Tampines are not randomly distributed.\nThe null hypothesis will be rejected is p-value is smaller than alpha value of 0.001.\n\n\nG_tm.csr <- envelope(childcare_tm_ppp, Gest, correction = \"all\", nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60........\n.70.........80.........90.........100.........110.........120.........130......\n...140.........150.........160.........170.........180.........190.........200....\n.....210.........220.........230.........240.........250.........260.........270..\n.......280.........290.........300.........310.........320.........330.........340\n.........350.........360.........370.........380.........390.........400........\n.410.........420.........430.........440.........450.........460.........470......\n...480.........490.........500.........510.........520.........530.........540....\n.....550.........560.........570.........580.........590.........600.........610..\n.......620.........630.........640.........650.........660.........670.........680\n.........690.........700.........710.........720.........730.........740........\n.750.........760.........770.........780.........790.........800.........810......\n...820.........830.........840.........850.........860.........870.........880....\n.....890.........900.........910.........920.........930.........940.........950..\n.......960.........970.........980.........990........ 999.\n\nDone.\n\n\n\nplot(G_tm.csr)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04b.html#analysing-spatial-point-process-using-f-function",
    "href": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04b.html#analysing-spatial-point-process-using-f-function",
    "title": "Hands-On Exercise 04B",
    "section": "Analysing Spatial Point Process Using F-Function",
    "text": "Analysing Spatial Point Process Using F-Function\nEstimates the empty space function F(r) or its hazard rate h(r) from a point pattern in a window of arbitrary shape.\n\nChoa Chu Kang Planning Area\n\nF_CK = Fest(childcare_ck_ppp)\nplot(F_CK)\n\n\n\n\n\n\nPerforming Complete Spatial Randomness Test\n\nF_CK.csr <- envelope(childcare_ck_ppp, Fest, nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60........\n.70.........80.........90.........100.........110.........120.........130......\n...140.........150.........160.........170.........180.........190.........200....\n.....210.........220.........230.........240.........250.........260.........270..\n.......280.........290.........300.........310.........320.........330.........340\n.........350.........360.........370.........380.........390.........400........\n.410.........420.........430.........440.........450.........460.........470......\n...480.........490.........500.........510.........520.........530.........540....\n.....550.........560.........570.........580.........590.........600.........610..\n.......620.........630.........640.........650.........660.........670.........680\n.........690.........700.........710.........720.........730.........740........\n.750.........760.........770.........780.........790.........800.........810......\n...820.........830.........840.........850.........860.........870.........880....\n.....890.........900.........910.........920.........930.........940.........950..\n.......960.........970.........980.........990........ 999.\n\nDone.\n\n\n\nplot(F_CK.csr)\n\n\n\n\n\n\nTampines Planning Area\n\nF_tm = Fest(childcare_tm_ppp, correction = \"best\")\nplot(F_tm)\n\n\n\n\n\nF_tm.csr <- envelope(childcare_tm_ppp, Fest, correction = \"all\", nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60........\n.70.........80.........90.........100.........110.........120.........130......\n...140.........150.........160.........170.........180.........190.........200....\n.....210.........220.........230.........240.........250.........260.........270..\n.......280.........290.........300.........310.........320.........330.........340\n.........350.........360.........370.........380.........390.........400........\n.410.........420.........430.........440.........450.........460.........470......\n...480.........490.........500.........510.........520.........530.........540....\n.....550.........560.........570.........580.........590.........600.........610..\n.......620.........630.........640.........650.........660.........670.........680\n.........690.........700.........710.........720.........730.........740........\n.750.........760.........770.........780.........790.........800.........810......\n...820.........830.........840.........850.........860.........870.........880....\n.....890.........900.........910.........920.........930.........940.........950..\n.......960.........970.........980.........990........ 999.\n\nDone.\n\n\n\nplot(F_tm.csr)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04b.html#analysing-spatial-point-process-using-k-function",
    "href": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04b.html#analysing-spatial-point-process-using-k-function",
    "title": "Hands-On Exercise 04B",
    "section": "Analysing Spatial Point Process Using K-Function",
    "text": "Analysing Spatial Point Process Using K-Function\nK-function measures the number of events found up to a given distance of any particular event\n\nChoa Chu Kang Planning Area\n\nK_ck = Kest(childcare_ck_ppp, correction = \"Ripley\")\nplot(K_ck, . -r ~ r, ylab= \"K(d)-r\", xlab = \"d(m)\")\n\n\n\n\n\nK_ck.csr <- envelope(childcare_ck_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98,  99.\n\nDone.\n\n\n\nplot(K_ck.csr, . - r ~ r, xlab=\"d\", ylab=\"K(d)-r\")\n\n\n\n\n\n\nTampines Planning Area\n\nK_tm = Kest(childcare_tm_ppp, correction = \"Ripley\")\nplot(K_tm, . -r ~ r, \n     ylab= \"K(d)-r\", xlab = \"d(m)\", \n     xlim=c(0,1000))\n\n\n\n\n\nK_tm.csr <- envelope(childcare_tm_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98,  99.\n\nDone.\n\n\n\nplot(K_tm.csr, . - r ~ r, \n     xlab=\"d\", ylab=\"K(d)-r\", xlim=c(0,500))"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04b.html#analysing-spatial-point-process-using-l-function",
    "href": "Hands-On_Ex/Hands-On_Ex04/Hands-On_Ex04b.html#analysing-spatial-point-process-using-l-function",
    "title": "Hands-On Exercise 04B",
    "section": "Analysing Spatial Point Process Using L-Function",
    "text": "Analysing Spatial Point Process Using L-Function\nChoa Chu Kang Planning Area\n\nL_ck = Lest(childcare_ck_ppp, correction = \"Ripley\")\nplot(L_ck, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\")\n\n\n\n\n\nL_ck.csr <- envelope(childcare_ck_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98,  99.\n\nDone.\n\n\n\nplot(L_ck.csr, . - r ~ r, xlab=\"d\", ylab=\"L(d)-r\")\n\n\n\n\n\nTampines Planning Area\n\nL_tm = Lest(childcare_tm_ppp, correction = \"Ripley\")\nplot(L_tm, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\", \n     xlim=c(0,1000))\n\n\n\n\n\nL_tm.csr <- envelope(childcare_tm_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98,  99.\n\nDone.\n\n\n\nplot(L_tm.csr, . - r ~ r, \n     xlab=\"d\", ylab=\"L(d)-r\", xlim=c(0,500))"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05.html",
    "href": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05.html",
    "title": "Hands-On Exercise 05",
    "section": "",
    "text": "For week 5"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex07/Hands-On_Ex07.html",
    "href": "Hands-On_Ex/Hands-On_Ex07/Hands-On_Ex07.html",
    "title": "Hands-On Exercise 07",
    "section": "",
    "text": "pacman::p_load(sf, spdep, tmap, tidyverse)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex07/Hands-On_Ex07.html#global-spatial-autocorrelation",
    "href": "Hands-On_Ex/Hands-On_Ex07/Hands-On_Ex07.html#global-spatial-autocorrelation",
    "title": "Hands-On Exercise 07",
    "section": "Global Spatial Autocorrelation",
    "text": "Global Spatial Autocorrelation\nComputing Contiguity Spatial Weights\n\nwm_q <- poly2nb(hunan, \n                queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nRow-standardised weights matrix\n\nrswm_q <- nb2listw(wm_q, \n                   style=\"W\", \n                   zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\n\nGlobal Spatial Autocorrelation: Moran’s I\nMaron’s I test\n\nmoran.test(hunan$GDPPC, \n           listw=rswm_q, \n           zero.policy = TRUE, \n           na.action=na.omit)\n\n\n    Moran I test under randomisation\n\ndata:  hunan$GDPPC  \nweights: rswm_q    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\nComputing Monte Carlo Moran’s I\n\nset.seed(1234)\nbperm= moran.mc(hunan$GDPPC, \n                listw=rswm_q, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nbperm\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  hunan$GDPPC \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.30075, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\nVisualising Monte Carlo Moran’s I\nCalculating statistics\n\nmean(bperm$res[1:999])\n\n[1] -0.01504572\n\n\n\nvar(bperm$res[1:999])\n\n[1] 0.004371574\n\n\n\nsummary(bperm$res[1:999])\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-0.18339 -0.06168 -0.02125 -0.01505  0.02611  0.27593 \n\n\n\nhist(bperm$res, \n     freq=TRUE, \n     breaks=20, \n     xlab=\"Simulated Moran's I\")\nabline(v=0, \n       col=\"red\") \n\n\n\n\n\n\nGlobal Spatial Autocorrelation: Geary’s\nGeary’s C test\n\ngeary.test(hunan$GDPPC, listw=rswm_q)\n\n\n    Geary C test under randomisation\n\ndata:  hunan$GDPPC \nweights: rswm_q \n\nGeary C statistic standard deviate = 3.6108, p-value = 0.0001526\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n        0.6907223         1.0000000         0.0073364 \n\n\nComputing Monte Carlo Geary’s C\n\nset.seed(1234)\nbperm=geary.mc(hunan$GDPPC, \n               listw=rswm_q, \n               nsim=999)\nbperm\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  hunan$GDPPC \nweights: rswm_q \nnumber of simulations + 1: 1000 \n\nstatistic = 0.69072, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n\n\nVisualising the Monte Carlo Geary’s C\nCalculating statistics\n\nmean(bperm$res[1:999])\n\n[1] 1.004402\n\n\n\nvar(bperm$res[1:999])\n\n[1] 0.007436493\n\n\n\nsummary(bperm$res[1:999])\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.7142  0.9502  1.0052  1.0044  1.0595  1.2722 \n\n\n\nhist(bperm$res, freq=TRUE, breaks=20, xlab=\"Simulated Geary c\")\nabline(v=1, col=\"red\") \n\n\n\n\n\n\nSpatial Correlogram\nCompute Moran’s I correlogram\n\nMI_corr <- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"I\", \n                          style=\"W\")\nplot(MI_corr)\n\n\n\n\nExamining full analysis report\n\nprint(MI_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Moran's I\n         estimate expectation   variance standard deviate Pr(I) two sided    \n1 (88)  0.3007500  -0.0114943  0.0043484           4.7351       2.189e-06 ***\n2 (88)  0.2060084  -0.0114943  0.0020962           4.7505       2.029e-06 ***\n3 (88)  0.0668273  -0.0114943  0.0014602           2.0496        0.040400 *  \n4 (88)  0.0299470  -0.0114943  0.0011717           1.2107        0.226015    \n5 (88) -0.1530471  -0.0114943  0.0012440          -4.0134       5.984e-05 ***\n6 (88) -0.1187070  -0.0114943  0.0016791          -2.6164        0.008886 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nCompute Geary’s C correlogram and plot\n\nGC_corr <- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"C\", \n                          style=\"W\")\nplot(GC_corr)\n\n\n\n\nExamining analysis report\n\nprint(GC_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Geary's C\n        estimate expectation  variance standard deviate Pr(I) two sided    \n1 (88) 0.6907223   1.0000000 0.0073364          -3.6108       0.0003052 ***\n2 (88) 0.7630197   1.0000000 0.0049126          -3.3811       0.0007220 ***\n3 (88) 0.9397299   1.0000000 0.0049005          -0.8610       0.3892612    \n4 (88) 1.0098462   1.0000000 0.0039631           0.1564       0.8757128    \n5 (88) 1.2008204   1.0000000 0.0035568           3.3673       0.0007592 ***\n6 (88) 1.0773386   1.0000000 0.0058042           1.0151       0.3100407    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex07/Hands-On_Ex07B.html",
    "href": "Hands-On_Ex/Hands-On_Ex07/Hands-On_Ex07B.html",
    "title": "Hands-On Exercise 07B",
    "section": "",
    "text": "pacman::p_load(sf, spdep, tmap, tidyverse)\n\nImporting geospatial data - shapefile\n\nhunan <- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\xinyeehow\\IS415-GAA\\Hands-On_Ex\\Hands-On_Ex07\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\nImporting aspatial data - csv\n\nhunan2012 <- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\nPerforming relational join (cleaning up data)\n\nhunan <- left_join(hunan,hunan2012) %>%\n  select(1:4, 7, 15)\n\n\n\n\nequal <- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal interval classification\")\n\nquantile <- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal quantile classification\")\n\ntmap_arrange(equal, \n             quantile, \n             asp=1, \n             ncol=2)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex07/Hands-On_Ex07B.html#global-spatial-autocorrelation",
    "href": "Hands-On_Ex/Hands-On_Ex07/Hands-On_Ex07B.html#global-spatial-autocorrelation",
    "title": "Hands-On Exercise 07B",
    "section": "Global Spatial Autocorrelation",
    "text": "Global Spatial Autocorrelation\nComputing Contiguity Spatial Weights\n\nwm_q <- poly2nb(hunan, \n                queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nRow-standardised weights matrix\n\nrswm_q <- nb2listw(wm_q, \n                   style=\"W\", \n                   zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\n\nGlobal Spatial Autocorrelation: Moran's I\nMaron's I test\n\nmoran.test(hunan$GDPPC, \n           listw=rswm_q, \n           zero.policy = TRUE, \n           na.action=na.omit)\n\n\n    Moran I test under randomisation\n\ndata:  hunan$GDPPC  \nweights: rswm_q    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\nComputing Monte Carlo Moran's I\n\nset.seed(1234)\nbperm= moran.mc(hunan$GDPPC, \n                listw=rswm_q, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nbperm\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  hunan$GDPPC \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.30075, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\nVisualising Monte Carlo Moran's I\nComputing statistical values\n\nmean(bperm$res[1:999])\n\n[1] -0.01504572\n\n\n\nvar(bperm$res[1:999])\n\n[1] 0.004371574\n\n\n\nsummary(bperm$res[1:999])\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-0.18339 -0.06168 -0.02125 -0.01505  0.02611  0.27593 \n\n\n\nhist(bperm$res, \n     freq=TRUE, \n     breaks=20, \n     xlab=\"Simulated Moran's I\")\nabline(v=0, \n       col=\"red\") \n\n\n\n\n\n\nGlobal Spatial Autocorrelation: Geary's\nGeary's C test\n\ngeary.test(hunan$GDPPC, listw=rswm_q)\n\n\n    Geary C test under randomisation\n\ndata:  hunan$GDPPC \nweights: rswm_q \n\nGeary C statistic standard deviate = 3.6108, p-value = 0.0001526\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n        0.6907223         1.0000000         0.0073364 \n\n\nComputing Monte Carlo Geary's C\n\nset.seed(1234)\nbperm=geary.mc(hunan$GDPPC, \n               listw=rswm_q, \n               nsim=999)\nbperm\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  hunan$GDPPC \nweights: rswm_q \nnumber of simulations + 1: 1000 \n\nstatistic = 0.69072, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n\n\nVisualising the Monte Carlo Geary's C\nComputing statistical values\n\nmean(bperm$res[1:999])\n\n[1] 1.004402\n\n\n\nvar(bperm$res[1:999])\n\n[1] 0.007436493\n\n\n\nsummary(bperm$res[1:999])\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.7142  0.9502  1.0052  1.0044  1.0595  1.2722 \n\n\n\nhist(bperm$res, freq=TRUE, breaks=20, xlab=\"Simulated Geary c\")\nabline(v=1, col=\"red\") \n\n\n\n\n\n\nSpatial Correlogram\nCompute Moran's I correlogram\n\nMI_corr <- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"I\", \n                          style=\"W\")\nplot(MI_corr)\n\n\n\n\nAnalysis of results\n\nprint(MI_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Moran's I\n         estimate expectation   variance standard deviate Pr(I) two sided    \n1 (88)  0.3007500  -0.0114943  0.0043484           4.7351       2.189e-06 ***\n2 (88)  0.2060084  -0.0114943  0.0020962           4.7505       2.029e-06 ***\n3 (88)  0.0668273  -0.0114943  0.0014602           2.0496        0.040400 *  \n4 (88)  0.0299470  -0.0114943  0.0011717           1.2107        0.226015    \n5 (88) -0.1530471  -0.0114943  0.0012440          -4.0134       5.984e-05 ***\n6 (88) -0.1187070  -0.0114943  0.0016791          -2.6164        0.008886 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\n\n\nCompute Geary's C correlogram and plot\n\nGC_corr <- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"C\", \n                          style=\"W\")\nplot(GC_corr)\n\n\n\n\nAnalysis of results\n\nprint(GC_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Geary's C\n        estimate expectation  variance standard deviate Pr(I) two sided    \n1 (88) 0.6907223   1.0000000 0.0073364          -3.6108       0.0003052 ***\n2 (88) 0.7630197   1.0000000 0.0049126          -3.3811       0.0007220 ***\n3 (88) 0.9397299   1.0000000 0.0049005          -0.8610       0.3892612    \n4 (88) 1.0098462   1.0000000 0.0039631           0.1564       0.8757128    \n5 (88) 1.2008204   1.0000000 0.0035568           3.3673       0.0007592 ***\n6 (88) 1.0773386   1.0000000 0.0058042           1.0151       0.3100407    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex07/Hands-On_Ex07B.html#cluster-and-outlier-analysis",
    "href": "Hands-On_Ex/Hands-On_Ex07/Hands-On_Ex07B.html#cluster-and-outlier-analysis",
    "title": "Hands-On Exercise 07B",
    "section": "Cluster and Outlier Analysis",
    "text": "Cluster and Outlier Analysis\nComputing local Moran's I\n\nfips <- order(hunan$County)\nlocalMI <- localmoran(hunan$GDPPC, rswm_q)\nhead(localMI)\n\n            Ii          E.Ii       Var.Ii        Z.Ii Pr(z != E(Ii))\n1 -0.001468468 -2.815006e-05 4.723841e-04 -0.06626904      0.9471636\n2  0.025878173 -6.061953e-04 1.016664e-02  0.26266425      0.7928094\n3 -0.011987646 -5.366648e-03 1.133362e-01 -0.01966705      0.9843090\n4  0.001022468 -2.404783e-07 5.105969e-06  0.45259801      0.6508382\n5  0.014814881 -6.829362e-05 1.449949e-03  0.39085814      0.6959021\n6 -0.038793829 -3.860263e-04 6.475559e-03 -0.47728835      0.6331568\n\n\nLocal Moran matrix\n\nprintCoefmat(data.frame(\n  localMI[fips,], \n  row.names=hunan$County[fips]),\n  check.names=FALSE)\n\n                       Ii        E.Ii      Var.Ii        Z.Ii Pr.z....E.Ii..\nAnhua         -2.2493e-02 -5.0048e-03  5.8235e-02 -7.2467e-02         0.9422\nAnren         -3.9932e-01 -7.0111e-03  7.0348e-02 -1.4791e+00         0.1391\nAnxiang       -1.4685e-03 -2.8150e-05  4.7238e-04 -6.6269e-02         0.9472\nBaojing        3.4737e-01 -5.0089e-03  8.3636e-02  1.2185e+00         0.2230\nChaling        2.0559e-02 -9.6812e-04  2.7711e-02  1.2932e-01         0.8971\nChangning     -2.9868e-05 -9.0010e-09  1.5105e-07 -7.6828e-02         0.9388\nChangsha       4.9022e+00 -2.1348e-01  2.3194e+00  3.3590e+00         0.0008\nChengbu        7.3725e-01 -1.0534e-02  2.2132e-01  1.5895e+00         0.1119\nChenxi         1.4544e-01 -2.8156e-03  4.7116e-02  6.8299e-01         0.4946\nCili           7.3176e-02 -1.6747e-03  4.7902e-02  3.4200e-01         0.7324\nDao            2.1420e-01 -2.0824e-03  4.4123e-02  1.0297e+00         0.3032\nDongan         1.5210e-01 -6.3485e-04  1.3471e-02  1.3159e+00         0.1882\nDongkou        5.2918e-01 -6.4461e-03  1.0748e-01  1.6338e+00         0.1023\nFenghuang      1.8013e-01 -6.2832e-03  1.3257e-01  5.1198e-01         0.6087\nGuidong       -5.9160e-01 -1.3086e-02  3.7003e-01 -9.5104e-01         0.3416\nGuiyang        1.8240e-01 -3.6908e-03  3.2610e-02  1.0305e+00         0.3028\nGuzhang        2.8466e-01 -8.5054e-03  1.4152e-01  7.7931e-01         0.4358\nHanshou        2.5878e-02 -6.0620e-04  1.0167e-02  2.6266e-01         0.7928\nHengdong       9.9964e-03 -4.9063e-04  6.7742e-03  1.2742e-01         0.8986\nHengnan        2.8064e-02 -3.2160e-04  3.7597e-03  4.6294e-01         0.6434\nHengshan      -5.8201e-03 -3.0437e-05  5.1076e-04 -2.5618e-01         0.7978\nHengyang       6.2997e-02 -1.3046e-03  2.1865e-02  4.3486e-01         0.6637\nHongjiang      1.8790e-01 -2.3019e-03  3.1725e-02  1.0678e+00         0.2856\nHuarong       -1.5389e-02 -1.8667e-03  8.1030e-02 -4.7503e-02         0.9621\nHuayuan        8.3772e-02 -8.5569e-04  2.4495e-02  5.4072e-01         0.5887\nHuitong        2.5997e-01 -5.2447e-03  1.1077e-01  7.9685e-01         0.4255\nJiahe         -1.2431e-01 -3.0550e-03  5.1111e-02 -5.3633e-01         0.5917\nJianghua       2.8651e-01 -3.8280e-03  8.0968e-02  1.0204e+00         0.3076\nJiangyong      2.4337e-01 -2.7082e-03  1.1746e-01  7.1800e-01         0.4728\nJingzhou       1.8270e-01 -8.5106e-04  2.4363e-02  1.1759e+00         0.2396\nJinshi        -1.1988e-02 -5.3666e-03  1.1334e-01 -1.9667e-02         0.9843\nJishou        -2.8680e-01 -2.6305e-03  4.4028e-02 -1.3543e+00         0.1756\nLanshan        6.3334e-02 -9.6365e-04  2.0441e-02  4.4972e-01         0.6529\nLeiyang        1.1581e-02 -1.4948e-04  2.5082e-03  2.3422e-01         0.8148\nLengshuijiang -1.7903e+00 -8.2129e-02  2.1598e+00 -1.1623e+00         0.2451\nLi             1.0225e-03 -2.4048e-07  5.1060e-06  4.5260e-01         0.6508\nLianyuan      -1.4672e-01 -1.8983e-03  1.9145e-02 -1.0467e+00         0.2952\nLiling         1.3774e+00 -1.5097e-02  4.2601e-01  2.1335e+00         0.0329\nLinli          1.4815e-02 -6.8294e-05  1.4499e-03  3.9086e-01         0.6959\nLinwu         -2.4621e-03 -9.0703e-06  1.9258e-04 -1.7676e-01         0.8597\nLinxiang       6.5904e-02 -2.9028e-03  2.5470e-01  1.3634e-01         0.8916\nLiuyang        3.3688e+00 -7.7502e-02  1.5180e+00  2.7972e+00         0.0052\nLonghui        8.0801e-01 -1.1377e-02  1.5538e-01  2.0787e+00         0.0376\nLongshan       7.5663e-01 -1.1100e-02  3.1449e-01  1.3690e+00         0.1710\nLuxi           1.8177e-01 -2.4855e-03  3.4249e-02  9.9561e-01         0.3194\nMayang         2.1852e-01 -5.8773e-03  9.8049e-02  7.1663e-01         0.4736\nMiluo          1.8704e+00 -1.6927e-02  2.7925e-01  3.5715e+00         0.0004\nNan           -9.5789e-03 -4.9497e-04  6.8341e-03 -1.0988e-01         0.9125\nNingxiang      1.5607e+00 -7.3878e-02  8.0012e-01  1.8274e+00         0.0676\nNingyuan       2.0910e-01 -7.0884e-03  8.2306e-02  7.5356e-01         0.4511\nPingjiang     -9.8964e-01 -2.6457e-03  5.6027e-02 -4.1698e+00         0.0000\nQidong         1.1806e-01 -2.1207e-03  2.4747e-02  7.6396e-01         0.4449\nQiyang         6.1966e-02 -7.3374e-04  8.5743e-03  6.7712e-01         0.4983\nRucheng       -3.6992e-01 -8.8999e-03  2.5272e-01 -7.1814e-01         0.4727\nSangzhi        2.5053e-01 -4.9470e-03  6.8000e-02  9.7972e-01         0.3272\nShaodong      -3.2659e-02 -3.6592e-05  5.0546e-04 -1.4510e+00         0.1468\nShaoshan       2.1223e+00 -5.0227e-02  1.3668e+00  1.8583e+00         0.0631\nShaoyang       5.9499e-01 -1.1253e-02  1.3012e-01  1.6807e+00         0.0928\nShimen        -3.8794e-02 -3.8603e-04  6.4756e-03 -4.7729e-01         0.6332\nShuangfeng     9.2835e-03 -2.2867e-03  3.1516e-02  6.5174e-02         0.9480\nShuangpai      8.0591e-02 -3.1366e-04  8.9838e-03  8.5358e-01         0.3933\nSuining        3.7585e-01 -3.5933e-03  4.1870e-02  1.8544e+00         0.0637\nTaojiang      -2.5394e-01 -1.2395e-03  1.4477e-02 -2.1002e+00         0.0357\nTaoyuan        1.4729e-02 -1.2039e-04  8.5103e-04  5.0903e-01         0.6107\nTongdao        4.6482e-01 -6.9870e-03  1.9879e-01  1.0582e+00         0.2900\nWangcheng      4.4220e+00 -1.1067e-01  1.3596e+00  3.8873e+00         0.0001\nWugang         7.1003e-01 -7.8144e-03  1.0710e-01  2.1935e+00         0.0283\nXiangtan       2.4530e-01 -3.6457e-04  3.2319e-03  4.3213e+00         0.0000\nXiangxiang     2.6271e-01 -1.2703e-03  2.1290e-02  1.8092e+00         0.0704\nXiangyin       5.4525e-01 -4.7442e-03  7.9236e-02  1.9539e+00         0.0507\nXinhua         1.1810e-01 -6.2649e-03  8.6001e-02  4.2409e-01         0.6715\nXinhuang       1.5725e-01 -4.1820e-03  3.6648e-01  2.6667e-01         0.7897\nXinning        6.8928e-01 -9.6674e-03  2.0328e-01  1.5502e+00         0.1211\nXinshao        5.7578e-02 -8.5932e-03  1.1769e-01  1.9289e-01         0.8470\nXintian       -7.4050e-03 -5.1493e-03  1.0877e-01 -6.8395e-03         0.9945\nXupu           3.2406e-01 -5.7468e-03  5.7735e-02  1.3726e+00         0.1699\nYanling       -6.9021e-02 -5.9211e-04  9.9306e-03 -6.8667e-01         0.4923\nYizhang       -2.6844e-01 -2.2463e-03  4.7588e-02 -1.2202e+00         0.2224\nYongshun       6.3064e-01 -1.1350e-02  1.8830e-01  1.4795e+00         0.1390\nYongxing       4.3411e-01 -9.0735e-03  1.5088e-01  1.1409e+00         0.2539\nYou            7.8750e-02 -7.2728e-03  1.2116e-01  2.4714e-01         0.8048\nYuanjiang      2.0004e-04 -1.7760e-04  2.9798e-03  6.9181e-03         0.9945\nYuanling       8.7298e-03 -2.2981e-06  2.3221e-05  1.8121e+00         0.0700\nYueyang        4.1189e-02 -1.9768e-04  2.3113e-03  8.6085e-01         0.3893\nZhijiang       1.0476e-01 -7.8123e-04  1.3100e-02  9.2214e-01         0.3565\nZhongfang     -2.2685e-01 -2.1455e-03  3.5927e-02 -1.1855e+00         0.2358\nZhuzhou        3.2864e-01 -5.2432e-04  7.2391e-03  3.8688e+00         0.0001\nZixing        -7.6849e-01 -8.8210e-02  9.4057e-01 -7.0144e-01         0.4830\n\n\nMapping the local Moran's I\n\nhunan.localMI <- cbind(hunan,localMI) %>%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n\nMapping local Moran's I values\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\",\n          palette = \"RdBu\",\n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nMapping local Moran's I p-values\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nMapping both local Moran's I values and p-values\n\nlocalMI.map <- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\", \n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\npvalue.map <- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex07/Hands-On_Ex07B.html#creating-a-lisa-cluster-map",
    "href": "Hands-On_Ex/Hands-On_Ex07/Hands-On_Ex07B.html#creating-a-lisa-cluster-map",
    "title": "Hands-On Exercise 07B",
    "section": "Creating a LISA Cluster Map",
    "text": "Creating a LISA Cluster Map\nPlotting Moran scatterplot\n\nnci <- moran.plot(hunan$GDPPC, rswm_q,\n                  labels=as.character(hunan$County), \n                  xlab=\"GDPPC 2012\", \n                  ylab=\"Spatially Lag GDPPC 2012\")\n\n\n\n\nPlotting Moran scatterplot with standardised variable\nScaling and converting to vector\n\nhunan$Z.GDPPC <- scale(hunan$GDPPC) %>% \n  as.vector \n\nPlotting graph\n\nnci2 <- moran.plot(hunan$Z.GDPPC, rswm_q,\n                   labels=as.character(hunan$County),\n                   xlab=\"z-GDPPC 2012\", \n                   ylab=\"Spatially Lag z-GDPPC 2012\")\n\n\n\n\n\nPreparing LISA map classes\nPreparing LISA cluster map\n\nquadrant <- vector(mode=\"numeric\",length=nrow(localMI))\n\nDerive the spatially lagged variable of interest (i.e. GDPPC) and center the spatially lagged variable around its mean\n\nhunan$lag_GDPPC <- lag.listw(rswm_q, hunan$GDPPC)\nDV <- hunan$lag_GDPPC - mean(hunan$lag_GDPPC)     \n\nCentering the local Moran's around the mean\n\nLM_I <- localMI[,1] - mean(localMI[,1])    \n\nSetting significance level\n\nsignif <- 0.05\n\nDefining the low-low (1), low-high (2), high-low (3) and high-high (4) categories\n\nquadrant[DV <0 & LM_I>0] <- 1\nquadrant[DV >0 & LM_I<0] <- 2\nquadrant[DV <0 & LM_I<0] <- 3  \nquadrant[DV >0 & LM_I>0] <- 4      \n\nPlace non-significant Moran in the category 0\n\nquadrant[localMI[,5]>signif] <- 0\n\nALTERNATIVE: combining all steps into one chunk\n\nquadrant <- vector(mode=\"numeric\",length=nrow(localMI))\nhunan$lag_GDPPC <- lag.listw(rswm_q, hunan$GDPPC)\nDV <- hunan$lag_GDPPC - mean(hunan$lag_GDPPC)     \nLM_I <- localMI[,1]   \nsignif <- 0.05       \nquadrant[DV <0 & LM_I>0] <- 1\nquadrant[DV >0 & LM_I<0] <- 2\nquadrant[DV <0 & LM_I<0] <- 3  \nquadrant[DV >0 & LM_I>0] <- 4    \nquadrant[localMI[,5]>signif] <- 0\n\n\n\nPlotting LISA map\n\nhunan.localMI$quadrant <- quadrant\ncolors <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\n\n\n\nPlotting both the local Moran's I values map and its corresponding p-values map next to each other\n\ngdppc <- qtm(hunan, \"GDPPC\")\n\nhunan.localMI$quadrant <- quadrant\ncolors <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\nLISAmap <- tm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\ntmap_arrange(gdppc, LISAmap, \n             asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex07/Hands-On_Ex07B.html#hot-spot-and-cold-spot-area-analysis",
    "href": "Hands-On_Ex/Hands-On_Ex07/Hands-On_Ex07B.html#hot-spot-and-cold-spot-area-analysis",
    "title": "Hands-On Exercise 07B",
    "section": "Hot Spot and Cold Spot Area Analysis",
    "text": "Hot Spot and Cold Spot Area Analysis\nDeriving distance-based weight matrix\nDeriving the centroid\n\nlongitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\n\n\nlatitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\n\ncoords <- cbind(longitude, latitude)\n\nDetermining the cut-off distance\n\n#coords <- coordinates(hunan)\nk1 <- knn2nb(knearneigh(coords))\nk1dists <- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nComputing fixed distance weight matrix\n\nwm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\nConverting the nb object into spatial weights object\n\nwm62_lw <- nb2listw(wm_d62, style = 'B')\nsummary(wm62_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \nLink number distribution:\n\n 1  2  3  4  5  6 \n 6 15 14 26 20  7 \n6 least connected regions:\n6 15 30 32 56 65 with 1 link\n7 most connected regions:\n21 28 35 45 50 52 82 with 6 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1   S2\nB 88 7744 324 648 5440\n\n\nComputing adaptive distance weight matrix\n\nknn <- knn2nb(knearneigh(coords, k=8))\nknn\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\n\n\nConverting the nb object into spatial weights object\n\nknn_lw <- nb2listw(knn, style = 'B')\nsummary(knn_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\nLink number distribution:\n\n 8 \n88 \n88 least connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n88 most connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 704 1300 23014"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex07/Hands-On_Ex07B.html#computing-gi-statistics",
    "href": "Hands-On_Ex/Hands-On_Ex07/Hands-On_Ex07B.html#computing-gi-statistics",
    "title": "Hands-On Exercise 07B",
    "section": "Computing Gi statistics",
    "text": "Computing Gi statistics\nGi statistics using fixed distance\n\nfips <- order(hunan$County)\ngi.fixed <- localG(hunan$GDPPC, wm62_lw)\ngi.fixed\n\n [1]  0.436075843 -0.265505650 -0.073033665  0.413017033  0.273070579\n [6] -0.377510776  2.863898821  2.794350420  5.216125401  0.228236603\n[11]  0.951035346 -0.536334231  0.176761556  1.195564020 -0.033020610\n[16]  1.378081093 -0.585756761 -0.419680565  0.258805141  0.012056111\n[21] -0.145716531 -0.027158687 -0.318615290 -0.748946051 -0.961700582\n[26] -0.796851342 -1.033949773 -0.460979158 -0.885240161 -0.266671512\n[31] -0.886168613 -0.855476971 -0.922143185 -1.162328599  0.735582222\n[36] -0.003358489 -0.967459309 -1.259299080 -1.452256513 -1.540671121\n[41] -1.395011407 -1.681505286 -1.314110709 -0.767944457 -0.192889342\n[46]  2.720804542  1.809191360 -1.218469473 -0.511984469 -0.834546363\n[51] -0.908179070 -1.541081516 -1.192199867 -1.075080164 -1.631075961\n[56] -0.743472246  0.418842387  0.832943753 -0.710289083 -0.449718820\n[61] -0.493238743 -1.083386776  0.042979051  0.008596093  0.136337469\n[66]  2.203411744  2.690329952  4.453703219 -0.340842743 -0.129318589\n[71]  0.737806634 -1.246912658  0.666667559  1.088613505 -0.985792573\n[76]  1.233609606 -0.487196415  1.626174042 -1.060416797  0.425361422\n[81] -0.837897118 -0.314565243  0.371456331  4.424392623 -0.109566928\n[86]  1.364597995 -1.029658605 -0.718000620\nattr(,\"cluster\")\n [1] Low  Low  High High High High High High High Low  Low  High Low  Low  Low \n[16] High High High High Low  High High Low  Low  High Low  Low  Low  Low  Low \n[31] Low  Low  Low  High Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low \n[46] High High Low  Low  Low  Low  High Low  Low  Low  Low  Low  High Low  Low \n[61] Low  Low  Low  High High High Low  High Low  Low  High Low  High High Low \n[76] High Low  Low  Low  Low  Low  Low  High High Low  High Low  Low \nLevels: Low High\nattr(,\"gstari\")\n[1] FALSE\nattr(,\"call\")\nlocalG(x = hunan$GDPPC, listw = wm62_lw)\nattr(,\"class\")\n[1] \"localG\"\n\n\nJoining the Gi values to their corresponding hunan sf data frame\n\nhunan.gi <- cbind(hunan, as.matrix(gi.fixed)) %>%\n  rename(gstat_fixed = as.matrix.gi.fixed.)\n\nMapping Gi values with fixed distance weights\n\ngdppc <- qtm(hunan, \"GDPPC\")\n\nGimap <-tm_shape(hunan.gi) +\n  tm_fill(col = \"gstat_fixed\", \n          style = \"pretty\",\n          palette=\"-RdBu\",\n          title = \"local Gi\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, Gimap, asp=1, ncol=2)\n\n\n\n\nGi statistics using adaptive distance\n\nfips <- order(hunan$County)\ngi.adaptive <- localG(hunan$GDPPC, knn_lw)\nhunan.gi <- cbind(hunan, as.matrix(gi.adaptive)) %>%\n  rename(gstat_adaptive = as.matrix.gi.adaptive.)\n\nMapping Gi values with adaptive distance weights\n\ngdppc<- qtm(hunan, \"GDPPC\")\n\nGimap <- tm_shape(hunan.gi) + \n  tm_fill(col = \"gstat_adaptive\", \n          style = \"pretty\", \n          palette=\"-RdBu\", \n          title = \"local Gi\") + \n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, \n             Gimap, \n             asp=1, \n             ncol=2)"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex01/In-Class_Ex01.html",
    "href": "In-Class_Ex/In-Class_Ex01/In-Class_Ex01.html",
    "title": "IS415-GAA",
    "section": "",
    "text": "Hello there"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex02/In-Class_Ex02.html",
    "href": "In-Class_Ex/In-Class_Ex02/In-Class_Ex02.html",
    "title": "In-Class Exercise 02",
    "section": "",
    "text": "pacman::p_load(sf, tidyverse, funModeling)"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex02/In-Class_Ex02.html#importing-geoboundaries-dataset",
    "href": "In-Class_Ex/In-Class_Ex02/In-Class_Ex02.html#importing-geoboundaries-dataset",
    "title": "In-Class Exercise 02",
    "section": "Importing geoBoundaries dataset",
    "text": "Importing geoBoundaries dataset\n\ngeoNGA <- st_read(\"geospatial/geoBoundaries/\", \n                layer = \"geoBoundaries-NGA-ADM2\") %>% st_transform(crs=26392)\n\nReading layer `geoBoundaries-NGA-ADM2' from data source \n  `C:\\xinyeehow\\IS415-GAA\\In-Class_Ex\\In-Class_Ex02\\geospatial\\geoBoundaries' \n  using driver `ESRI Shapefile'\nSimple feature collection with 774 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex02/In-Class_Ex02.html#importing-nga-dataset",
    "href": "In-Class_Ex/In-Class_Ex02/In-Class_Ex02.html#importing-nga-dataset",
    "title": "In-Class Exercise 02",
    "section": "Importing NGA dataset",
    "text": "Importing NGA dataset\n\nNGA <- st_read(\"geospatial/\", \n                layer = \"nga_admbnda_adm2_osgof_20190417\") %>% st_transform(crs=26392)\n\nReading layer `nga_admbnda_adm2_osgof_20190417' from data source \n  `C:\\xinyeehow\\IS415-GAA\\In-Class_Ex\\In-Class_Ex02\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 774 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex02/In-Class_Ex02.html#importing-aspatial-data",
    "href": "In-Class_Ex/In-Class_Ex02/In-Class_Ex02.html#importing-aspatial-data",
    "title": "In-Class Exercise 02",
    "section": "Importing aspatial data",
    "text": "Importing aspatial data\n\nwp_nga <- read_csv(\"data/aspatial/WPdx.csv\") %>%\n  filter(`#clean_country_name` == \"Nigeria\")\n\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat <- vroom(...)\n  problems(dat)\n\n\nRows: 406566 Columns: 70\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (43): #source, #report_date, #status_id, #water_source_clean, #water_sou...\ndbl (23): row_id, #lat_deg, #lon_deg, #install_year, #fecal_coliform_value, ...\nlgl  (4): #rehab_year, #rehabilitator, is_urban, latest_record\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex02/In-Class_Ex02.html#converting-aspatial-data-into-geospatial",
    "href": "In-Class_Ex/In-Class_Ex02/In-Class_Ex02.html#converting-aspatial-data-into-geospatial",
    "title": "In-Class Exercise 02",
    "section": "Converting Aspatial Data into Geospatial",
    "text": "Converting Aspatial Data into Geospatial\n\nwp_nga$Geometry = st_as_sfc(wp_nga$`New Georeferenced Column`)\nwp_nga\n\n# A tibble: 95,008 × 71\n   row_id `#source`      #lat_…¹ #lon_…² #repo…³ #stat…⁴ #wate…⁵ #wate…⁶ #wate…⁷\n    <dbl> <chr>            <dbl>   <dbl> <chr>   <chr>   <chr>   <chr>   <chr>  \n 1 429068 GRID3             7.98    5.12 08/29/… Unknown <NA>    <NA>    Tapsta…\n 2 222071 Federal Minis…    6.96    3.60 08/16/… Yes     Boreho… Well    Mechan…\n 3 160612 WaterAid          6.49    7.93 12/04/… Yes     Boreho… Well    Hand P…\n 4 160669 WaterAid          6.73    7.65 12/04/… Yes     Boreho… Well    <NA>   \n 5 160642 WaterAid          6.78    7.66 12/04/… Yes     Boreho… Well    Hand P…\n 6 160628 WaterAid          6.96    7.78 12/04/… Yes     Boreho… Well    Hand P…\n 7 160632 WaterAid          7.02    7.84 12/04/… Yes     Boreho… Well    Hand P…\n 8 642747 Living Water …    7.33    8.98 10/03/… Yes     Boreho… Well    Mechan…\n 9 642456 Living Water …    7.17    9.11 10/03/… Yes     Boreho… Well    Hand P…\n10 641347 Living Water …    7.20    9.22 03/28/… Yes     Boreho… Well    Hand P…\n# … with 94,998 more rows, 62 more variables: `#water_tech_category` <chr>,\n#   `#facility_type` <chr>, `#clean_country_name` <chr>, `#clean_adm1` <chr>,\n#   `#clean_adm2` <chr>, `#clean_adm3` <chr>, `#clean_adm4` <chr>,\n#   `#install_year` <dbl>, `#installer` <chr>, `#rehab_year` <lgl>,\n#   `#rehabilitator` <lgl>, `#management_clean` <chr>, `#status_clean` <chr>,\n#   `#pay` <chr>, `#fecal_coliform_presence` <chr>,\n#   `#fecal_coliform_value` <dbl>, `#subjective_quality` <chr>, …\n\nwp_sf <- st_sf(wp_nga, crs=4326)\nwp_sf\n\nSimple feature collection with 95008 features and 70 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 2.707441 ymin: 4.301812 xmax: 14.21828 ymax: 13.86568\nGeodetic CRS:  WGS 84\n# A tibble: 95,008 × 71\n   row_id `#source`      #lat_…¹ #lon_…² #repo…³ #stat…⁴ #wate…⁵ #wate…⁶ #wate…⁷\n *  <dbl> <chr>            <dbl>   <dbl> <chr>   <chr>   <chr>   <chr>   <chr>  \n 1 429068 GRID3             7.98    5.12 08/29/… Unknown <NA>    <NA>    Tapsta…\n 2 222071 Federal Minis…    6.96    3.60 08/16/… Yes     Boreho… Well    Mechan…\n 3 160612 WaterAid          6.49    7.93 12/04/… Yes     Boreho… Well    Hand P…\n 4 160669 WaterAid          6.73    7.65 12/04/… Yes     Boreho… Well    <NA>   \n 5 160642 WaterAid          6.78    7.66 12/04/… Yes     Boreho… Well    Hand P…\n 6 160628 WaterAid          6.96    7.78 12/04/… Yes     Boreho… Well    Hand P…\n 7 160632 WaterAid          7.02    7.84 12/04/… Yes     Boreho… Well    Hand P…\n 8 642747 Living Water …    7.33    8.98 10/03/… Yes     Boreho… Well    Mechan…\n 9 642456 Living Water …    7.17    9.11 10/03/… Yes     Boreho… Well    Hand P…\n10 641347 Living Water …    7.20    9.22 03/28/… Yes     Boreho… Well    Hand P…\n# … with 94,998 more rows, 62 more variables: `#water_tech_category` <chr>,\n#   `#facility_type` <chr>, `#clean_country_name` <chr>, `#clean_adm1` <chr>,\n#   `#clean_adm2` <chr>, `#clean_adm3` <chr>, `#clean_adm4` <chr>,\n#   `#install_year` <dbl>, `#installer` <chr>, `#rehab_year` <lgl>,\n#   `#rehabilitator` <lgl>, `#management_clean` <chr>, `#status_clean` <chr>,\n#   `#pay` <chr>, `#fecal_coliform_presence` <chr>,\n#   `#fecal_coliform_value` <dbl>, `#subjective_quality` <chr>, …"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex02/In-Class_Ex02.html#projection-transformation",
    "href": "In-Class_Ex/In-Class_Ex02/In-Class_Ex02.html#projection-transformation",
    "title": "In-Class Exercise 02",
    "section": "Projection Transformation",
    "text": "Projection Transformation\n\nwp_sf <- wp_sf %>%\n  st_transform(crs = 26392)"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex02/In-Class_Ex02.html#geospatial-data-cleaning",
    "href": "In-Class_Ex/In-Class_Ex02/In-Class_Ex02.html#geospatial-data-cleaning",
    "title": "In-Class Exercise 02",
    "section": "Geospatial Data Cleaning",
    "text": "Geospatial Data Cleaning\nExcluding redundant fields\n\nNGA <- NGA %>%\n  select(c(3:4,8:9))\n\nChecking for duplicate name\n\nNGA$ADM2_EN[duplicated(NGA$ADM2_EN)==TRUE]\n\n[1] \"Bassa\"    \"Ifelodun\" \"Irepodun\" \"Nasarawa\" \"Obi\"      \"Surulere\"\n\n\n\nNGA$ADM2_EN[94] <- \"Bassa, Kogi\"\nNGA$ADM2_EN[95] <- \"Bassa, Plateau\"\nNGA$ADM2_EN[304] <- \"Ifelodun, Kwara\"\nNGA$ADM2_EN[305] <- \"Ifelodun, Osun\"\nNGA$ADM2_EN[355] <- \"Irepodun, Kwara\"\nNGA$ADM2_EN[356] <- \"Irepodun, Osun\"\nNGA$ADM2_EN[519] <- \"Nasarawa, Kano\"\nNGA$ADM2_EN[520] <- \"Nasarawa, Nasarawa\"\nNGA$ADM2_EN[546] <- \"Obi, Benue\"\nNGA$ADM2_EN[547] <- \"Obi, Nasarawa\"\nNGA$ADM2_EN[693] <- \"Surulere, Lagos\"\nNGA$ADM2_EN[694] <- \"Surulere, Oyo\"\n\n\nfreq(data=wp_sf,\n     input = \"#status_clean\")\n\nWarning: `guides(<scale> = FALSE)` is deprecated. Please use `guides(<scale> =\n\"none\")` instead.\n\n\n\n\n\n                     #status_clean frequency percentage cumulative_perc\n1                       Functional     45883      48.29           48.29\n2                   Non-Functional     29385      30.93           79.22\n3                             <NA>     10656      11.22           90.44\n4      Functional but needs repair      4579       4.82           95.26\n5 Non-Functional due to dry season      2403       2.53           97.79\n6        Functional but not in use      1686       1.77           99.56\n7         Abandoned/Decommissioned       234       0.25           99.81\n8                        Abandoned       175       0.18           99.99\n9 Non functional due to dry season         7       0.01          100.00\n\n\n\nwp_sf_nga <- wp_sf %>%\n  rename (status_clean = '#status_clean') %>%\n  select (status_clean) %>%\n  mutate(status_clean = replace_na(\n    status_clean, \"unknown\"))\n\nExtract functional water point\n\nwp_functional <- wp_sf_nga %>% \n  filter(status_clean %in%\n    c(\"Functional\",\n      \"Functional but not in use\",\n      \"Functional but needs repair\"))\n\nExtract nonfunctional water point\n\nwp_nonfunctional <- wp_sf_nga %>% \n  filter(status_clean %in%\n          c(\"Abandoned/Decommissioned\",\n            \"Abandoned\",\n            \"Non-Functional due to dry season\",\n            \"Non-Functional\",\n            \"Non functional due to dry season\"))\n\nExtract unknown water points\n\nwp_unknown <- wp_sf_nga %>%\n  filter(status_clean == \"unknown\")\n\nGeoprocess - Intersect\n\nNGA_wp <- NGA %>%\n  mutate(`total_wp` = lengths (\n    st_intersects(NGA, wp_sf_nga))) %>%\n  mutate (`wp_functional` = lengths(\n    st_intersects(NGA, wp_functional))) %>%\n  mutate (`wp_nonfunctional` = lengths(\n    st_intersects (NGA, wp_nonfunctional))) %>%\n  mutate(`wp_unknown` = lengths(\n    st_intersects(NGA, wp_unknown)))\n\nSaving analytical data in rds format\n\n#write_rds(NGA_wp,\"data/rds/NGA_wp.rds\")\nsaveRDS(wp_nga, file = \"rds/NGA_wp.RDS\")"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex02/In-Class_Ex02.html#plotting-bar-graph",
    "href": "In-Class_Ex/In-Class_Ex02/In-Class_Ex02.html#plotting-bar-graph",
    "title": "In-Class Exercise 02",
    "section": "Plotting bar graph",
    "text": "Plotting bar graph\n\nggplot(data = NGA_wp,\n       aes(x = total_wp)) + \n  geom_histogram(bins=20,\n                 color=\"black\",\n                 fill=\"light blue\") +\n  geom_vline(aes(xintercept=mean(\n    total_wp, na.rm=T)),\n    color=\"red\",\n    linetype=\"dashed\", size=0.8) +\n  ggtitle(\"Distribution of total water points by LGA\") +\n  xlab(\"No. of water points\") + \n  ylab(\"No. of\\nLGAs\") +\n  theme(axis.title.y=element_text(angle = 0))"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex03/In-Class_Ex03.html",
    "href": "In-Class_Ex/In-Class_Ex03/In-Class_Ex03.html",
    "title": "In-Class Exercise 03",
    "section": "",
    "text": "Chloropleth Mapping"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex03/In-Class_Ex03.html#plotting-map-of-rate",
    "href": "In-Class_Ex/In-Class_Ex03/In-Class_Ex03.html#plotting-map-of-rate",
    "title": "In-Class Exercise 03",
    "section": "Plotting map of rate",
    "text": "Plotting map of rate\n\np1 <- tm_shape(NGA_wp) + \n  tm_fill(\"wp_functional\",\n          n = 10,\n          style = \"equal\",\n          palette = \"Blues\") +\n  tm_borders(lwd = 0.1,\n             alpha = 1) +\n  tm_layout(main.title = \"Distribution of functional water points of LGAs\",\n            legend.outside = FALSE)\n\n\ntmap_arrange(p1, nrow = 1)"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex03/In-Class_Ex03.html#rate-map-of-functional-water-point-by-lgas",
    "href": "In-Class_Ex/In-Class_Ex03/In-Class_Ex03.html#rate-map-of-functional-water-point-by-lgas",
    "title": "In-Class Exercise 03",
    "section": "Rate map of functional water point by LGAs",
    "text": "Rate map of functional water point by LGAs\n\nNGA_wp <- NGA_wp %>%\n  mutate(pct_functional = wp_functional/total_wp) %>%\n  mutate(pct_nonfunctional = wp_nonfunctional/total_wp)\n\n\ntm_shape(NGA_wp) + \n  tm_fill(\"pct_functional\",\n          n = 10,\n          style = \"equal\",\n          palette = \"Reds\") +\n  tm_borders(lwd = 0.1,\n              alpha = 1) +\n  tm_layout(main.title = \"Rate map of functional water points\",\n            legend.outside = TRUE)"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex03/In-Class_Ex03.html#extreme-value-map",
    "href": "In-Class_Ex/In-Class_Ex03/In-Class_Ex03.html#extreme-value-map",
    "title": "In-Class Exercise 03",
    "section": "Extreme Value Map",
    "text": "Extreme Value Map\nPercentile Map\nExclude records with NA\n\nNGA_wp <- NGA_wp %>%\n  drop_na()\n\nCreating customised classification and extracting values\n\n#percent <- c(0,.01,.1,.5,.9,.99,1)\n#var <- NGA_wp['pct_functional'] %>%\n  #st_set_geometry(NULL)\n#quantile(var[,1],percent)\n\n\nget.var <- function (vname, df) { \n  v <- df[vname] %>%\n    st_set_geometry(NULL)\n  v <- unname (v[,1])\n  return(v)\n}\n\n\npercentmap <- function(vnam, df, legtitle=NA, mtitle=\"Percentile Map\"){\n  percent <- c(0,.01,.1,.5,.9,.99,1) \n  var <- get.var(vnam, df) \n  bperc <- quantile(var, percent) \n  tm_shape(df) + \n  tm_polygons() + \n  tm_shape(df) + \n    tm_fill(vnam,\n            title=legtitle, \n            breaks=bperc, \n            palette=\"Blues\",\n            labels= c(\"< 1%\", \"1% - 10%\", \"10% - 50%\", \"50% - 90%\", \"90%\", \"90% - 99%\", \"> 99%\"))\n  tm_borders() +\n  tm_layout(main.title = mtitle,\n            title.position = c(\"right\", \"bottom\"))\n  }\n\n\n#percentmap(\"wp_functional\",NGA_wp)"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex03/In-Class_Ex03.html#box-map",
    "href": "In-Class_Ex/In-Class_Ex03/In-Class_Ex03.html#box-map",
    "title": "In-Class Exercise 03",
    "section": "Box map",
    "text": "Box map\n\nggplot(data = NGA_wp,\n       aes(x = \"\",\n           y = wp_nonfunctional)) +\n  geom_boxplot()"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04.html",
    "href": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04.html",
    "title": "In-Class Exercise 04",
    "section": "",
    "text": "pacman::p_load(maptools, sf, raster, spatstat, tmap)"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04.html#importing-the-spatial-data",
    "href": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04.html#importing-the-spatial-data",
    "title": "In-Class Exercise 04",
    "section": "Importing the spatial data",
    "text": "Importing the spatial data\n\nchildcare_sf <- st_read(\"data/child-care-services-geojson.geojson\") %>%\n  st_transform(crs = 3414)\n\nReading layer `child-care-services-geojson' from data source \n  `C:\\xinyeehow\\IS415-GAA\\In-Class_Ex\\In-Class_Ex04\\data\\child-care-services-geojson.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 1545 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.248403 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\nFor shapefile –> have to define the destination (dsn)\nSVY21 usually have big numbers (in metres)\nSpatstat only can read ppp\nso if using sf packages you have to convert spatial dataframe –> generic dataframe --> ppp format (only have coordinate values/no projection headers)\n\nsg_sf <- st_read(dsn = \"data\", layer=\"CostalOutline\")\n\nReading layer `CostalOutline' from data source \n  `C:\\xinyeehow\\IS415-GAA\\In-Class_Ex\\In-Class_Ex04\\data' using driver `ESRI Shapefile'\nSimple feature collection with 60 features and 4 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 2663.926 ymin: 16357.98 xmax: 56047.79 ymax: 50244.03\nProjected CRS: SVY21\n\n\n\nmpsz_sf <- st_read(dsn = \"data\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\xinyeehow\\IS415-GAA\\In-Class_Ex\\In-Class_Ex04\\data' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\nchildcare <- as_Spatial(childcare_sf)\nmpsz <- as_Spatial(mpsz_sf)\nsg <- as_Spatial(sg_sf)"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04.html#converting-the-spatial-class-into-generic-sp-format",
    "href": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04.html#converting-the-spatial-class-into-generic-sp-format",
    "title": "In-Class Exercise 04",
    "section": "Converting the Spatial class into generic sp format",
    "text": "Converting the Spatial class into generic sp format\n\nchildcare_sp <- as(childcare, \"SpatialPoints\")\nsg_sp <- as(sg, \"SpatialPolygons\")"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04.html#converting-the-generic-sp-format-into-spatstats-ppp-format",
    "href": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04.html#converting-the-generic-sp-format-into-spatstats-ppp-format",
    "title": "In-Class Exercise 04",
    "section": "Converting the generic sp format into spatstat’s ppp format",
    "text": "Converting the generic sp format into spatstat’s ppp format\n\nchildcare_ppp <- as(childcare_sp, \"ppp\")\nchildcare_ppp\n\nPlanar point pattern: 1545 points\nwindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex05/data/stores.html",
    "href": "In-Class_Ex/In-Class_Ex05/data/stores.html",
    "title": "IS415-GAA",
    "section": "",
    "text": "<!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’>     \n\n\n        0 0     false"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex05/data/study_area.html",
    "href": "In-Class_Ex/In-Class_Ex05/data/study_area.html",
    "title": "IS415-GAA",
    "section": "",
    "text": "<!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’>     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex05/In-Class_Ex05.html",
    "href": "In-Class_Ex/In-Class_Ex05/In-Class_Ex05.html",
    "title": "In-Class Ex05",
    "section": "",
    "text": "sfdep - working with simple features. point pattern analysis\nonly focus on local CLq\n\n\npacman::p_load(tidyverse, sf, tmap, sfdep)\n\n\n\n\nstudyArea <- st_read(dsn = \"data\",\n                     layer = \"study_area\") %>% \n  st_transform(crs= 3829)\n\nReading layer `study_area' from data source \n  `C:\\xinyeehow\\IS415-GAA\\In-Class_Ex\\In-Class_Ex05\\data' using driver `ESRI Shapefile'\nSimple feature collection with 7 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 121.4836 ymin: 25.00776 xmax: 121.592 ymax: 25.09288\nGeodetic CRS:  TWD97\n\n\n\nstore <- st_read(dsn = \"data\",\n                     layer = \"stores\") %>% \n  st_transform(crs= 3829)\n\nReading layer `stores' from data source \n  `C:\\xinyeehow\\IS415-GAA\\In-Class_Ex\\In-Class_Ex05\\data' using driver `ESRI Shapefile'\nSimple feature collection with 1409 features and 4 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 121.4902 ymin: 25.01257 xmax: 121.5874 ymax: 25.08557\nGeodetic CRS:  TWD97"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex05/In-Class_Ex05.html#visualizing-sf-layer",
    "href": "In-Class_Ex/In-Class_Ex05/In-Class_Ex05.html#visualizing-sf-layer",
    "title": "In-Class Ex05",
    "section": "Visualizing sf layer",
    "text": "Visualizing sf layer\ntm_polygon must be on top with the dots coming next\n\ntmap_mode(\"view\") \ntm_shape(studyArea) + \n  tm_polygons() +\ntm_shape(store)+ \n  tm_dots(col = \"Name\", \n          size = 0.01,\n          border.col = \"black\", \n          border.lwd = 0.5) +\n  tm_view(set.zoom.limits = c(12,16))"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex05/In-Class_Ex05.html#local-colocation-quotient",
    "href": "In-Class_Ex/In-Class_Ex05/In-Class_Ex05.html#local-colocation-quotient",
    "title": "In-Class Ex05",
    "section": "Local Colocation Quotient",
    "text": "Local Colocation Quotient\nnumber 6 = 6 neighbors (always go for even number)\n\nnb <- include_self(\n  st_knn(st_geometry(store), 6)\n)\n\n\nwt <- st_kernel_weights(nb, \n                        store, \n                        \"gaussian\", \n                        adaptive = TRUE)\n\n\nFamilyMart <- store %>% \n  filter(Name == \"Family Mart\")\nA <- FamilyMart$Name\n\n\nSevenEleven <- store %>% \n  filter(Name == \"7-Eleven\")\nB <- SevenEleven$Name\n\n\nLCLQ <-local_colocation(A,B,nb,wt,49)\n\nCombining both dataframes together. Can’t use relational join because no unique id\nUsing LCLQ join to store\n\nLCLQ_stores<-cbind(store, LCLQ)\n\n\ntmap_mode(\"view\") \ntm_shape(studyArea) +   \n  tm_polygons() + \ntm_shape(LCLQ_stores) +   \n  tm_dots(col = \"X7.Eleven\",           \n          size = 0.1,           \n          border.col = \"black\",           \n          border.lwd = 0.5) + \n  tm_dots(col = \"X7.Eleven\",           \n        size = 0.1,           \n        border.col = \"black\",           \n        border.lwd = 0.5) +\ntm_view(set.zoom.limits = c(12,16))"
  },
  {
    "objectID": "In-Class_Ex/In-class_Ex06/In-class_Ex06.html",
    "href": "In-Class_Ex/In-class_Ex06/In-class_Ex06.html",
    "title": "In-Class Exercise 06",
    "section": "",
    "text": "pacman::p_load(tidyverse, tmap, sf, spdep, sfdep) \n\nImporting geospatial data\n\nhunan <- st_read(\"data/geospatial/\",\n                  layer = \"Hunan\") %>%\n  st_transform(crs = 26392)\n\nReading layer `Hunan' from data source \n  `C:\\xinyeehow\\IS415-GAA\\In-Class_Ex\\In-class_Ex06\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\nImporting aspatial data\n\nhunan2012 <- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\nCombining Hunan sf dataframe and Hunan_2012 dataframe\nIf want to retain the geometry, have to join the left side of the data frame\n\nhunan_GDPPC <- left_join(hunan,hunan2012)%>% #will auto join by a matching column\n  select(1:4, 7, 15) #selecting columns to retain\n\n\n\n\ntmap_mode(\"plot\") #static map, if want interactive->tmap_mode(\"view\")\ntm_shape(hunan_GDPPC)+\n  tm_fill(\"GDPPC\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"GDP Per Capita\") +\n  tm_layout(main.title = \"Distribution of GDP per capita in Hunan\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2)"
  },
  {
    "objectID": "In-Class_Ex/In-class_Ex06/In-class_Ex06.html#identify-area-neighbours",
    "href": "In-Class_Ex/In-class_Ex06/In-class_Ex06.html#identify-area-neighbours",
    "title": "In-Class Exercise 06",
    "section": "Identify area neighbours",
    "text": "Identify area neighbours\nCalculate contiguity neighbours\n\ncn_queen <- hunan_GDPPC %>%\n  mutate(nb= st_contiguity(geometry),\n        .before = 1)\n\nContiguity neighbour list using Rook’s method\n\ncn_rook <- hunan_GDPPC %>%\n  mutate(nb = st_contiguity(geometry),\n         queen = FALSE,\n         .before = 1)\n\n\nComputing contiguity weights\nQueen’s method - combining weights\n\nwm_q <- hunan_GDPPC %>%\n  mutate(nb = st_contiguity(geometry),\n         wt = st_weights(nb),\n         .before = 1)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "IS415-Geospatial Analytics and Applications",
    "section": "",
    "text": "To view all my work, please navigate using the pink navigation bar above."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html",
    "title": "Take-Home Exercise 01",
    "section": "",
    "text": "Getting packages\n\npacman::p_load(sf, tidyverse, funModeling, ggplot2)\n\nImporting data - Geospatial\n\ngeoNGA <- st_read(\"data/geoBoundaries/\",\n                  layer = \"geoBoundaries-NGA-ADM2\") %>%\n  st_transform(crs = 26392)\n\nReading layer `geoBoundaries-NGA-ADM2' from data source \n  `C:\\xinyeehow\\IS415-GAA\\Take-Home_Ex\\Take-Home_Ex01\\data\\geoBoundaries' \n  using driver `ESRI Shapefile'\nSimple feature collection with 774 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84\n\n\n\nNGA <- st_read(\"data/\",\n               layer = \"nga_admbnda_adm2_osgof_20190417\") %>%\n  st_transform(crs = 26392)\n\nReading layer `nga_admbnda_adm2_osgof_20190417' from data source \n  `C:\\xinyeehow\\IS415-GAA\\Take-Home_Ex\\Take-Home_Ex01\\data' using driver `ESRI Shapefile'\nSimple feature collection with 774 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84\n\n\nExtract Osun state from Nigeria\n\nosun <- st_read(dsn = \"data/\", \n               layer = \"nga_admbnda_adm2_osgof_20190417\") %>%\n      filter(`ADM1_EN` == \"Osun\") %>%\n      st_transform(crs = 26392)\n\nReading layer `nga_admbnda_adm2_osgof_20190417' from data source \n  `C:\\xinyeehow\\IS415-GAA\\Take-Home_Ex\\Take-Home_Ex01\\data' using driver `ESRI Shapefile'\nSimple feature collection with 774 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84\n\n\nExamining Osun layer\n\nosun\n\nSimple feature collection with 30 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 176503.2 ymin: 331434.7 xmax: 291043.8 ymax: 454520.1\nProjected CRS: Minna / Nigeria Mid Belt\nFirst 10 features:\n   Shape_Leng  Shape_Area        ADM2_EN ADM2_PCODE       ADM2_REF ADM2ALT1EN\n1   1.7951405 0.062436080       Aiyedade   NG030001       Aiyedade       <NA>\n2   0.7101503 0.024818478       Aiyedire   NG030002       Aiyedire       <NA>\n3   0.9199564 0.038002894 Atakumosa East   NG030003 Atakumosa East       <NA>\n4   0.8502782 0.030445804 Atakumosa West   NG030004 Atakumosa West       <NA>\n5   0.5212768 0.012213340     Boluwaduro   NG030005     Boluwaduro       <NA>\n6   0.6088930 0.011827501         Boripe   NG030006         Boripe       <NA>\n7   0.4714403 0.008343638      Ede North   NG030007      Ede North       <NA>\n8   0.5660235 0.017623677      Ede South   NG030008      Ede South       <NA>\n9   0.8273123 0.022026327       Egbedore   NG030009       Egbedore       <NA>\n10  1.1304849 0.029791275         Ejigbo   NG030010         Ejigbo       <NA>\n   ADM2ALT2EN ADM1_EN ADM1_PCODE ADM0_EN ADM0_PCODE       date    validOn\n1        <NA>    Osun      NG030 Nigeria         NG 2016-11-29 2019-04-17\n2        <NA>    Osun      NG030 Nigeria         NG 2016-11-29 2019-04-17\n3        <NA>    Osun      NG030 Nigeria         NG 2016-11-29 2019-04-17\n4        <NA>    Osun      NG030 Nigeria         NG 2016-11-29 2019-04-17\n5        <NA>    Osun      NG030 Nigeria         NG 2016-11-29 2019-04-17\n6        <NA>    Osun      NG030 Nigeria         NG 2016-11-29 2019-04-17\n7        <NA>    Osun      NG030 Nigeria         NG 2016-11-29 2019-04-17\n8        <NA>    Osun      NG030 Nigeria         NG 2016-11-29 2019-04-17\n9        <NA>    Osun      NG030 Nigeria         NG 2016-11-29 2019-04-17\n10       <NA>    Osun      NG030 Nigeria         NG 2016-11-29 2019-04-17\n   validTo        SD_EN SD_PCODE                       geometry\n1     <NA>    Osun West  NG03003 MULTIPOLYGON (((213526.6 34...\n2     <NA>    Osun West  NG03003 MULTIPOLYGON (((212542.6 40...\n3     <NA>    Osun East  NG03002 MULTIPOLYGON (((265746.8 37...\n4     <NA>    Osun East  NG03002 MULTIPOLYGON (((248871.4 40...\n5     <NA> Osun Central  NG03001 MULTIPOLYGON (((266092.2 43...\n6     <NA> Osun Central  NG03001 MULTIPOLYGON (((255072.5 43...\n7     <NA>    Osun West  NG03003 MULTIPOLYGON (((236386.9 41...\n8     <NA>    Osun West  NG03003 MULTIPOLYGON (((236386.9 41...\n9     <NA>    Osun West  NG03003 MULTIPOLYGON (((220756 4317...\n10    <NA>    Osun West  NG03003 MULTIPOLYGON (((214422.1 42...\n\n\nImporting data - Aspatial\n\nwp_nga <- read_csv(\"data/WPdx.csv\") %>%\n  filter(`#clean_country_name` == \"Nigeria\", `#clean_adm1` == \"Osun\")\n\nExamining the filtered waterpoint layer\n\nglimpse(wp_nga)\n\nRows: 5,557\nColumns: 70\n$ row_id                        <dbl> 429123, 70566, 70578, 66401, 422190, 422…\n$ `#source`                     <chr> \"GRID3\", \"Federal Ministry of Water Reso…\n$ `#lat_deg`                    <dbl> 8.020000, 7.317741, 7.759448, 8.031187, …\n$ `#lon_deg`                    <dbl> 5.060000, 4.785507, 4.563998, 4.637400, …\n$ `#report_date`                <chr> \"08/29/2018 12:00:00 AM\", \"05/11/2015 12…\n$ `#status_id`                  <chr> \"Unknown\", \"No\", \"No\", \"No\", \"Unknown\", …\n$ `#water_source_clean`         <chr> NA, \"Protected Shallow Well\", \"Borehole\"…\n$ `#water_source_category`      <chr> NA, \"Well\", \"Well\", \"Well\", NA, NA, \"Wel…\n$ `#water_tech_clean`           <chr> \"Tapstand\", \"Mechanized Pump\", \"Mechaniz…\n$ `#water_tech_category`        <chr> \"Tapstand\", \"Mechanized Pump\", \"Mechaniz…\n$ `#facility_type`              <chr> \"Improved\", \"Improved\", \"Improved\", \"Imp…\n$ `#clean_country_name`         <chr> \"Nigeria\", \"Nigeria\", \"Nigeria\", \"Nigeri…\n$ `#clean_adm1`                 <chr> \"Osun\", \"Osun\", \"Osun\", \"Osun\", \"Osun\", …\n$ `#clean_adm2`                 <chr> \"Ifedayo\", \"Atakumosa East\", \"Osogbo\", \"…\n$ `#clean_adm3`                 <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ `#clean_adm4`                 <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ `#install_year`               <dbl> NA, NA, NA, 2004, NA, NA, 2006, 2014, 20…\n$ `#installer`                  <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ `#rehab_year`                 <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ `#rehabilitator`              <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ `#management_clean`           <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, \"Com…\n$ `#status_clean`               <chr> NA, \"Abandoned/Decommissioned\", \"Abandon…\n$ `#pay`                        <chr> NA, \"No\", \"No\", \"No\", NA, NA, \"No\", \"No\"…\n$ `#fecal_coliform_presence`    <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ `#fecal_coliform_value`       <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ `#subjective_quality`         <chr> NA, \"Acceptable quality\", \"Acceptable qu…\n$ `#activity_id`                <chr> \"6054e946-2573-45bf-ab7c-0ddaa68a61b4\", …\n$ `#scheme_id`                  <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ `#wpdx_id`                    <chr> \"6FW723C6+222\", \"6FV68Q9P+36R\", \"6FV6QH5…\n$ `#notes`                      <chr> \"Rt Hon Kola Oluwawole Water Tap\", \"Temi…\n$ `#orig_lnk`                   <chr> \"https://nigeria.africageoportal.com/dat…\n$ `#photo_lnk`                  <chr> NA, \"https://akvoflow-55.s3.amazonaws.co…\n$ `#country_id`                 <chr> \"NG\", \"NG\", \"NG\", \"NG\", \"NG\", \"NG\", \"NG\"…\n$ `#data_lnk`                   <chr> \"https://catalog.waterpointdata.org/data…\n$ `#distance_to_primary_road`   <dbl> 4474.22234, 10130.42742, 167.82235, 4133…\n$ `#distance_to_secondary_road` <dbl> 1883.98780, 17466.35720, 838.91849, 1162…\n$ `#distance_to_tertiary_road`  <dbl> 1885.874322, 2376.832183, 1181.107236, 9…\n$ `#distance_to_city`           <dbl> 40100.268, 31549.222, 2449.293, 16704.19…\n$ `#distance_to_town`           <dbl> 8120.871, 24652.907, 9463.295, 5176.899,…\n$ water_point_history           <chr> \"{\\\"2018-08-29\\\": {\\\"source\\\": \\\"GRID3\\\"…\n$ rehab_priority                <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ water_point_population        <dbl> NA, NA, NA, NA, NA, NA, NA, NA, 0, 508, …\n$ local_population_1km          <dbl> NA, NA, NA, NA, NA, NA, NA, NA, 70, 647,…\n$ crucialness_score             <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, 0.78…\n$ pressure_score                <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, 1.69…\n$ usage_capacity                <dbl> 250, 1000, 1000, 1000, 250, 250, 1000, 3…\n$ is_urban                      <lgl> FALSE, FALSE, TRUE, FALSE, FALSE, FALSE,…\n$ days_since_report             <dbl> 1483, 2689, 2689, 2700, 1483, 1483, 2688…\n$ staleness_score               <dbl> 62.65911, 42.84384, 42.84384, 42.69554, …\n$ latest_record                 <lgl> TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE…\n$ location_id                   <dbl> 358783, 239555, 239556, 230405, 358062, …\n$ cluster_size                  <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ `#clean_country_id`           <chr> \"NGA\", \"NGA\", \"NGA\", \"NGA\", \"NGA\", \"NGA\"…\n$ `#country_name`               <chr> \"Nigeria\", \"Nigeria\", \"Nigeria\", \"Nigeri…\n$ `#water_source`               <chr> \"Tap\", \"Improved Protected dug well\", \"I…\n$ `#water_tech`                 <chr> NA, \"Motorised\", \"Motorised\", \"Motorised…\n$ `#status`                     <chr> NA, \"Non-functional Abandoned\", \"Non-fun…\n$ `#adm2`                       <chr> NA, \"Atakumosa East\", \"Osogbo\", \"Odo-Oti…\n$ `#adm3`                       <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ `#management`                 <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, \"Com…\n$ `#adm1`                       <chr> NA, \"Osun\", \"Osun\", \"Osun\", NA, NA, \"Osu…\n$ `New Georeferenced Column`    <chr> \"POINT (5.06 8.02)\", \"POINT (4.7855068 7…\n$ lat_deg_original              <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ lat_lon_deg                   <chr> \"(8.02°, 5.06°)\", \"(7.3177411°, 4.785506…\n$ lon_deg_original              <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ public_data_source            <chr> \"https://catalog.waterpointdata.org/data…\n$ converted                     <chr> NA, \"#status_id, #water_source, #pay, #s…\n$ count                         <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ created_timestamp             <chr> \"12/06/2021 09:12:57 PM\", \"06/30/2020 12…\n$ updated_timestamp             <chr> \"12/06/2021 09:12:57 PM\", \"06/30/2020 12…\n\n\nConverting Aspatial to Geospatial data\n\nwp_nga$Geometry = st_as_sfc(wp_nga$`New Georeferenced Column`)\n\n\n#wp_nga = st_as_sf(wp_nga, coords = c(\"lat_deg\", \"lon_deg\"),crs=4326)\n#wp_nga\n\n\nwp_sf <- st_sf(wp_nga, crs=4326)\nst_geometry(wp_sf)\n\nGeometry set for 5557 features \nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 4.032004 ymin: 7.060309 xmax: 5.06 ymax: 8.061898\nGeodetic CRS:  WGS 84\nFirst 5 geometries:\n\n\nExtracting waterpoints in Osun area\nTransforming project\n\nwp_sf <- wp_sf %>%\n  st_transform(crs = 26392)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#data-cleaning",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#data-cleaning",
    "title": "Take-Home Exercise 01",
    "section": "Data Cleaning",
    "text": "Data Cleaning\nChecking for duplicate name\n\nNGA$ADM2_EN[duplicated(NGA$ADM2_EN)==TRUE]\n\n[1] \"Bassa\"    \"Ifelodun\" \"Irepodun\" \"Nasarawa\" \"Obi\"      \"Surulere\"\n\n\nCorrecting errors\n\nNGA$ADM2_EN[94] <- \"Bassa, Kogi\"\nNGA$ADM2_EN[95] <- \"Bassa, Plateau\"\nNGA$ADM2_EN[304] <- \"Ifelodun, Kwara\"\nNGA$ADM2_EN[305] <- \"Ifelodun, Osun\"\nNGA$ADM2_EN[355] <- \"Irepodun, Kwara\"\nNGA$ADM2_EN[356] <- \"Irepodun, Osun\"\nNGA$ADM2_EN[519] <- \"Nasarawa, Kano\"\nNGA$ADM2_EN[520] <- \"Nasarawa, Nasarawa\"\nNGA$ADM2_EN[546] <- \"Obi, Benue\"\nNGA$ADM2_EN[547] <- \"Obi, Nasarawa\"\nNGA$ADM2_EN[693] <- \"Surulere, Lagos\"\nNGA$ADM2_EN[694] <- \"Surulere, Oyo\"\n\n\nNGA$ADM2_EN[duplicated(NGA$ADM2_EN)==TRUE]\n\ncharacter(0)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#data-wrangling-water-point-data",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#data-wrangling-water-point-data",
    "title": "Take-Home Exercise 01",
    "section": "Data Wrangling (water point data)",
    "text": "Data Wrangling (water point data)\nBar graph of water status according to cleanliness of water\n\nggplot(wp_sf) + geom_bar(aes(y = fct_infreq(`#status_clean`), fill=`#status_clean`, stat=\"identity\"))+  theme(legend.position = \"right\")"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#categorising-functional-and-non-functional-water-points",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#categorising-functional-and-non-functional-water-points",
    "title": "Take-Home Exercise 01",
    "section": "Categorising functional and non-functional water points",
    "text": "Categorising functional and non-functional water points\nFunctional\n\nwp_functional <- wp_sf %>%\n  filter(`#status_clean` %in%\n           c(\"Functional\",\n             \"Functional but not in use\",\n             \"Functional but needs repair\"))\n\n\nggplot(wp_functional) + geom_bar(aes(y = fct_infreq(`#status_clean`), fill=`#status_clean`, stat=\"identity\"))+  theme(legend.position = \"right\")\n\n\n\n\nNon-functional\n\nwp_nonfunctional <- wp_sf %>%\n  filter(`#status_clean` %in%\n           c(\"Abandoned/Decommissioned\",\n             \"Abandoned\",\n             \"Non-Functional due to dry season\",\n             \"Non-Functional\",\n             \"Non functional due to dry season\"))\n\n\nggplot(wp_nonfunctional) + geom_bar(aes(y = fct_infreq(`#status_clean`), fill=`#status_clean`, stat=\"identity\"))+  theme(legend.position = \"right\")\n\n\n\n\nSaving data\n\nwrite_rds(wp_sf, \"data/rds/wp_sf.rds\")\n\n\nKernel density maps of functional and non-functional water points using appropriate tmap functions\nLoading packages\n\npacman::p_load(maptools, sf, raster, spatstat, tmap)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#converting-sf-data-frames-to-sps-spatial-class",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#converting-sf-data-frames-to-sps-spatial-class",
    "title": "Take-Home Exercise 01",
    "section": "Converting sf data frames to sp’s Spatial* class",
    "text": "Converting sf data frames to sp’s Spatial* class\n\nwp_functional_sf <- as_Spatial(wp_functional)\nwp_nonfunctional_sf <- as_Spatial(wp_nonfunctional)\nNGA_sf <- as_Spatial(NGA)\nosun_sf <- as_Spatial(osun)\n\n\nwp_functional_sf\n\nclass       : SpatialPointsDataFrame \nfeatures    : 2630 \nextent      : 177285.9, 290751, 343128.1, 450859.7  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=4 +lon_0=8.5 +k=0.99975 +x_0=670553.98 +y_0=0 +a=6378249.145 +rf=293.465 +towgs84=-92,-93,122,0,0,0,0 +units=m +no_defs \nvariables   : 70\nnames       : row_id,                                     X.source, X.lat_deg, X.lon_deg,          X.report_date, X.status_id, X.water_source_clean, X.water_source_category,      X.water_tech_clean, X.water_tech_category, X.facility_type, X.clean_country_name, X.clean_adm1, X.clean_adm2, X.clean_adm3, ... \nmin values  :  36914, Federal Ministry of Water Resources, Nigeria, 7.0890301, 4.0320038, 01/01/2010 12:00:00 AM,     Unknown,             Borehole,                  Spring,               Hand Pump,             Hand Pump,        Improved,              Nigeria,         Osun,     Aiyedade,           NA, ... \nmax values  : 471319,                                        GRID3, 8.0618983, 5.0550034, 09/16/2015 12:00:00 AM,         Yes,     Protected Spring,                    Well, Mechanized Pump - Solar,       Mechanized Pump,        Improved,              Nigeria,         Osun,       Osogbo,           NA, ... \n\n\n\nwp_nonfunctional_sf\n\nclass       : SpatialPointsDataFrame \nfeatures    : 2179 \nextent      : 180539, 290616, 340054.1, 450780.1  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=4 +lon_0=8.5 +k=0.99975 +x_0=670553.98 +y_0=0 +a=6378249.145 +rf=293.465 +towgs84=-92,-93,122,0,0,0,0 +units=m +no_defs \nvariables   : 70\nnames       : row_id,                                     X.source, X.lat_deg, X.lon_deg,          X.report_date, X.status_id, X.water_source_clean, X.water_source_category,      X.water_tech_clean, X.water_tech_category, X.facility_type, X.clean_country_name, X.clean_adm1, X.clean_adm2, X.clean_adm3, ... \nmin values  :  34829, Federal Ministry of Water Resources, Nigeria,  7.060309, 4.0618927, 01/10/2015 12:00:00 AM,          No,             Borehole,                  Spring,               Hand Pump,             Hand Pump,        Improved,              Nigeria,         Osun,     Aiyedade,           NA, ... \nmax values  : 421239,                                        GRID3, 8.0611733, 5.0537867, 09/16/2015 12:00:00 AM,         Yes,     Protected Spring,                    Well, Mechanized Pump - Solar,       Mechanized Pump,        Improved,              Nigeria,         Osun,       Osogbo,           NA, ... \n\n\n\nNGA_sf\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 774 \nextent      : 26662.71, 1344157, 30523.38, 1096029  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=4 +lon_0=8.5 +k=0.99975 +x_0=670553.98 +y_0=0 +a=6378249.145 +rf=293.465 +towgs84=-92,-93,122,0,0,0,0 +units=m +no_defs \nvariables   : 16\nnames       :    Shape_Leng,        Shape_Area,   ADM2_EN, ADM2_PCODE,  ADM2_REF, ADM2ALT1EN, ADM2ALT2EN, ADM1_EN, ADM1_PCODE, ADM0_EN, ADM0_PCODE,  date, validOn, validTo,        SD_EN, ... \nmin values  :    0.10410787, 0.000342186810984, Aba North,   NG001001, Aba North,         NA,         NA,    Abia,      NG001, Nigeria,         NG, 17134,   18003,      NA, Abia Central, ... \nmax values  : 6.76815542887,    0.929069095283,      Zuru,   NG037014,      Zuru,         NA,         NA, Zamfara,      NG037, Nigeria,         NG, 17134,   18003,      NA, Zamfara West, ... \n\n\n\nosun_sf\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 30 \nextent      : 176503.2, 291043.8, 331434.7, 454520.1  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=4 +lon_0=8.5 +k=0.99975 +x_0=670553.98 +y_0=0 +a=6378249.145 +rf=293.465 +towgs84=-92,-93,122,0,0,0,0 +units=m +no_defs \nvariables   : 16\nnames       :    Shape_Leng,       Shape_Area,  ADM2_EN, ADM2_PCODE, ADM2_REF, ADM2ALT1EN, ADM2ALT2EN, ADM1_EN, ADM1_PCODE, ADM0_EN, ADM0_PCODE,  date, validOn, validTo,        SD_EN, ... \nmin values  : 0.26445678806, 0.00248649736648, Aiyedade,   NG030001, Aiyedade,         NA,         NA,    Osun,      NG030, Nigeria,         NG, 17134,   18003,      NA, Osun Central, ... \nmax values  :  1.8470166597,  0.0737271661922,   Osogbo,   NG030030,   Osogbo,         NA,         NA,    Osun,      NG030, Nigeria,         NG, 17134,   18003,      NA,    Osun West, ..."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#converting-spatial-class-into-generic-sp-format",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#converting-spatial-class-into-generic-sp-format",
    "title": "Take-Home Exercise 01",
    "section": "Converting spatial class into generic sp format",
    "text": "Converting spatial class into generic sp format\n\nwp_functional_sp <- as(wp_functional_sf, \"SpatialPoints\")\nwp_nonfunctional_sp <- as(wp_nonfunctional_sf, \"SpatialPoints\")\nNGA_sp <- as(NGA_sf, \"SpatialPolygons\")\nosun_sp <- as(osun_sf, \"SpatialPolygons\")\n\n\nwp_functional_sp\n\nclass       : SpatialPoints \nfeatures    : 2630 \nextent      : 177285.9, 290751, 343128.1, 450859.7  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=4 +lon_0=8.5 +k=0.99975 +x_0=670553.98 +y_0=0 +a=6378249.145 +rf=293.465 +towgs84=-92,-93,122,0,0,0,0 +units=m +no_defs \n\n\n\nwp_nonfunctional_sp\n\nclass       : SpatialPoints \nfeatures    : 2179 \nextent      : 180539, 290616, 340054.1, 450780.1  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=4 +lon_0=8.5 +k=0.99975 +x_0=670553.98 +y_0=0 +a=6378249.145 +rf=293.465 +towgs84=-92,-93,122,0,0,0,0 +units=m +no_defs \n\n\n\nNGA_sp\n\nclass       : SpatialPolygons \nfeatures    : 774 \nextent      : 26662.71, 1344157, 30523.38, 1096029  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=4 +lon_0=8.5 +k=0.99975 +x_0=670553.98 +y_0=0 +a=6378249.145 +rf=293.465 +towgs84=-92,-93,122,0,0,0,0 +units=m +no_defs \n\n\n\nosun_sp\n\nclass       : SpatialPolygons \nfeatures    : 30 \nextent      : 176503.2, 291043.8, 331434.7, 454520.1  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=4 +lon_0=8.5 +k=0.99975 +x_0=670553.98 +y_0=0 +a=6378249.145 +rf=293.465 +towgs84=-92,-93,122,0,0,0,0 +units=m +no_defs \n\n\n\nConverting generic sp format into spatstat’s ppp format\n\nwp_functional_ppp <- as(wp_functional_sp, \"ppp\")\nwp_functional_ppp\n\nPlanar point pattern: 2630 points\nwindow: rectangle = [177285.9, 290750.96] x [343128.1, 450859.7] units\n\n\n\nwp_nonfunctional_ppp <- as(wp_nonfunctional_sp, \"ppp\")\nwp_nonfunctional_ppp\n\nPlanar point pattern: 2179 points\nwindow: rectangle = [180538.96, 290616] x [340054.1, 450780.1] units\n\n\nPlotting ppp points\n\nplot(wp_functional_ppp)\n\n\n\n\n\nplot(wp_nonfunctional_ppp)\n\n\n\n\nSummary statistics\n\nsummary(wp_functional_ppp)\n\nPlanar point pattern:  2630 points\nAverage intensity 2.151545e-07 points per square unit\n\nCoordinates are given to 2 decimal places\ni.e. rounded to the nearest multiple of 0.01 units\n\nWindow: rectangle = [177285.9, 290750.96] x [343128.1, 450859.7] units\n                    (113500 x 107700 units)\nWindow area = 12223800000 square units\n\n\n\nsummary(wp_nonfunctional_ppp)\n\nPlanar point pattern:  2179 points\nAverage intensity 1.787766e-07 points per square unit\n\nCoordinates are given to 2 decimal places\ni.e. rounded to the nearest multiple of 0.01 units\n\nWindow: rectangle = [180538.96, 290616] x [340054.1, 450780.1] units\n                    (110100 x 110700 units)\nWindow area = 12188400000 square units\n\n\nChecking for duplicates\n\nany(duplicated(wp_functional_ppp))\n\n[1] FALSE\n\n\n\nany(duplicated(wp_nonfunctional_ppp))\n\n[1] FALSE\n\n\nCreating owin object\n\nNGA_owin <- as(NGA_sp, \"owin\")\nosun_owin <- as(osun_sp, \"owin\")\n\n\nplot(NGA_owin)\n\n\n\nplot(osun_owin)\n\n\n\n\nChecking on owin summary statistics\n\nsummary(NGA_owin)\n\nWindow: polygonal boundary\n794 separate polygons (3 holes)\n                   vertices        area relative.area\npolygon 1                70    18683300      2.05e-05\npolygon 2                78    43293900      4.75e-05\npolygon 3               503  3940900000      4.32e-03\npolygon 4               214   832227000      9.13e-04\npolygon 5               150   178106000      1.95e-04\npolygon 6               192   463153000      5.08e-04\npolygon 7               162   774689000      8.50e-04\npolygon 8               101    56726500      6.22e-05\npolygon 9               152   267817000      2.94e-04\npolygon 10              218   176198000      1.93e-04\npolygon 11              123   716544000      7.86e-04\npolygon 12               83  1722530000      1.89e-03\npolygon 13              133   713922000      7.83e-04\npolygon 14              176  1186460000      1.30e-03\npolygon 15              192   861280000      9.45e-04\npolygon 16               80   362066000      3.97e-04\npolygon 17               80   333130000      3.65e-04\npolygon 18               97   239038000      2.62e-04\npolygon 19              104   376914000      4.13e-04\npolygon 20              145  1921460000      2.11e-03\npolygon 21               74  1047270000      1.15e-03\npolygon 22               51    11565800      1.27e-05\npolygon 23              140   173516000      1.90e-04\npolygon 24               79  1477800000      1.62e-03\npolygon 25              151   113895000      1.25e-04\npolygon 26               92   318329000      3.49e-04\npolygon 27               92   440715000      4.83e-04\npolygon 28              204   766084000      8.40e-04\npolygon 29               81   304399000      3.34e-04\npolygon 30               92   435478000      4.78e-04\npolygon 31              109  1381750000      1.52e-03\npolygon 32               64    12853400      1.41e-05\npolygon 33              247   714085000      7.83e-04\npolygon 34              324  5026000000      5.51e-03\npolygon 35              100   600214000      6.58e-04\npolygon 36              206  2456020000      2.69e-03\npolygon 37              352  1343180000      1.47e-03\npolygon 38              118   344533000      3.78e-04\npolygon 39              127   570176000      6.25e-04\npolygon 40               95   222379000      2.44e-04\npolygon 41              101   490727000      5.38e-04\npolygon 42              666   793051000      8.70e-04\npolygon 43              139  1247500000      1.37e-03\npolygon 44              152   677546000      7.43e-04\npolygon 45               95   308931000      3.39e-04\npolygon 46              145   935319000      1.03e-03\npolygon 47              217   443956000      4.87e-04\npolygon 48               54   336385000      3.69e-04\npolygon 49              129   185003000      2.03e-04\npolygon 50              293  6019260000      6.60e-03\npolygon 51              121   139832000      1.53e-04\npolygon 52               85   258902000      2.84e-04\npolygon 53              124   953995000      1.05e-03\npolygon 54               78   100773000      1.11e-04\npolygon 55               98   251158000      2.76e-04\npolygon 56               54   369460000      4.05e-04\npolygon 57               91   404764000      4.44e-04\npolygon 58              105   871119000      9.56e-04\npolygon 59              137  2552190000      2.80e-03\npolygon 60              120  1281100000      1.41e-03\npolygon 61               71   926930000      1.02e-03\npolygon 62              105    20217600      2.22e-05\npolygon 63              183  2262010000      2.48e-03\npolygon 64              162  4043000000      4.44e-03\npolygon 65               86  1101870000      1.21e-03\npolygon 66              173   521166000      5.72e-04\npolygon 67              109  1341810000      1.47e-03\npolygon 68               71   115057000      1.26e-04\npolygon 69              484  2513010000      2.76e-03\npolygon 70               97   465688000      5.11e-04\npolygon 71              124   373051000      4.09e-04\npolygon 72              187  1820870000      2.00e-03\npolygon 73              163  2907440000      3.19e-03\npolygon 74              122  1144380000      1.26e-03\npolygon 75              211   424132000      4.65e-04\npolygon 76              263  2640270000      2.90e-03\npolygon 77               79   441514000      4.84e-04\npolygon 78               65   345446000      3.79e-04\npolygon 79               60   173446000      1.90e-04\npolygon 80              110   590436000      6.48e-04\npolygon 81              258  1001520000      1.10e-03\npolygon 82              169   456525000      5.01e-04\npolygon 83              151   515216000      5.65e-04\npolygon 84              114   319372000      3.50e-04\npolygon 85              188  5113050000      5.61e-03\npolygon 86              108   422520000      4.63e-04\npolygon 87               25     1656000      1.82e-06\npolygon 88               40     2539480      2.79e-06\npolygon 89              198   753693000      8.27e-04\npolygon 90              105  1503970000      1.65e-03\npolygon 91              194  1608070000      1.76e-03\npolygon 92              446  9146630000      1.00e-02\npolygon 93              418  5061900000      5.55e-03\npolygon 94              179   996338000      1.09e-03\npolygon 95              242  9749490000      1.07e-02\npolygon 96              125  1935360000      2.12e-03\npolygon 97              237  1646800000      1.81e-03\npolygon 98              148   523796000      5.75e-04\npolygon 99              196  1178480000      1.29e-03\npolygon 100             167  3654300000      4.01e-03\npolygon 101             179   789195000      8.66e-04\npolygon 102             201   949273000      1.04e-03\npolygon 103             113   724290000      7.95e-04\npolygon 104             115   314657000      3.45e-04\npolygon 105             173   618647000      6.79e-04\npolygon 106             241  1292100000      1.42e-03\npolygon 107             137   687464000      7.54e-04\npolygon 108              29    52177100      5.72e-05\npolygon 109              76   762749000      8.37e-04\npolygon 110             156   497186000      5.45e-04\npolygon 111              84   831075000      9.12e-04\npolygon 112             270  1593160000      1.75e-03\npolygon 113             326  1403290000      1.54e-03\npolygon 114             545  6532700000      7.17e-03\npolygon 115              76  1077240000      1.18e-03\npolygon 116             140  1240290000      1.36e-03\npolygon 117             442  3293310000      3.61e-03\npolygon 118             102   639535000      7.02e-04\npolygon 119              99   890376000      9.77e-04\npolygon 120             288  2884440000      3.16e-03\npolygon 121             189  1720740000      1.89e-03\npolygon 122              60   149473000      1.64e-04\npolygon 123              41    22700000      2.49e-05\npolygon 124               8     2288030      2.51e-06\npolygon 125              30    38962000      4.27e-05\npolygon 126              49    64971100      7.13e-05\npolygon 127             126   551553000      6.05e-04\npolygon 128             289 11313500000      1.24e-02\npolygon 129              84   144820000      1.59e-04\npolygon 130             107  1584140000      1.74e-03\npolygon 131 (hole)       46   -63221900     -6.94e-05\npolygon 132             242   944565000      1.04e-03\npolygon 133             172   568738000      6.24e-04\npolygon 134             192  3302700000      3.62e-03\npolygon 135             168  2032610000      2.23e-03\npolygon 136             136   441312000      4.84e-04\npolygon 137             102  1109840000      1.22e-03\npolygon 138             353  3824360000      4.20e-03\npolygon 139             119  1172270000      1.29e-03\npolygon 140             348  1937620000      2.13e-03\npolygon 141              33  1045770000      1.15e-03\npolygon 142             105   137471000      1.51e-04\npolygon 143             195   180017000      1.97e-04\npolygon 144              30     8508280      9.33e-06\npolygon 145              46    63221900      6.94e-05\npolygon 146             171   488609000      5.36e-04\npolygon 147             135  1527120000      1.68e-03\npolygon 148             346  4482200000      4.92e-03\npolygon 149              82    13403000      1.47e-05\npolygon 150             178  2351070000      2.58e-03\npolygon 151             136  1099370000      1.21e-03\npolygon 152             241   789614000      8.66e-04\npolygon 153             464  5852250000      6.42e-03\npolygon 154             167   807413000      8.86e-04\npolygon 155             121  1954440000      2.14e-03\npolygon 156             125   479132000      5.26e-04\npolygon 157             118  1136380000      1.25e-03\npolygon 158             144   482469000      5.29e-04\npolygon 159             285  3055000000      3.35e-03\npolygon 160              93   688296000      7.55e-04\npolygon 161             101   191455000      2.10e-04\npolygon 162             113   384285000      4.22e-04\npolygon 163             126   437156000      4.80e-04\npolygon 164             198   986846000      1.08e-03\npolygon 165             195  2407170000      2.64e-03\npolygon 166             143  1573000000      1.73e-03\npolygon 167             267  1907060000      2.09e-03\npolygon 168             213  1488560000      1.63e-03\npolygon 169             118  2486810000      2.73e-03\npolygon 170             291  3042540000      3.34e-03\npolygon 171             181  3696750000      4.06e-03\npolygon 172              31    31907200      3.50e-05\npolygon 173              45    21471500      2.36e-05\npolygon 174             316  1028900000      1.13e-03\npolygon 175             122   325297000      3.57e-04\npolygon 176             157   647249000      7.10e-04\npolygon 177             117   122897000      1.35e-04\npolygon 178             165   505877000      5.55e-04\npolygon 179             121   913129000      1.00e-03\npolygon 180              50   102243000      1.12e-04\npolygon 181              72   216002000      2.37e-04\npolygon 182             158  2541800000      2.79e-03\npolygon 183              59   230988000      2.53e-04\npolygon 184             220  1873530000      2.06e-03\npolygon 185             133   735204000      8.07e-04\npolygon 186             106   259870000      2.85e-04\npolygon 187             112   269897000      2.96e-04\npolygon 188              66    76272100      8.37e-05\npolygon 189             167   174284000      1.91e-04\npolygon 190             125   365142000      4.01e-04\npolygon 191             259  1818930000      2.00e-03\npolygon 192             176   166138000      1.82e-04\npolygon 193              76   476516000      5.23e-04\npolygon 194              69   315063000      3.46e-04\npolygon 195              89   337071000      3.70e-04\npolygon 196             102   375363000      4.12e-04\npolygon 197              84   121957000      1.34e-04\npolygon 198              52   136604000      1.50e-04\npolygon 199             162   833337000      9.14e-04\npolygon 200              65   250497000      2.75e-04\npolygon 201              87   391909000      4.30e-04\npolygon 202              98    93298400      1.02e-04\npolygon 203              56    75277300      8.26e-05\npolygon 204             386  1187590000      1.30e-03\npolygon 205             140   264235000      2.90e-04\npolygon 206             136   342326000      3.76e-04\npolygon 207             170  1306460000      1.43e-03\npolygon 208             149   515910000      5.66e-04\npolygon 209             152  1080780000      1.19e-03\npolygon 210              96   169335000      1.86e-04\npolygon 211             168   289107000      3.17e-04\npolygon 212             157   815912000      8.95e-04\npolygon 213              27    61230000      6.72e-05\npolygon 214              56   319113000      3.50e-04\npolygon 215             121   538078000      5.90e-04\npolygon 216              74   192362000      2.11e-04\npolygon 217             180   220312000      2.42e-04\npolygon 218             175   172800000      1.90e-04\npolygon 219             159   663059000      7.27e-04\npolygon 220             202  1132490000      1.24e-03\npolygon 221             179   939540000      1.03e-03\npolygon 222             187   812156000      8.91e-04\npolygon 223              99   630524000      6.92e-04\npolygon 224              75   638217000      7.00e-04\npolygon 225             125   120414000      1.32e-04\npolygon 226             130   413300000      4.53e-04\npolygon 227             146   263994000      2.90e-04\npolygon 228              78    38534100      4.23e-05\npolygon 229             226  2252420000      2.47e-03\npolygon 230             267  1682640000      1.85e-03\npolygon 231             417  2155190000      2.36e-03\npolygon 232             298  4752100000      5.21e-03\npolygon 233             177  1595500000      1.75e-03\npolygon 234             391  5486120000      6.02e-03\npolygon 235             144   422312000      4.63e-04\npolygon 236             239   610672000      6.70e-04\npolygon 237             135  1517930000      1.67e-03\npolygon 238             143   582712000      6.39e-04\npolygon 239             174  2938910000      3.22e-03\npolygon 240             322  4890620000      5.36e-03\npolygon 241             141  2101520000      2.31e-03\npolygon 242             372  1408790000      1.55e-03\npolygon 243             141   441736000      4.85e-04\npolygon 244              91   227717000      2.50e-04\npolygon 245             366  8393400000      9.21e-03\npolygon 246             308  5548050000      6.09e-03\npolygon 247             184   567600000      6.23e-04\npolygon 248             194  1752700000      1.92e-03\npolygon 249             129  1898840000      2.08e-03\npolygon 250             224  3853470000      4.23e-03\npolygon 251             110   338774000      3.72e-04\npolygon 252             137   750378000      8.23e-04\npolygon 253             113  1198410000      1.31e-03\npolygon 254             228  1985330000      2.18e-03\npolygon 255              42   132735000      1.46e-04\npolygon 256              41    45266800      4.97e-05\npolygon 257             214  2172830000      2.38e-03\npolygon 258             181  1711740000      1.88e-03\npolygon 259             265  2635650000      2.89e-03\npolygon 260             111  3295570000      3.62e-03\npolygon 261             367  3479590000      3.82e-03\npolygon 262             381  2135100000      2.34e-03\npolygon 263             130  2861350000      3.14e-03\npolygon 264              87   227361000      2.49e-04\npolygon 265             138  2612750000      2.87e-03\npolygon 266             194  1131040000      1.24e-03\npolygon 267             256  1064810000      1.17e-03\npolygon 268              70   645109000      7.08e-04\npolygon 269             165  2065340000      2.27e-03\npolygon 270             122   690397000      7.57e-04\npolygon 271             329  2530740000      2.78e-03\npolygon 272             164  1008740000      1.11e-03\npolygon 273             116  1001210000      1.10e-03\npolygon 274             101    23625200      2.59e-05\npolygon 275             106  1055810000      1.16e-03\npolygon 276             530  1858910000      2.04e-03\npolygon 277             133   436131000      4.78e-04\npolygon 278             108  1993390000      2.19e-03\npolygon 279              95  1430860000      1.57e-03\npolygon 280             198   451326000      4.95e-04\npolygon 281             325  2953570000      3.24e-03\npolygon 282              45    32240200      3.54e-05\npolygon 283             358  2020480000      2.22e-03\npolygon 284             247  2674760000      2.93e-03\npolygon 285             113    39173300      4.30e-05\npolygon 286             109    13307200      1.46e-05\npolygon 287              80    11510600      1.26e-05\npolygon 288              97    14118400      1.55e-05\npolygon 289             116    48456300      5.32e-05\npolygon 290             107  1335400000      1.46e-03\npolygon 291             135   689017000      7.56e-04\npolygon 292             129   757902000      8.31e-04\npolygon 293             128   970597000      1.06e-03\npolygon 294              46   360322000      3.95e-04\npolygon 295              61    94448100      1.04e-04\npolygon 296             236   243275000      2.67e-04\npolygon 297             125   175050000      1.92e-04\npolygon 298             328  2669260000      2.93e-03\npolygon 299             260   336038000      3.69e-04\npolygon 300              41   134212000      1.47e-04\npolygon 301             221  1921470000      2.11e-03\npolygon 302             186   182197000      2.00e-04\npolygon 303              91   104163000      1.14e-04\npolygon 304              88   132443000      1.45e-04\npolygon 305              90   131298000      1.44e-04\npolygon 306             203   871429000      9.56e-04\npolygon 307              52   231585000      2.54e-04\npolygon 308              92    33306600      3.65e-05\npolygon 309              83   111191000      1.22e-04\npolygon 310             126   192557000      2.11e-04\npolygon 311             219   904397000      9.92e-04\npolygon 312             174   741131000      8.13e-04\npolygon 313              81   138742000      1.52e-04\npolygon 314             108   318363000      3.49e-04\npolygon 315             246  3449020000      3.78e-03\npolygon 316              65   119452000      1.31e-04\npolygon 317             131   542710000      5.95e-04\npolygon 318             267  3391200000      3.72e-03\npolygon 319             231  2114230000      2.32e-03\npolygon 320              86   333938000      3.66e-04\npolygon 321              61   303909000      3.33e-04\npolygon 322              83   170077000      1.87e-04\npolygon 323             118   349864000      3.84e-04\npolygon 324             125   240906000      2.64e-04\npolygon 325             138   108417000      1.19e-04\npolygon 326             374  2179670000      2.39e-03\npolygon 327             103   959168000      1.05e-03\npolygon 328              95   213380000      2.34e-04\npolygon 329              87   143429000      1.57e-04\npolygon 330              63   378013000      4.15e-04\npolygon 331             177  1284310000      1.41e-03\npolygon 332             117   114643000      1.26e-04\npolygon 333             103   468158000      5.14e-04\npolygon 334             118   436075000      4.78e-04\npolygon 335             181   940328000      1.03e-03\npolygon 336             144   181157000      1.99e-04\npolygon 337              95    46930500      5.15e-05\npolygon 338              54   146666000      1.61e-04\npolygon 339              75   237924000      2.61e-04\npolygon 340             159  1072560000      1.18e-03\npolygon 341             329  1966820000      2.16e-03\npolygon 342             211   262513000      2.88e-04\npolygon 343             162   401626000      4.41e-04\npolygon 344             214   335586000      3.68e-04\npolygon 345             123   115857000      1.27e-04\npolygon 346             213   858760000      9.42e-04\npolygon 347             104   658339000      7.22e-04\npolygon 348             177   655251000      7.19e-04\npolygon 349             158   278311000      3.05e-04\npolygon 350              90   280205000      3.07e-04\npolygon 351             306   967491000      1.06e-03\npolygon 352             206   597317000      6.55e-04\npolygon 353              34    94929400      1.04e-04\npolygon 354              69    69814600      7.66e-05\npolygon 355              69    42727500      4.69e-05\npolygon 356             126  1083920000      1.19e-03\npolygon 357              71   441057000      4.84e-04\npolygon 358              70    11777400      1.29e-05\npolygon 359             109   243915000      2.68e-04\npolygon 360              30     2518970      2.76e-06\npolygon 361             113   149668000      1.64e-04\npolygon 362             445  1824360000      2.00e-03\npolygon 363             238   789152000      8.66e-04\npolygon 364             231   382777000      4.20e-04\npolygon 365             223   577820000      6.34e-04\npolygon 366             164   894287000      9.81e-04\npolygon 367              37   984403000      1.08e-03\npolygon 368             153   703398000      7.72e-04\npolygon 369              49    30458800      3.34e-05\npolygon 370              77   327820000      3.60e-04\npolygon 371              62   263505000      2.89e-04\npolygon 372             155  2166520000      2.38e-03\npolygon 373             110   414831000      4.55e-04\npolygon 374             147  1825460000      2.00e-03\npolygon 375             133   694895000      7.62e-04\npolygon 376             143   845436000      9.27e-04\npolygon 377             136   283520000      3.11e-04\npolygon 378             167   276994000      3.04e-04\npolygon 379             164   153494000      1.68e-04\npolygon 380              85   633163000      6.95e-04\npolygon 381             134   382494000      4.20e-04\npolygon 382              93   438930000      4.81e-04\npolygon 383             116   459058000      5.04e-04\npolygon 384              20    23530600      2.58e-05\npolygon 385             116   714012000      7.83e-04\npolygon 386 (hole)       20   -23530600     -2.58e-05\npolygon 387              78    52602500      5.77e-05\npolygon 388             259  1653590000      1.81e-03\npolygon 389              82  1551780000      1.70e-03\npolygon 390             146   180183000      1.98e-04\npolygon 391              69   266635000      2.92e-04\npolygon 392             261  2408070000      2.64e-03\npolygon 393              87   274127000      3.01e-04\npolygon 394             163  1083380000      1.19e-03\npolygon 395             114   454348000      4.98e-04\npolygon 396             237  2613310000      2.87e-03\npolygon 397             209  1245760000      1.37e-03\npolygon 398             270  3533910000      3.88e-03\npolygon 399              91   190774000      2.09e-04\npolygon 400              83   382500000      4.20e-04\npolygon 401             124   970150000      1.06e-03\npolygon 402             166  1415580000      1.55e-03\npolygon 403             370   848310000      9.31e-04\npolygon 404             263  1066830000      1.17e-03\npolygon 405             163  1027350000      1.13e-03\npolygon 406              85   262081000      2.87e-04\npolygon 407             146   565903000      6.21e-04\npolygon 408             198  2696010000      2.96e-03\npolygon 409             128   372050000      4.08e-04\npolygon 410             301  4589350000      5.03e-03\npolygon 411              70    59358300      6.51e-05\npolygon 412              87    52691500      5.78e-05\npolygon 413             240  1371380000      1.50e-03\npolygon 414             167  1013280000      1.11e-03\npolygon 415             261  2585420000      2.84e-03\npolygon 416             215  1910440000      2.10e-03\npolygon 417             126  6971200000      7.65e-03\npolygon 418             110   714045000      7.83e-04\npolygon 419              64   608806000      6.68e-04\npolygon 420             292  3007610000      3.30e-03\npolygon 421             344  1896730000      2.08e-03\npolygon 422              72   610435000      6.70e-04\npolygon 423             101  1155510000      1.27e-03\npolygon 424             253  2746620000      3.01e-03\npolygon 425             254  1394860000      1.53e-03\npolygon 426             169   940266000      1.03e-03\npolygon 427             173   754239000      8.27e-04\npolygon 428              65    17171600      1.88e-05\npolygon 429             265  1333410000      1.46e-03\npolygon 430             100   449680000      4.93e-04\npolygon 431             412  6620190000      7.26e-03\npolygon 432             185  2884260000      3.16e-03\npolygon 433             139  1327500000      1.46e-03\npolygon 434             240  1652310000      1.81e-03\npolygon 435              87   147970000      1.62e-04\npolygon 436             162  2690800000      2.95e-03\npolygon 437             203   817292000      8.97e-04\npolygon 438             103   518700000      5.69e-04\npolygon 439             105   866522000      9.51e-04\npolygon 440             159  2511300000      2.75e-03\npolygon 441             189   381951000      4.19e-04\npolygon 442              88  1164900000      1.28e-03\npolygon 443             154  2635140000      2.89e-03\npolygon 444              32   112748000      1.24e-04\npolygon 445             143   558807000      6.13e-04\npolygon 446              78   436326000      4.79e-04\npolygon 447             105  2270460000      2.49e-03\npolygon 448             210   830157000      9.11e-04\npolygon 449             190   904042000      9.92e-04\npolygon 450             198  1031320000      1.13e-03\npolygon 451             103  1494520000      1.64e-03\npolygon 452             133  1349380000      1.48e-03\npolygon 453             158  2554290000      2.80e-03\npolygon 454              54   350876000      3.85e-04\npolygon 455             758  5993130000      6.57e-03\npolygon 456             160  1683790000      1.85e-03\npolygon 457              98  1776210000      1.95e-03\npolygon 458              85    82167800      9.01e-05\npolygon 459             188  2360860000      2.59e-03\npolygon 460             105   334024000      3.66e-04\npolygon 461             109  1532430000      1.68e-03\npolygon 462             320  4951410000      5.43e-03\npolygon 463             110   191551000      2.10e-04\npolygon 464             152   520576000      5.71e-04\npolygon 465              86   195919000      2.15e-04\npolygon 466             141   576472000      6.32e-04\npolygon 467             254  4353820000      4.78e-03\npolygon 468             123   455568000      5.00e-04\npolygon 469             135  1252810000      1.37e-03\npolygon 470             148  1721300000      1.89e-03\npolygon 471             142  2351420000      2.58e-03\npolygon 472             138   597318000      6.55e-04\npolygon 473             148   749496000      8.22e-04\npolygon 474             452  2656280000      2.91e-03\npolygon 475             136   274289000      3.01e-04\npolygon 476              23     8661600      9.50e-06\npolygon 477              66    23678500      2.60e-05\npolygon 478             141  1108700000      1.22e-03\npolygon 479             194   782444000      8.58e-04\npolygon 480             197  1198910000      1.32e-03\npolygon 481             201  3031940000      3.33e-03\npolygon 482             187  1660500000      1.82e-03\npolygon 483             161  2594590000      2.85e-03\npolygon 484             276  2300020000      2.52e-03\npolygon 485              85  1625090000      1.78e-03\npolygon 486             216  3203910000      3.51e-03\npolygon 487             256  1280140000      1.40e-03\npolygon 488             179   836488000      9.18e-04\npolygon 489              93   257794000      2.83e-04\npolygon 490             421  2873420000      3.15e-03\npolygon 491             249  4069250000      4.46e-03\npolygon 492             335  4750130000      5.21e-03\npolygon 493             133   619159000      6.79e-04\npolygon 494             145   140676000      1.54e-04\npolygon 495             147   964409000      1.06e-03\npolygon 496             163  1364640000      1.50e-03\npolygon 497             150  1340230000      1.47e-03\npolygon 498             197   401654000      4.41e-04\npolygon 499              60   811777000      8.90e-04\npolygon 500             184   806731000      8.85e-04\npolygon 501             194   805730000      8.84e-04\npolygon 502             223  1609110000      1.77e-03\npolygon 503             174   670373000      7.35e-04\npolygon 504             173  2756620000      3.02e-03\npolygon 505             288  5780750000      6.34e-03\npolygon 506             109   572027000      6.27e-04\npolygon 507             243  2981570000      3.27e-03\npolygon 508             366  7222130000      7.92e-03\npolygon 509             282  9325580000      1.02e-02\npolygon 510             164   937953000      1.03e-03\npolygon 511             105   539604000      5.92e-04\npolygon 512             224  2115550000      2.32e-03\npolygon 513             176   200015000      2.19e-04\npolygon 514             261    71848700      7.88e-05\npolygon 515             517   149386000      1.64e-04\npolygon 516              75    13573700      1.49e-05\npolygon 517              42     5665830      6.22e-06\npolygon 518              24      876126      9.61e-07\npolygon 519             127   816059000      8.95e-04\npolygon 520             174   569034000      6.24e-04\npolygon 521             143   785121000      8.61e-04\npolygon 522             128   431249000      4.73e-04\npolygon 523             121   998310000      1.10e-03\npolygon 524             237   350136000      3.84e-04\npolygon 525              64   197751000      2.17e-04\npolygon 526             419  2717250000      2.98e-03\npolygon 527             534  5314130000      5.83e-03\npolygon 528             276  1905800000      2.09e-03\npolygon 529              96   834508000      9.15e-04\npolygon 530             167  3133390000      3.44e-03\npolygon 531             114   758369000      8.32e-04\npolygon 532             131   505935000      5.55e-04\npolygon 533             153   787574000      8.64e-04\npolygon 534              71    16681300      1.83e-05\npolygon 535             202  2087080000      2.29e-03\npolygon 536             212  1580580000      1.73e-03\npolygon 537             239  1045310000      1.15e-03\npolygon 538              78    41663400      4.57e-05\npolygon 539             131  4852660000      5.32e-03\npolygon 540             179  1257790000      1.38e-03\npolygon 541             208  1610340000      1.77e-03\npolygon 542             153   822692000      9.02e-04\npolygon 543             165  1404280000      1.54e-03\npolygon 544             194  1456450000      1.60e-03\npolygon 545             255  2326850000      2.55e-03\npolygon 546             179  2615440000      2.87e-03\npolygon 547             257   542201000      5.95e-04\npolygon 548             208   817102000      8.96e-04\npolygon 549             287  4646880000      5.10e-03\npolygon 550             104    78468800      8.61e-05\npolygon 551              80    97463700      1.07e-04\npolygon 552              89   759948000      8.34e-04\npolygon 553              62   254847000      2.80e-04\npolygon 554              92    35047200      3.84e-05\npolygon 555              52    68604100      7.53e-05\npolygon 556             103   154259000      1.69e-04\npolygon 557             141   130673000      1.43e-04\npolygon 558             135   130604000      1.43e-04\npolygon 559             171   200856000      2.20e-04\npolygon 560             162   556234000      6.10e-04\npolygon 561             143   836873000      9.18e-04\npolygon 562             121    69650300      7.64e-05\npolygon 563             233  1484990000      1.63e-03\npolygon 564             195   938380000      1.03e-03\npolygon 565              72   496736000      5.45e-04\npolygon 566             184  1015930000      1.11e-03\npolygon 567             154   403847000      4.43e-04\npolygon 568             111   257687000      2.83e-04\npolygon 569             105   509979000      5.59e-04\npolygon 570             167   234789000      2.58e-04\npolygon 571             112    86415300      9.48e-05\npolygon 572             275  1144120000      1.26e-03\npolygon 573             106   467565000      5.13e-04\npolygon 574             318  1445720000      1.59e-03\npolygon 575             306  1885470000      2.07e-03\npolygon 576              98   292058000      3.20e-04\npolygon 577              92   550979000      6.04e-04\npolygon 578             360  1354000000      1.49e-03\npolygon 579              58    94679600      1.04e-04\npolygon 580             251  1715700000      1.88e-03\npolygon 581             162   958862000      1.05e-03\npolygon 582              81   602543000      6.61e-04\npolygon 583             115   517979000      5.68e-04\npolygon 584              93   678771000      7.45e-04\npolygon 585              44    91573300      1.00e-04\npolygon 586              56    29135100      3.20e-05\npolygon 587             112   376959000      4.14e-04\npolygon 588             235   912341000      1.00e-03\npolygon 589              60    79402200      8.71e-05\npolygon 590              96   130008000      1.43e-04\npolygon 591             310   973735000      1.07e-03\npolygon 592             167   422444000      4.63e-04\npolygon 593              95   439958000      4.83e-04\npolygon 594             240   896223000      9.83e-04\npolygon 595              94   333241000      3.66e-04\npolygon 596             105   602218000      6.61e-04\npolygon 597              61   598470000      6.57e-04\npolygon 598              90   411357000      4.51e-04\npolygon 599             135   162995000      1.79e-04\npolygon 600             192  1189640000      1.31e-03\npolygon 601             114   436816000      4.79e-04\npolygon 602             108   661738000      7.26e-04\npolygon 603             109   298589000      3.28e-04\npolygon 604             231   306860000      3.37e-04\npolygon 605             158   858911000      9.42e-04\npolygon 606             163   300918000      3.30e-04\npolygon 607             123   481140000      5.28e-04\npolygon 608             109   924106000      1.01e-03\npolygon 609             144   286440000      3.14e-04\npolygon 610              64   327765000      3.60e-04\npolygon 611             132   990260000      1.09e-03\npolygon 612             133   108945000      1.20e-04\npolygon 613              57  1063330000      1.17e-03\npolygon 614             112   671950000      7.37e-04\npolygon 615              91  1591220000      1.75e-03\npolygon 616              61   158754000      1.74e-04\npolygon 617             123   334217000      3.67e-04\npolygon 618             176   449937000      4.94e-04\npolygon 619             181   962703000      1.06e-03\npolygon 620             168   439068000      4.82e-04\npolygon 621              53    37632900      4.13e-05\npolygon 622              44     9923540      1.09e-05\npolygon 623             168   163855000      1.80e-04\npolygon 624              84   114932000      1.26e-04\npolygon 625             129   250954000      2.75e-04\npolygon 626              48   917300000      1.01e-03\npolygon 627             211  2414130000      2.65e-03\npolygon 628              92  2044380000      2.24e-03\npolygon 629             122   462169000      5.07e-04\npolygon 630             145   122732000      1.35e-04\npolygon 631              94   109715000      1.20e-04\npolygon 632              75    52113900      5.72e-05\npolygon 633              78    75069700      8.23e-05\npolygon 634             157   131405000      1.44e-04\npolygon 635             130    96737000      1.06e-04\npolygon 636             212   544292000      5.97e-04\npolygon 637             148   321005000      3.52e-04\npolygon 638             117   188241000      2.06e-04\npolygon 639             326  1427760000      1.57e-03\npolygon 640              93   510484000      5.60e-04\npolygon 641              84   266566000      2.92e-04\npolygon 642              59    44465000      4.88e-05\npolygon 643             108   174739000      1.92e-04\npolygon 644              95    61239800      6.72e-05\npolygon 645             135  1362500000      1.49e-03\npolygon 646             441  2343080000      2.57e-03\npolygon 647             443  2779220000      3.05e-03\npolygon 648             201  1229570000      1.35e-03\npolygon 649             148   740903000      8.13e-04\npolygon 650              96    56304900      6.18e-05\npolygon 651             204   193966000      2.13e-04\npolygon 652             227   286364000      3.14e-04\npolygon 653             195  1140690000      1.25e-03\npolygon 654              69   507076000      5.56e-04\npolygon 655              77   135112000      1.48e-04\npolygon 656             102   247269000      2.71e-04\npolygon 657             169   359335000      3.94e-04\npolygon 658             171   599357000      6.57e-04\npolygon 659             107   605492000      6.64e-04\npolygon 660 (hole)       58   -94679600     -1.04e-04\npolygon 661             278  2089500000      2.29e-03\npolygon 662             215  1434320000      1.57e-03\npolygon 663             109   226339000      2.48e-04\npolygon 664             115  2913520000      3.20e-03\npolygon 665              92   108215000      1.19e-04\npolygon 666             120   576911000      6.33e-04\npolygon 667             312  2539010000      2.79e-03\npolygon 668             152  2397920000      2.63e-03\npolygon 669             281  3685550000      4.04e-03\npolygon 670             111   517132000      5.67e-04\npolygon 671              71   210320000      2.31e-04\npolygon 672             407  3128130000      3.43e-03\npolygon 673             114   484795000      5.32e-04\npolygon 674             114   266695000      2.93e-04\npolygon 675             326  1020560000      1.12e-03\npolygon 676             187   828074000      9.08e-04\npolygon 677             118   798209000      8.76e-04\npolygon 678             233   304041000      3.34e-04\npolygon 679              74   262520000      2.88e-04\npolygon 680              81  2379770000      2.61e-03\npolygon 681             197   695308000      7.63e-04\npolygon 682             178  1389470000      1.52e-03\npolygon 683             218   949719000      1.04e-03\npolygon 684             137  1455320000      1.60e-03\npolygon 685              69  1376800000      1.51e-03\npolygon 686              78  1894770000      2.08e-03\npolygon 687             124   326896000      3.59e-04\npolygon 688             238  1493300000      1.64e-03\npolygon 689              95   429927000      4.72e-04\npolygon 690             312  4603740000      5.05e-03\npolygon 691             108   603505000      6.62e-04\npolygon 692             124  1313750000      1.44e-03\npolygon 693             207  2722740000      2.99e-03\npolygon 694             205  1228890000      1.35e-03\npolygon 695              89   507887000      5.57e-04\npolygon 696             105  1209820000      1.33e-03\npolygon 697             298  2439390000      2.68e-03\npolygon 698             119   783435000      8.59e-04\npolygon 699             223  1370830000      1.50e-03\npolygon 700             405  5232570000      5.74e-03\npolygon 701             112   869266000      9.54e-04\npolygon 702              40    11266300      1.24e-05\npolygon 703              85   801093000      8.79e-04\npolygon 704             182  2247020000      2.46e-03\npolygon 705              64    40124900      4.40e-05\npolygon 706              74    28609800      3.14e-05\npolygon 707             159  4057210000      4.45e-03\npolygon 708             268  2711450000      2.97e-03\npolygon 709             199  1232180000      1.35e-03\npolygon 710              49   129161000      1.42e-04\npolygon 711             181  1249020000      1.37e-03\npolygon 712             153  1576310000      1.73e-03\npolygon 713             102    19692500      2.16e-05\npolygon 714             142  1041390000      1.14e-03\npolygon 715              51   241483000      2.65e-04\npolygon 716             329  2454620000      2.69e-03\npolygon 717              52   160564000      1.76e-04\npolygon 718             199   597976000      6.56e-04\npolygon 719             165  2386710000      2.62e-03\npolygon 720              96  1467640000      1.61e-03\npolygon 721             165  1845440000      2.02e-03\npolygon 722             125  2382560000      2.61e-03\npolygon 723              56    26680100      2.93e-05\npolygon 724              57   477262000      5.24e-04\npolygon 725             240  4537780000      4.98e-03\npolygon 726             221   655572000      7.19e-04\npolygon 727              90   190575000      2.09e-04\npolygon 728             366  6875030000      7.54e-03\npolygon 729             111  2983120000      3.27e-03\npolygon 730             282  5593540000      6.14e-03\npolygon 731             178  1810650000      1.99e-03\npolygon 732             111   535540000      5.87e-04\npolygon 733             194  1226250000      1.35e-03\npolygon 734             103  2304250000      2.53e-03\npolygon 735              80   256855000      2.82e-04\npolygon 736             127   890774000      9.77e-04\npolygon 737              88   166099000      1.82e-04\npolygon 738             118    58655100      6.43e-05\npolygon 739             181   832072000      9.13e-04\npolygon 740             245   771172000      8.46e-04\npolygon 741              94   125983000      1.38e-04\npolygon 742             201  1994300000      2.19e-03\npolygon 743             119   218239000      2.39e-04\npolygon 744              84  1783340000      1.96e-03\npolygon 745             143   282825000      3.10e-04\npolygon 746              80   277344000      3.04e-04\npolygon 747              91   409149000      4.49e-04\npolygon 748             113   368029000      4.04e-04\npolygon 749             129   227449000      2.50e-04\npolygon 750              77   135239000      1.48e-04\npolygon 751             131   222742000      2.44e-04\npolygon 752             108   107659000      1.18e-04\npolygon 753             189   346538000      3.80e-04\npolygon 754             135   115738000      1.27e-04\npolygon 755             107  1379370000      1.51e-03\npolygon 756              72  1495350000      1.64e-03\npolygon 757              91   112635000      1.24e-04\npolygon 758             279   183562000      2.01e-04\npolygon 759             131   841799000      9.23e-04\npolygon 760             129   977404000      1.07e-03\npolygon 761             157   665252000      7.30e-04\npolygon 762             167  1209890000      1.33e-03\npolygon 763             102   363647000      3.99e-04\npolygon 764             131   658795000      7.23e-04\npolygon 765             235  1840730000      2.02e-03\npolygon 766             131   586927000      6.44e-04\npolygon 767             173  1699070000      1.86e-03\npolygon 768             245  4102640000      4.50e-03\npolygon 769             362  4981460000      5.46e-03\npolygon 770             148   361846000      3.97e-04\npolygon 771             185  3936310000      4.32e-03\npolygon 772             105   681794000      7.48e-04\npolygon 773             179  1813520000      1.99e-03\npolygon 774             100   770814000      8.46e-04\npolygon 775             165  1475280000      1.62e-03\npolygon 776             144  1287890000      1.41e-03\npolygon 777             165   658753000      7.23e-04\npolygon 778             371  1782980000      1.96e-03\npolygon 779             201  1964990000      2.16e-03\npolygon 780             182   337903000      3.71e-04\npolygon 781              39   123254000      1.35e-04\npolygon 782              95   682891000      7.49e-04\npolygon 783              29    63798400      7.00e-05\npolygon 784             137   934702000      1.03e-03\npolygon 785             196  1275510000      1.40e-03\npolygon 786             312  3825490000      4.20e-03\npolygon 787             430  3869200000      4.24e-03\npolygon 788             251  1904040000      2.09e-03\npolygon 789             106   519190000      5.70e-04\npolygon 790             170  2331980000      2.56e-03\npolygon 791             115   393773000      4.32e-04\npolygon 792             110  1030270000      1.13e-03\npolygon 793             228  2685640000      2.95e-03\npolygon 794             175   699163000      7.67e-04\nenclosing rectangle: [26662.7, 1344157] x [30523.4, 1096029.4] units\n                     (1317000 x 1066000 units)\nWindow area = 9.11598e+11 square units\nFraction of frame area: 0.649\n\nsummary(osun_owin)\n\nWindow: polygonal boundary\n30 separate polygons (no holes)\n            vertices      area relative.area\npolygon 1        204 766084000       0.08870\npolygon 2         81 304399000       0.03520\npolygon 3         97 465688000       0.05390\npolygon 4        124 373051000       0.04320\npolygon 5         60 149473000       0.01730\npolygon 6         84 144820000       0.01680\npolygon 7         50 102243000       0.01180\npolygon 8         72 216002000       0.02500\npolygon 9        112 269897000       0.03130\npolygon 10       125 365142000       0.04230\npolygon 11        83 111191000       0.01290\npolygon 12       126 192557000       0.02230\npolygon 13       219 904397000       0.10500\npolygon 14       174 741131000       0.08580\npolygon 15        81 138742000       0.01610\npolygon 16        65 119452000       0.01380\npolygon 17        90 280205000       0.03240\npolygon 18        69  69814600       0.00808\npolygon 19        69  42727500       0.00495\npolygon 20        49  30458800       0.00353\npolygon 21        62 263505000       0.03050\npolygon 22        93 438930000       0.05080\npolygon 23        87 274127000       0.03170\npolygon 24       105 509979000       0.05910\npolygon 25        98 292058000       0.03380\npolygon 26        64 327765000       0.03800\npolygon 27       133 108945000       0.01260\npolygon 28       122 462169000       0.05350\npolygon 29        94 109715000       0.01270\npolygon 30        95  61239800       0.00709\nenclosing rectangle: [176503.22, 291043.82] x [331434.7, 454520.1] units\n                     (114500 x 123100 units)\nWindow area = 8635910000 square units\nFraction of frame area: 0.613\n\n\n\n\nCombining waterpoints with Osun map\nFunctional waterpoints\n\nwp_functional_ppp_osun = wp_functional_ppp[osun_owin]\nplot(wp_functional_ppp_osun)\n\n\n\n\nLoading packages\n\npacman::p_load(maptools, sf, raster, spatstat, tmap)\n\nPrepping KDE plot\n\nkde_wp_functional_bw <- density(wp_functional_ppp_osun,\n                              sigma=bw.diggle,\n                              edge=TRUE,\n                              kernel=\"gaussian\")\n\nPlotting KDE for functional waterpoints\n\nplot(kde_wp_functional_bw)\n\n\n\n\nBandwidth used\n\nbw <- bw.diggle(wp_functional_ppp_osun)\nbw\n\n   sigma \n252.1687 \n\n\nRe-scaling data\n\nwp_functional_ppp_osun.km <- rescale(wp_functional_ppp_osun, 1000, \"km\")\n\n\nkde_wp_functional_bw <- density(wp_functional_ppp_osun.km, sigma=bw.diggle, edge=TRUE, kernel=\"gaussian\")\nplot(kde_wp_functional_bw)\n\n\n\n\nWorking with different kernel methods: Gaussian, Epanechnikov, Quartic and Discs\n\npar(mfrow=c(2,2))\nplot(density(wp_functional_ppp_osun.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"gaussian\"), \n     main=\"Gaussian\")\nplot(density(wp_functional_ppp_osun.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"epanechnikov\"), \n     main=\"Epanechnikov\")\nplot(density(wp_functional_ppp_osun.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"quartic\"), \n     main=\"Quartic\")\nplot(density(wp_functional_ppp_osun.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"disc\"), \n     main=\"Disc\")\n\n\n\n\nNon-functional waterpoints\n\nwp_nonfunctional_ppp_osun = wp_nonfunctional_ppp[osun_owin]\nplot(wp_nonfunctional_ppp_osun)\n\n\n\n\n\nkde_wp_nonfunctional_bw <- density(wp_nonfunctional_ppp_osun,\n                              sigma=bw.diggle,\n                              edge=TRUE,\n                            kernel=\"gaussian\") \n\n\nplot(kde_wp_nonfunctional_bw)\n\n\n\n\nComputing sigma\n\nbw <- bw.diggle(wp_nonfunctional_ppp_osun)\nbw\n\n   sigma \n308.2061 \n\n\nRe-scaling data\n\nwp_nonfunctional_ppp_osun.km <- rescale(wp_nonfunctional_ppp_osun, 1000, \"km\")\n\nPlotting re-scaled data\n\nkde_wp_nonfunctional_bw <- density(wp_nonfunctional_ppp_osun.km, sigma=bw.diggle, edge=TRUE, kernel=\"gaussian\")\nplot(kde_wp_nonfunctional_bw)\n\n\n\n\nWorking with different kernel methods: Gaussian, Epanechnikov, Quartic and Discs\n\npar(mfrow=c(2,2))\nplot(density(wp_nonfunctional_ppp_osun.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"gaussian\"), \n     main=\"Gaussian\")\nplot(density(wp_nonfunctional_ppp_osun.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"epanechnikov\"), \n     main=\"Epanechnikov\")\nplot(density(wp_nonfunctional_ppp_osun.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"quartic\"), \n     main=\"Quartic\")\nplot(density(wp_nonfunctional_ppp_osun.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"disc\"), \n     main=\"Disc\")\n\n\n\n\nKernel density maps on openstreetmap of Osun State, Nigeria\n\ntmap_mode('view')\ntm_shape(wp_functional) +\n    tm_dots(alpha=0.4, \n            size=0.05)\n\n\n\n\n\n\nConverting functional waterpoints gridded output into raster\n\ngridded_kde_wp_functional_bw <- as.SpatialGridDataFrame.im(kde_wp_functional_bw)\nspplot(gridded_kde_wp_functional_bw)\n\n\n\n\n\nkde_wp_functional_bw_raster <- raster(gridded_kde_wp_functional_bw)\n\n\nkde_wp_functional_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.8948485, 0.9616045  (x, y)\nextent     : 176.5032, 291.0438, 331.4347, 454.5201  (xmin, xmax, ymin, ymax)\ncrs        : NA \nsource     : memory\nnames      : v \nvalues     : -5.092436e-15, 25.49435  (min, max)\n\n\n\nprojection(kde_wp_functional_bw_raster) <- CRS(\"+init=EPSG:26392\")\nkde_wp_functional_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.8948485, 0.9616045  (x, y)\nextent     : 176.5032, 291.0438, 331.4347, 454.5201  (xmin, xmax, ymin, ymax)\ncrs        : +init=EPSG:26392 \nsource     : memory\nnames      : v \nvalues     : -5.092436e-15, 25.49435  (min, max)\n\n\nPlotting raster map\n\ntm_shape(kde_wp_functional_bw_raster) + \ntm_basemap(\"OpenStreetMap\") +\n  tm_raster(\"v\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\"), frame = FALSE)\n\n\n\n\n\nConverting nonfunctional waterpoints gridded output into raster\n\ngridded_kde_wp_nonfunctional_bw <- as.SpatialGridDataFrame.im(kde_wp_nonfunctional_bw)\nspplot(gridded_kde_wp_nonfunctional_bw)\n\n\n\n\n\nkde_wp_nonfunctional_bw_raster <- raster(gridded_kde_wp_nonfunctional_bw)\n\n\nkde_wp_nonfunctional_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.8948485, 0.9616045  (x, y)\nextent     : 176.5032, 291.0438, 331.4347, 454.5201  (xmin, xmax, ymin, ymax)\ncrs        : NA \nsource     : memory\nnames      : v \nvalues     : -3.925434e-15, 20.49412  (min, max)\n\n\nChanging projection\n\nprojection(kde_wp_nonfunctional_bw_raster) <- CRS(\"+init=EPSG:26392\")\nkde_wp_nonfunctional_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.8948485, 0.9616045  (x, y)\nextent     : 176.5032, 291.0438, 331.4347, 454.5201  (xmin, xmax, ymin, ymax)\ncrs        : +init=EPSG:26392 \nsource     : memory\nnames      : v \nvalues     : -3.925434e-15, 20.49412  (min, max)\n\n\n\ntm_shape(kde_wp_nonfunctional_bw_raster) + \n  tm_basemap(\"OpenStreetMap\") +\n  tm_raster(\"v\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\"), frame = FALSE)\n\n\n\n\n\n\n\nAnalysis:\nFrom the plots above, we can observe that both the functional and nonfunctional waterpoints seem to scatter unevenly through the whole of Osun state in Nigeria. For the functional waterpoints, they seem to gather around the top of Osun state in Nigeria (north of Osun), leaving the other areas of Osun to have reduced accessibility to clean water points for consumption. For the nonfunctional waterpoints, they seem to be scattered around the whole Osun state unevenly as well, with some concentration of nonfunctional waterpoints at the top (north of Osun) and centre (Osun central).\nAdvantages of Kernel Density Map over point maps, is that it increases the visibility of the areas with higher densities of, in this case functional/nonfunctional waterpoints. Areas with higher densities of functional/nonfunctional waterpoints can be easily pin-pointed out with the darker colour intensities on the Kernel Density Map instead of having multiple points stacked together on the point maps and having to zoom in to see the actual points.\n\n\nNearest Neighbour Analysis: Clark and Evans Test\nFunctional waterpoints\n\nclarkevans.test(wp_functional_ppp,\n                correction=\"none\",\n                clipregion=\"osun_owin\",\n                alternative=c(\"clustered\"),\n                nsim=99)\n\n\n    Clark-Evans test\n    No edge correction\n    Monte Carlo test based on 99 simulations of CSR with fixed n\n\ndata:  wp_functional_ppp\nR = 0.38922, p-value = 0.01\nalternative hypothesis: clustered (R < 1)\n\n\nNonfunctional waterpoints\n\nclarkevans.test(wp_nonfunctional_ppp,\n                correction=\"none\",\n                clipregion=\"osun_owin\",\n                alternative=c(\"clustered\"),\n                nsim=99)\n\n\n    Clark-Evans test\n    No edge correction\n    Monte Carlo test based on 99 simulations of CSR with fixed n\n\ndata:  wp_nonfunctional_ppp\nR = 0.37112, p-value = 0.01\nalternative hypothesis: clustered (R < 1)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#second-order-spatial-point-patterns-analysis",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#second-order-spatial-point-patterns-analysis",
    "title": "Take-Home Exercise 01",
    "section": "Second-order Spatial Point Patterns Analysis",
    "text": "Second-order Spatial Point Patterns Analysis\n\nAnalysing Spatial Point Process Using L-Function\nComputing L Function estimation of Functional Waterpoints\n\nL_wp_functional = Lest(wp_functional_ppp, correction = \"Ripley\")\nplot(L_wp_functional, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\")\n\n\n\n\nPerforming Complete Spatial Randomness Test of Functional Waterpoints\nHypothesis:\nHo = The distribution of functional waterpoints in Osun, Nigeria are randomly distributed.\nH1= The distribution of functional waterpoints in Osun, Nigeria are not randomly distributed.\nConfidence Level:\nThe null hypothesis will be rejected if p-value if smaller than alpha value of 0.001.\n\nL_wp_functional.csr <- envelope(wp_functional_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98,  99.\n\nDone.\n\n\n\nplot(L_wp_functional.csr, . - r ~ r, xlab=\"d\", ylab=\"L(d)-r\")\n\n\n\n\nComputing L Function estimation of Nonfunctional Waterpoints\n\nL_wp_nonfunctional = Lest(wp_nonfunctional_ppp, correction = \"Ripley\")\nplot(L_wp_nonfunctional, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\")\n\n\n\n\nPerforming Complete Spatial Randomness Test of Nonfunctional Waterpoints\nHypothesis:\nHo = The distribution of non-functional waterpoints in Osun, Nigeria are randomly distributed.\nH1= The distribution of non-functional waterpoints in Osun, Nigeria are not randomly distributed.\nConfidence Level:\nThe null hypothesis will be rejected if p-value if smaller than alpha value of 0.001.\n\nL_wp_nonfunctional.csr <- envelope(wp_nonfunctional_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98,  99.\n\nDone.\n\n\n\nplot(L_wp_nonfunctional.csr, . - r ~ r, xlab=\"d\", ylab=\"L(d)-r\")\n\n\n\n\nAnalysis:\nThe L function for both functional and nonfunctional waterpoints have the same shape of an exponential curve. Since the L function is a form of descriptive statistics generally used to determine whether points have a random, dispersed or clustered distribution pattern at certain scale, we can conclude that there are some forms of clustering for both the functional and nonfunctional waterpoints in Osun, Nigeria, at 99% confidence interval."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#spatial-correlation-analysis",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#spatial-correlation-analysis",
    "title": "Take-Home Exercise 01",
    "section": "Spatial Correlation Analysis",
    "text": "Spatial Correlation Analysis\nI will be analysis the co-location between the functional and non-functional water points’ distribution, using the LCLQ method.\nHypothesis:\nHo = Functional waterpoints are not co-located with nonfunctional water points.\nH1= Functional waterpoints are co-located with nonfunctional water points.\nConfidence Level:\nThe null hypothesis will be rejected if p-value if smaller than alpha value of 0.05\nInstalling package\n\npacman::p_load(tidyverse, tmap, sf, sfdep) \n\nPreparing nearest neighbours list\nDetermine the k (i.e. 6) nearest neighbours for given point geometry\n\nnb <- include_self(\n  st_knn(st_geometry(wp_sf), 6))\n\nComputing kernel weights\nDerive a weights list by using a kernel function\n\nwt <- st_kernel_weights(nb, \n                        wp_sf, \n                        \"gaussian\", \n                        adaptive = TRUE)\n\nConverting functional and nonfunctional waterpoints into vectors\n\nA <- wp_functional$`#status_clean`\nB <- wp_nonfunctional$`#status_clean`\n\nComputing LCLQ values\n\nLCLQ <- local_colocation(A,\n                         B,\n                         nb,\n                         wt,\n                         49)\n\nJoining output table\n\nLCLQ_wp <- cbind(wp_sf, LCLQ)\n\nPlotting LCLQ values\n\ntmap_mode(\"view\")\ntm_shape(LCLQ_wp)+ \n  tm_dots(col = \"Non.Functional\",\n             size = 0.01,\n             border.col = \"black\",\n          scale=0.15,\n             border.lwd = 0.5) +\n  tm_view(set.zoom.limits = c(12, 16))\n\n\n\n\n\n\nAnalysis:\nAs we can observe from the map plotted above, waterpoints with their LCLQ value of 0.7 to 1.1 (in yellow to brown) are displayed. We can conclude that our null hypothesis is true; that functional waterpoints are not co-located with nonfunctional water points in Osun state (Nigeria)."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html",
    "title": "Take-Home Exercise 02",
    "section": "",
    "text": "pacman::p_load(tidyverse, tmap, sf, spdep, sfdep, readxl) \n\n\n\n\nGeospatial\n\njakarta <- st_read(dsn = \"data\", \n                 layer=\"BATAS_DESA_DESEMBER_2019_DUKCAPIL_DKI_JAKARTA\") %>%\n  st_transform(crs = 23845)\n\nReading layer `BATAS_DESA_DESEMBER_2019_DUKCAPIL_DKI_JAKARTA' from data source \n  `C:\\xinyeehow\\IS415-GAA\\Take-Home_Ex\\Take-Home_Ex02\\data' using driver `ESRI Shapefile'\nSimple feature collection with 269 features and 161 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 106.3831 ymin: -6.370815 xmax: 106.9728 ymax: -5.184322\nGeodetic CRS:  WGS 84\n\n\nAspatial - Vaccination rates of Jakarta from July 2021 to June 2022 (data taken from every first day of the month)\n\nvac_status_july <- read_excel(\"data/July2021.xlsx\")\n\n\nvac_status_july\n\n# A tibble: 268 × 21\n   KODE KELURA…¹ WILAY…² KECAM…³ KELUR…⁴ SASARAN BELUM…⁵ JUMLA…⁶ JUMLA…⁷ TOTAL…⁸\n   <chr>         <chr>   <chr>   <chr>     <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n 1 <NA>          <NA>    <NA>    TOTAL   7739060 5041111 2696017 1181740 3877757\n 2 3172051003    JAKART… PADEMA… ANCOL     20393   13272    7114    3287   10401\n 3 3173041007    JAKART… TAMBORA ANGKE     25785   16477    9299    3221   12520\n 4 3175041005    JAKART… KRAMAT… BALE K…   25158   18849    6301    2644    8945\n 5 3175031003    JAKART… JATINE… BALI M…    8683    5743    2937    1517    4454\n 6 3175101006    JAKART… CIPAYU… BAMBU …   22768   15407    7357    3985   11342\n 7 3174031002    JAKART… MAMPAN… BANGKA    18930   12503    6421    2704    9125\n 8 3175051002    JAKART… PASAR … BARU      20267   11268    8982    4674   13656\n 9 3175041004    JAKART… KRAMAT… BATU A…   41389   30358   11020    5254   16274\n10 3171071002    JAKART… TANAH … BENDUN…   19008   11502    7499    3566   11065\n# … with 258 more rows, 12 more variables: `LANSIA\\r\\nDOSIS 1` <dbl>,\n#   `LANSIA\\r\\nDOSIS 2` <dbl>, `LANSIA TOTAL \\r\\nVAKSIN DIBERIKAN` <dbl>,\n#   `PELAYAN PUBLIK\\r\\nDOSIS 1` <dbl>, `PELAYAN PUBLIK\\r\\nDOSIS 2` <dbl>,\n#   `PELAYAN PUBLIK TOTAL\\r\\nVAKSIN DIBERIKAN` <dbl>,\n#   `GOTONG ROYONG\\r\\nDOSIS 1` <dbl>, `GOTONG ROYONG\\r\\nDOSIS 2` <dbl>,\n#   `GOTONG ROYONG TOTAL\\r\\nVAKSIN DIBERIKAN` <dbl>,\n#   `TENAGA KESEHATAN\\r\\nDOSIS 1` <dbl>, `TENAGA KESEHATAN\\r\\nDOSIS 2` <dbl>, …\n\n\n\nfiles <- c(\"data/July2021.xlsx\",\"data/August2021.xlsx\", \"data/September2021.xlsx\", \"data/October2021.xlsx\", \"data/November2021.xlsx\", \"data/December2021.xlsx\", \"data/January2022.xlsx\", \"data/February2022.xlsx\", \"data/March2022.xlsx\", \"data/April2022.xlsx\", \"data/May2022.xlsx\", \"data/June2022.xlsx\")\nnames <- c(\"july\", \"august\", \"september\", \"october\", \"november\", \"december\", \"january\", \"february\", \"march\", \"april\", \"may\", \"june\")\n\nresult <- list()\nfor (i in seq_along(files)) {\n  result[names[i]] <- read_excel(path = files[i])\n}\n\n\nresult\n\n$july\n  [1] NA           \"3172051003\" \"3173041007\" \"3175041005\" \"3175031003\"\n  [6] \"3175101006\" \"3174031002\" \"3175051002\" \"3175041004\" \"3171071002\"\n [11] \"3175031002\" \"3174101002\" \"3174011005\" \"3171041006\" \"3175061007\"\n [16] \"3175061004\" \"3175041007\" \"3175101008\" \"3171031006\" \"3171051002\"\n [21] \"3171051001\" \"3173011001\" \"3173011006\" \"3175091002\" \"3171011002\"\n [26] \"3174091003\" \"3175051003\" \"3171061003\" \"3174081006\" \"3174061001\"\n [31] \"3174041003\" \"3175101002\" \"3175041006\" \"3172041001\" \"3175101001\"\n [36] \"3174091006\" \"3174061005\" \"3174071010\" \"3175021003\" \"3175031007\"\n [41] \"3175031008\" \"3175031005\" \"3175081005\" \"3175031006\" \"3174051003\"\n [46] \"3175091001\" \"3175041003\" \"3175071001\" \"3174081004\" \"3173051005\"\n [51] \"3173011002\" \"3171011006\" \"3173041011\" \"3173041003\" \"3171081003\"\n [56] \"3171011001\" \"3174061004\" \"3174071009\" \"3175051001\" \"3171071001\"\n [61] \"3173031007\" \"3171061004\" \"3173021001\" \"3174051005\" \"3174051004\"\n [66] \"3174021007\" \"3174071002\" \"3171031005\" \"3171021004\" \"3175081004\"\n [71] \"3171031003\" \"3174091001\" \"3175021007\" \"3174041002\" \"3173071004\"\n [76] \"3175061001\" \"3175021004\" \"3173021004\" \"3173021006\" \"3173041006\"\n [81] \"3173041008\" \"3173081005\" \"3171081001\" \"3173041002\" \"3172041004\"\n [86] \"3174081002\" \"3173061001\" \"3175051004\" \"3173061004\" \"3172011002\"\n [91] \"3171071007\" \"3175031001\" \"3171081002\" \"3175041002\" \"3173011005\"\n [96] \"3172011003\" \"3171021002\" \"3174021004\" \"3174021003\" \"3174021002\"\n[101] \"3171071003\" \"3171021003\" \"3175011003\" \"3175021006\" \"3173031006\"\n[106] \"3174041007\" \"3174051006\" \"3174051001\" \"3174011004\" \"3172021005\"\n[111] \"3173051001\" \"3171071006\" \"3171011005\" \"3171031002\" \"3175011005\"\n[116] \"3171071005\" \"3175081003\" \"3171061005\" \"3173011004\" \"3173051007\"\n[121] \"3173051006\" \"3173051004\" \"3175091003\" \"3172061003\" \"3172061001\"\n[126] \"3173071005\" \"3171031001\" \"3173081006\" \"3173081001\" \"3171041002\"\n[131] \"3173041005\" \"3175071003\" \"3172031001\" \"3173071006\" \"3173071003\"\n[136] \"3171041004\" \"3175041001\" \"3174071003\" \"3173031002\" \"3174031005\"\n[141] \"3174021008\" \"3171041005\" \"3172031003\" \"3174061002\" \"3174091004\"\n[146] \"3175101007\" \"3175081001\" \"3175071006\" \"3175071005\" \"3174031001\"\n[151] \"3173031005\" \"3171021005\" \"3174011007\" \"3174011006\" \"3173031003\"\n[156] \"3172041003\" \"3174071001\" \"3171061001\" \"3174021005\" \"3174011003\"\n[161] \"3173081003\" \"3173081002\" \"3175101004\" \"3172051002\" \"3172051001\"\n[166] \"3175011004\" \"3173071001\" \"3174081001\" \"3172021003\" \"3171021001\"\n[171] \"3174021006\" \"3174041001\" \"3171041003\" \"3173061005\" \"3171061002\"\n[176] \"3172061002\" \"3172011004\" \"3174041006\" \"3174041005\" \"3175051005\"\n[181] \"3173041009\" \"3174031003\" \"3174081005\" \"3175061003\" \"3172011001\"\n[186] \"3174101001\" \"3171071004\" \"3174071008\" \"3171011004\" \"3171011003\"\n[191] \"3174101004\" \"3174101003\" \"3175081002\" \"3173031008\" \"3175011001\"\n[196] \"3175021002\" \"3172011005\" \"3175071002\" \"3175071004\" \"3175071007\"\n[201] \"3174061003\" \"3174051002\" \"3175101003\" \"3101011003\" \"3101011002\"\n[206] \"3101011001\" \"3101021003\" \"3101021002\" \"3101021001\" \"3174071007\"\n[211] \"3175021001\" \"3175061005\" \"3174041004\" \"3175091005\" \"3172031006\"\n[216] \"3172031004\" \"3174071005\" \"3173011003\" \"3175031004\" \"3174081003\"\n[221] \"3175061002\" \"3175021005\" \"3171051003\" \"3173041010\" \"3172041006\"\n[226] \"3174071004\" \"3173061002\" \"3172041007\" \"3172041005\" \"3174071006\"\n[231] \"3171041001\" \"3171031004\" \"3174021001\" \"3175101005\" \"3173071002\"\n[236] \"3173081004\" \"3174091002\" \"3173051003\" \"3173051002\" \"3172041002\"\n[241] \"3171031007\" \"3172021004\" \"3172021006\" \"3172021002\" \"3175091004\"\n[246] \"3173031001\" \"3173041001\" \"3173041004\" \"3171081004\" \"3173031004\"\n[251] \"3174091005\" \"3173021005\" \"3173021002\" \"3172021001\" \"3174011002\"\n[256] \"3174011001\" \"3173061003\" \"3174031004\" \"3173021003\" \"3172031005\"\n[261] \"3172031002\" \"3175061006\" \"3174101005\" \"3175011006\" \"3175011002\"\n[266] \"3171031008\" \"3172021007\" \"3173021007\"\n\n$august\n  [1] NA           \"3172051003\" \"3173041007\" \"3175041005\" \"3175031003\"\n  [6] \"3175101006\" \"3174031002\" \"3175051002\" \"3175041004\" \"3171071002\"\n [11] \"3175031002\" \"3174101002\" \"3174011005\" \"3171041006\" \"3175061007\"\n [16] \"3175061004\" \"3175041007\" \"3175101008\" \"3171031006\" \"3171051002\"\n [21] \"3171051001\" \"3173011001\" \"3173011006\" \"3175091002\" \"3171011002\"\n [26] \"3174091003\" \"3175051003\" \"3171061003\" \"3174081006\" \"3174061001\"\n [31] \"3174041003\" \"3175101002\" \"3175041006\" \"3172041001\" \"3175101001\"\n [36] \"3174091006\" \"3174061005\" \"3174071010\" \"3175021003\" \"3175031007\"\n [41] \"3175031008\" \"3175031005\" \"3175081005\" \"3175031006\" \"3174051003\"\n [46] \"3175091001\" \"3175041003\" \"3175071001\" \"3174081004\" \"3173051005\"\n [51] \"3173011002\" \"3171011006\" \"3173041011\" \"3173041003\" \"3171081003\"\n [56] \"3171011001\" \"3174061004\" \"3174071009\" \"3175051001\" \"3171071001\"\n [61] \"3173031007\" \"3171061004\" \"3173021001\" \"3174051005\" \"3174051004\"\n [66] \"3174021007\" \"3174071002\" \"3171031005\" \"3171021004\" \"3175081004\"\n [71] \"3171031003\" \"3174091001\" \"3175021007\" \"3174041002\" \"3173071004\"\n [76] \"3175061001\" \"3175021004\" \"3173021004\" \"3173021006\" \"3173041006\"\n [81] \"3173041008\" \"3173081005\" \"3171081001\" \"3173041002\" \"3172041004\"\n [86] \"3174081002\" \"3173061001\" \"3175051004\" \"3173061004\" \"3172011002\"\n [91] \"3171071007\" \"3175031001\" \"3171081002\" \"3175041002\" \"3173011005\"\n [96] \"3172011003\" \"3171021002\" \"3174021004\" \"3174021003\" \"3174021002\"\n[101] \"3171071003\" \"3171021003\" \"3175011003\" \"3175021006\" \"3173031006\"\n[106] \"3174041007\" \"3174051006\" \"3174051001\" \"3174011004\" \"3172021005\"\n[111] \"3173051001\" \"3171071006\" \"3171011005\" \"3171031002\" \"3175011005\"\n[116] \"3171071005\" \"3175081003\" \"3171061005\" \"3173011004\" \"3173051007\"\n[121] \"3173051006\" \"3173051004\" \"3175091003\" \"3172061003\" \"3172061001\"\n[126] \"3173071005\" \"3171031001\" \"3173081006\" \"3173081001\" \"3171041002\"\n[131] \"3173041005\" \"3175071003\" \"3172031001\" \"3173071006\" \"3173071003\"\n[136] \"3171041004\" \"3175041001\" \"3174071003\" \"3173031002\" \"3174031005\"\n[141] \"3174021008\" \"3171041005\" \"3172031003\" \"3174061002\" \"3174091004\"\n[146] \"3175101007\" \"3175081001\" \"3175071006\" \"3175071005\" \"3174031001\"\n[151] \"3173031005\" \"3171021005\" \"3174011007\" \"3174011006\" \"3173031003\"\n[156] \"3172041003\" \"3174071001\" \"3171061001\" \"3174021005\" \"3174011003\"\n[161] \"3173081003\" \"3173081002\" \"3175101004\" \"3172051002\" \"3172051001\"\n[166] \"3175011004\" \"3173071001\" \"3174081001\" \"3172021003\" \"3171021001\"\n[171] \"3174021006\" \"3174041001\" \"3171041003\" \"3173061005\" \"3171061002\"\n[176] \"3172061002\" \"3172011004\" \"3174041006\" \"3174041005\" \"3175051005\"\n[181] \"3173041009\" \"3174031003\" \"3174081005\" \"3175061003\" \"3172011001\"\n[186] \"3174101001\" \"3171071004\" \"3174071008\" \"3171011004\" \"3171011003\"\n[191] \"3174101004\" \"3174101003\" \"3175081002\" \"3173031008\" \"3175011001\"\n[196] \"3175021002\" \"3172011005\" \"3175071002\" \"3175071004\" \"3175071007\"\n[201] \"3174061003\" \"3174051002\" \"3175101003\" \"3101011003\" \"3101011002\"\n[206] \"3101011001\" \"3101021003\" \"3101021002\" \"3101021001\" \"3174071007\"\n[211] \"3175021001\" \"3175061005\" \"3174041004\" \"3175091005\" \"3172031006\"\n[216] \"3172031004\" \"3174071005\" \"3173011003\" \"3175031004\" \"3174081003\"\n[221] \"3175061002\" \"3175021005\" \"3171051003\" \"3173041010\" \"3172041006\"\n[226] \"3174071004\" \"3173061002\" \"3172041007\" \"3172041005\" \"3174071006\"\n[231] \"3171041001\" \"3171031004\" \"3174021001\" \"3175101005\" \"3173071002\"\n[236] \"3173081004\" \"3174091002\" \"3173051003\" \"3173051002\" \"3172041002\"\n[241] \"3171031007\" \"3172021004\" \"3172021006\" \"3172021002\" \"3175091004\"\n[246] \"3173031001\" \"3173041001\" \"3173041004\" \"3171081004\" \"3173031004\"\n[251] \"3174091005\" \"3173021005\" \"3173021002\" \"3172021001\" \"3174011002\"\n[256] \"3174011001\" \"3173061003\" \"3174031004\" \"3173021003\" \"3172031005\"\n[261] \"3172031002\" \"3175061006\" \"3174101005\" \"3175011006\" \"3175011002\"\n[266] \"3171031008\" \"3172021007\" \"3173021007\"\n\n$september\n  [1] NA           \"3172051003\" \"3173041007\" \"3175041005\" \"3175031003\"\n  [6] \"3175101006\" \"3174031002\" \"3175051002\" \"3175041004\" \"3171071002\"\n [11] \"3175031002\" \"3174101002\" \"3174011005\" \"3171041006\" \"3175061007\"\n [16] \"3175061004\" \"3175041007\" \"3175101008\" \"3171031006\" \"3171051002\"\n [21] \"3171051001\" \"3173011001\" \"3173011006\" \"3175091002\" \"3171011002\"\n [26] \"3174091003\" \"3175051003\" \"3171061003\" \"3174081006\" \"3174061001\"\n [31] \"3174041003\" \"3175101002\" \"3175041006\" \"3172041001\" \"3175101001\"\n [36] \"3174091006\" \"3174061005\" \"3174071010\" \"3175021003\" \"3175031007\"\n [41] \"3175031008\" \"3175031005\" \"3175081005\" \"3175031006\" \"3174051003\"\n [46] \"3175091001\" \"3175041003\" \"3175071001\" \"3174081004\" \"3173051005\"\n [51] \"3173011002\" \"3171011006\" \"3173041011\" \"3173041003\" \"3171081003\"\n [56] \"3171011001\" \"3174061004\" \"3174071009\" \"3175051001\" \"3171071001\"\n [61] \"3173031007\" \"3171061004\" \"3173021001\" \"3174051005\" \"3174051004\"\n [66] \"3174021007\" \"3174071002\" \"3171031005\" \"3171021004\" \"3175081004\"\n [71] \"3171031003\" \"3174091001\" \"3175021007\" \"3174041002\" \"3173071004\"\n [76] \"3175061001\" \"3175021004\" \"3173021004\" \"3173021006\" \"3173041006\"\n [81] \"3173041008\" \"3173081005\" \"3171081001\" \"3173041002\" \"3172041004\"\n [86] \"3174081002\" \"3173061001\" \"3175051004\" \"3173061004\" \"3172011002\"\n [91] \"3171071007\" \"3175031001\" \"3171081002\" \"3175041002\" \"3173011005\"\n [96] \"3172011003\" \"3171021002\" \"3174021004\" \"3174021003\" \"3174021002\"\n[101] \"3171071003\" \"3171021003\" \"3175011003\" \"3175021006\" \"3173031006\"\n[106] \"3174041007\" \"3174051006\" \"3174051001\" \"3174011004\" \"3172021005\"\n[111] \"3173051001\" \"3171071006\" \"3171011005\" \"3171031002\" \"3175011005\"\n[116] \"3171071005\" \"3175081003\" \"3171061005\" \"3173011004\" \"3173051007\"\n[121] \"3173051006\" \"3173051004\" \"3175091003\" \"3172061003\" \"3172061001\"\n[126] \"3173071005\" \"3171031001\" \"3173081006\" \"3173081001\" \"3171041002\"\n[131] \"3173041005\" \"3175071003\" \"3172031001\" \"3173071006\" \"3173071003\"\n[136] \"3171041004\" \"3175041001\" \"3174071003\" \"3173031002\" \"3174031005\"\n[141] \"3174021008\" \"3171041005\" \"3172031003\" \"3174061002\" \"3174091004\"\n[146] \"3175101007\" \"3175081001\" \"3175071006\" \"3175071005\" \"3174031001\"\n[151] \"3173031005\" \"3171021005\" \"3174011007\" \"3174011006\" \"3173031003\"\n[156] \"3172041003\" \"3174071001\" \"3171061001\" \"3174021005\" \"3174011003\"\n[161] \"3173081003\" \"3173081002\" \"3175101004\" \"3172051002\" \"3172051001\"\n[166] \"3175011004\" \"3173071001\" \"3174081001\" \"3172021003\" \"3171021001\"\n[171] \"3174021006\" \"3174041001\" \"3171041003\" \"3173061005\" \"3171061002\"\n[176] \"3172061002\" \"3172011004\" \"3174041006\" \"3174041005\" \"3175051005\"\n[181] \"3173041009\" \"3174031003\" \"3174081005\" \"3175061003\" \"3172011001\"\n[186] \"3174101001\" \"3171071004\" \"3174071008\" \"3171011004\" \"3171011003\"\n[191] \"3174101004\" \"3174101003\" \"3175081002\" \"3173031008\" \"3175011001\"\n[196] \"3175021002\" \"3172011005\" \"3175071002\" \"3175071004\" \"3175071007\"\n[201] \"3174061003\" \"3174051002\" \"3175101003\" \"3101011003\" \"3101011002\"\n[206] \"3101011001\" \"3101021003\" \"3101021002\" \"3101021001\" \"3174071007\"\n[211] \"3175021001\" \"3175061005\" \"3174041004\" \"3175091005\" \"3172031006\"\n[216] \"3172031004\" \"3174071005\" \"3173011003\" \"3175031004\" \"3174081003\"\n[221] \"3175061002\" \"3175021005\" \"3171051003\" \"3173041010\" \"3172041006\"\n[226] \"3174071004\" \"3173061002\" \"3172041007\" \"3172041005\" \"3174071006\"\n[231] \"3171041001\" \"3171031004\" \"3174021001\" \"3175101005\" \"3173071002\"\n[236] \"3173081004\" \"3174091002\" \"3173051003\" \"3173051002\" \"3172041002\"\n[241] \"3171031007\" \"3172021004\" \"3172021006\" \"3172021002\" \"3175091004\"\n[246] \"3173031001\" \"3173041001\" \"3173041004\" \"3171081004\" \"3173031004\"\n[251] \"3174091005\" \"3173021005\" \"3173021002\" \"3172021001\" \"3174011002\"\n[256] \"3174011001\" \"3173061003\" \"3174031004\" \"3173021003\" \"3172031005\"\n[261] \"3172031002\" \"3175061006\" \"3174101005\" \"3175011006\" \"3175011002\"\n[266] \"3171031008\" \"3172021007\" \"3173021007\"\n\n$october\n  [1] NA           \"3172051003\" \"3173041007\" \"3175041005\" \"3175031003\"\n  [6] \"3175101006\" \"3174031002\" \"3175051002\" \"3175041004\" \"3171071002\"\n [11] \"3175031002\" \"3174101002\" \"3174011005\" \"3171041006\" \"3175061007\"\n [16] \"3175061004\" \"3175041007\" \"3175101008\" \"3171031006\" \"3171051002\"\n [21] \"3171051001\" \"3173011001\" \"3173011006\" \"3175091002\" \"3171011002\"\n [26] \"3174091003\" \"3175051003\" \"3171061003\" \"3174081006\" \"3174061001\"\n [31] \"3174041003\" \"3175101002\" \"3175041006\" \"3172041001\" \"3175101001\"\n [36] \"3174091006\" \"3174061005\" \"3174071010\" \"3175021003\" \"3175031007\"\n [41] \"3175031008\" \"3175031005\" \"3175081005\" \"3175031006\" \"3174051003\"\n [46] \"3175091001\" \"3175041003\" \"3175071001\" \"3174081004\" \"3173051005\"\n [51] \"3173011002\" \"3171011006\" \"3173041011\" \"3173041003\" \"3171081003\"\n [56] \"3171011001\" \"3174061004\" \"3174071009\" \"3175051001\" \"3171071001\"\n [61] \"3173031007\" \"3171061004\" \"3173021001\" \"3174051005\" \"3174051004\"\n [66] \"3174021007\" \"3174071002\" \"3171031005\" \"3171021004\" \"3175081004\"\n [71] \"3171031003\" \"3174091001\" \"3175021007\" \"3174041002\" \"3173071004\"\n [76] \"3175061001\" \"3175021004\" \"3173021004\" \"3173021006\" \"3173041006\"\n [81] \"3173041008\" \"3173081005\" \"3171081001\" \"3173041002\" \"3172041004\"\n [86] \"3174081002\" \"3173061001\" \"3175051004\" \"3173061004\" \"3172011002\"\n [91] \"3171071007\" \"3175031001\" \"3171081002\" \"3175041002\" \"3173011005\"\n [96] \"3172011003\" \"3171021002\" \"3174021004\" \"3174021003\" \"3174021002\"\n[101] \"3171071003\" \"3171021003\" \"3175011003\" \"3175021006\" \"3173031006\"\n[106] \"3174041007\" \"3174051006\" \"3174051001\" \"3174011004\" \"3172021005\"\n[111] \"3173051001\" \"3171071006\" \"3171011005\" \"3171031002\" \"3175011005\"\n[116] \"3171071005\" \"3175081003\" \"3171061005\" \"3173011004\" \"3173051007\"\n[121] \"3173051006\" \"3173051004\" \"3175091003\" \"3172061003\" \"3172061001\"\n[126] \"3173071005\" \"3171031001\" \"3173081006\" \"3173081001\" \"3171041002\"\n[131] \"3173041005\" \"3175071003\" \"3172031001\" \"3173071006\" \"3173071003\"\n[136] \"3171041004\" \"3175041001\" \"3174071003\" \"3173031002\" \"3174031005\"\n[141] \"3174021008\" \"3171041005\" \"3172031003\" \"3174061002\" \"3174091004\"\n[146] \"3175101007\" \"3175081001\" \"3175071006\" \"3175071005\" \"3174031001\"\n[151] \"3173031005\" \"3171021005\" \"3174011007\" \"3174011006\" \"3173031003\"\n[156] \"3172041003\" \"3174071001\" \"3171061001\" \"3174021005\" \"3174011003\"\n[161] \"3173081003\" \"3173081002\" \"3175101004\" \"3172051002\" \"3172051001\"\n[166] \"3175011004\" \"3173071001\" \"3174081001\" \"3172021003\" \"3171021001\"\n[171] \"3174021006\" \"3174041001\" \"3171041003\" \"3173061005\" \"3171061002\"\n[176] \"3172061002\" \"3172011004\" \"3174041006\" \"3174041005\" \"3175051005\"\n[181] \"3173041009\" \"3174031003\" \"3174081005\" \"3175061003\" \"3172011001\"\n[186] \"3174101001\" \"3171071004\" \"3174071008\" \"3171011004\" \"3171011003\"\n[191] \"3174101004\" \"3174101003\" \"3175081002\" \"3173031008\" \"3175011001\"\n[196] \"3175021002\" \"3172011005\" \"3175071002\" \"3175071004\" \"3175071007\"\n[201] \"3174061003\" \"3174051002\" \"3175101003\" \"3101011003\" \"3101011002\"\n[206] \"3101011001\" \"3101021003\" \"3101021002\" \"3101021001\" \"3174071007\"\n[211] \"3175021001\" \"3175061005\" \"3174041004\" \"3175091005\" \"3172031006\"\n[216] \"3172031004\" \"3174071005\" \"3173011003\" \"3175031004\" \"3174081003\"\n[221] \"3175061002\" \"3175021005\" \"3171051003\" \"3173041010\" \"3172041006\"\n[226] \"3174071004\" \"3173061002\" \"3172041007\" \"3172041005\" \"3174071006\"\n[231] \"3171041001\" \"3171031004\" \"3174021001\" \"3175101005\" \"3173071002\"\n[236] \"3173081004\" \"3174091002\" \"3173051003\" \"3173051002\" \"3172041002\"\n[241] \"3171031007\" \"3172021004\" \"3172021006\" \"3172021002\" \"3175091004\"\n[246] \"3173031001\" \"3173041001\" \"3173041004\" \"3171081004\" \"3173031004\"\n[251] \"3174091005\" \"3173021005\" \"3173021002\" \"3172021001\" \"3174011002\"\n[256] \"3174011001\" \"3173061003\" \"3174031004\" \"3173021003\" \"3172031005\"\n[261] \"3172031002\" \"3175061006\" \"3174101005\" \"3175011006\" \"3175011002\"\n[266] \"3171031008\" \"3172021007\" \"3173021007\"\n\n$november\n  [1] NA           \"3172051003\" \"3173041007\" \"3175041005\" \"3175031003\"\n  [6] \"3175101006\" \"3174031002\" \"3175051002\" \"3175041004\" \"3171071002\"\n [11] \"3175031002\" \"3174101002\" \"3174011005\" \"3171041006\" \"3175061007\"\n [16] \"3175061004\" \"3175041007\" \"3175101008\" \"3171031006\" \"3171051002\"\n [21] \"3171051001\" \"3173011001\" \"3173011006\" \"3175091002\" \"3171011002\"\n [26] \"3174091003\" \"3175051003\" \"3171061003\" \"3174081006\" \"3174061001\"\n [31] \"3174041003\" \"3175101002\" \"3175041006\" \"3172041001\" \"3175101001\"\n [36] \"3174091006\" \"3174061005\" \"3174071010\" \"3175021003\" \"3175031007\"\n [41] \"3175031008\" \"3175031005\" \"3175081005\" \"3175031006\" \"3174051003\"\n [46] \"3175091001\" \"3175041003\" \"3175071001\" \"3174081004\" \"3173051005\"\n [51] \"3173011002\" \"3171011006\" \"3173041011\" \"3173041003\" \"3171081003\"\n [56] \"3171011001\" \"3174061004\" \"3174071009\" \"3175051001\" \"3171071001\"\n [61] \"3173031007\" \"3171061004\" \"3173021001\" \"3174051005\" \"3174051004\"\n [66] \"3174021007\" \"3174071002\" \"3171031005\" \"3171021004\" \"3175081004\"\n [71] \"3171031003\" \"3174091001\" \"3175021007\" \"3174041002\" \"3173071004\"\n [76] \"3175061001\" \"3175021004\" \"3173021004\" \"3173021006\" \"3173041006\"\n [81] \"3173041008\" \"3173081005\" \"3171081001\" \"3173041002\" \"3172041004\"\n [86] \"3174081002\" \"3173061001\" \"3175051004\" \"3173061004\" \"3172011002\"\n [91] \"3171071007\" \"3175031001\" \"3171081002\" \"3175041002\" \"3173011005\"\n [96] \"3172011003\" \"3171021002\" \"3174021004\" \"3174021003\" \"3174021002\"\n[101] \"3171071003\" \"3171021003\" \"3175011003\" \"3175021006\" \"3173031006\"\n[106] \"3174041007\" \"3174051006\" \"3174051001\" \"3174011004\" \"3172021005\"\n[111] \"3173051001\" \"3171071006\" \"3171011005\" \"3171031002\" \"3175011005\"\n[116] \"3171071005\" \"3175081003\" \"3171061005\" \"3173011004\" \"3173051007\"\n[121] \"3173051006\" \"3173051004\" \"3175091003\" \"3172061003\" \"3172061001\"\n[126] \"3173071005\" \"3171031001\" \"3173081006\" \"3173081001\" \"3171041002\"\n[131] \"3173041005\" \"3175071003\" \"3172031001\" \"3173071006\" \"3173071003\"\n[136] \"3171041004\" \"3175041001\" \"3174071003\" \"3173031002\" \"3174031005\"\n[141] \"3174021008\" \"3171041005\" \"3172031003\" \"3174061002\" \"3174091004\"\n[146] \"3175101007\" \"3175081001\" \"3175071006\" \"3175071005\" \"3174031001\"\n[151] \"3173031005\" \"3171021005\" \"3174011007\" \"3174011006\" \"3173031003\"\n[156] \"3172041003\" \"3174071001\" \"3171061001\" \"3174021005\" \"3174011003\"\n[161] \"3173081003\" \"3173081002\" \"3175101004\" \"3172051002\" \"3172051001\"\n[166] \"3175011004\" \"3173071001\" \"3174081001\" \"3172021003\" \"3171021001\"\n[171] \"3174021006\" \"3174041001\" \"3171041003\" \"3173061005\" \"3171061002\"\n[176] \"3172061002\" \"3172011004\" \"3174041006\" \"3174041005\" \"3175051005\"\n[181] \"3173041009\" \"3174031003\" \"3174081005\" \"3175061003\" \"3172011001\"\n[186] \"3174101001\" \"3171071004\" \"3174071008\" \"3171011004\" \"3171011003\"\n[191] \"3174101004\" \"3174101003\" \"3175081002\" \"3173031008\" \"3175011001\"\n[196] \"3175021002\" \"3172011005\" \"3175071002\" \"3175071004\" \"3175071007\"\n[201] \"3174061003\" \"3174051002\" \"3175101003\" \"3101011003\" \"3101011002\"\n[206] \"3101011001\" \"3101021003\" \"3101021002\" \"3101021001\" \"3174071007\"\n[211] \"3175021001\" \"3175061005\" \"3174041004\" \"3175091005\" \"3172031006\"\n[216] \"3172031004\" \"3174071005\" \"3173011003\" \"3175031004\" \"3174081003\"\n[221] \"3175061002\" \"3175021005\" \"3171051003\" \"3173041010\" \"3172041006\"\n[226] \"3174071004\" \"3173061002\" \"3172041007\" \"3172041005\" \"3174071006\"\n[231] \"3171041001\" \"3171031004\" \"3174021001\" \"3175101005\" \"3173071002\"\n[236] \"3173081004\" \"3174091002\" \"3173051003\" \"3173051002\" \"3172041002\"\n[241] \"3171031007\" \"3172021004\" \"3172021006\" \"3172021002\" \"3175091004\"\n[246] \"3173031001\" \"3173041001\" \"3173041004\" \"3171081004\" \"3173031004\"\n[251] \"3174091005\" \"3173021005\" \"3173021002\" \"3172021001\" \"3174011002\"\n[256] \"3174011001\" \"3173061003\" \"3174031004\" \"3173021003\" \"3172031005\"\n[261] \"3172031002\" \"3175061006\" \"3174101005\" \"3175011006\" \"3175011002\"\n[266] \"3171031008\" \"3172021007\" \"3173021007\"\n\n$december\n  [1] NA           \"3172051003\" \"3173041007\" \"3175041005\" \"3175031003\"\n  [6] \"3175101006\" \"3174031002\" \"3175051002\" \"3175041004\" \"3171071002\"\n [11] \"3175031002\" \"3174101002\" \"3174011005\" \"3171041006\" \"3175061007\"\n [16] \"3175061004\" \"3175041007\" \"3175101008\" \"3171031006\" \"3171051002\"\n [21] \"3171051001\" \"3173011001\" \"3173011006\" \"3175091002\" \"3171011002\"\n [26] \"3174091003\" \"3175051003\" \"3171061003\" \"3174081006\" \"3174061001\"\n [31] \"3174041003\" \"3175101002\" \"3175041006\" \"3172041001\" \"3175101001\"\n [36] \"3174091006\" \"3174061005\" \"3174071010\" \"3175021003\" \"3175031007\"\n [41] \"3175031008\" \"3175031005\" \"3175081005\" \"3175031006\" \"3174051003\"\n [46] \"3175091001\" \"3175041003\" \"3175071001\" \"3174081004\" \"3173051005\"\n [51] \"3173011002\" \"3171011006\" \"3173041011\" \"3173041003\" \"3171081003\"\n [56] \"3171011001\" \"3174061004\" \"3174071009\" \"3175051001\" \"3171071001\"\n [61] \"3173031007\" \"3171061004\" \"3173021001\" \"3174051005\" \"3174051004\"\n [66] \"3174021007\" \"3174071002\" \"3171031005\" \"3171021004\" \"3175081004\"\n [71] \"3171031003\" \"3174091001\" \"3175021007\" \"3174041002\" \"3173071004\"\n [76] \"3175061001\" \"3175021004\" \"3173021004\" \"3173021006\" \"3173041006\"\n [81] \"3173041008\" \"3173081005\" \"3171081001\" \"3173041002\" \"3172041004\"\n [86] \"3174081002\" \"3173061001\" \"3175051004\" \"3173061004\" \"3172011002\"\n [91] \"3171071007\" \"3175031001\" \"3171081002\" \"3175041002\" \"3173011005\"\n [96] \"3172011003\" \"3171021002\" \"3174021004\" \"3174021003\" \"3174021002\"\n[101] \"3171071003\" \"3171021003\" \"3175011003\" \"3175021006\" \"3173031006\"\n[106] \"3174041007\" \"3174051006\" \"3174051001\" \"3174011004\" \"3172021005\"\n[111] \"3173051001\" \"3171071006\" \"3171011005\" \"3171031002\" \"3175011005\"\n[116] \"3171071005\" \"3175081003\" \"3171061005\" \"3173011004\" \"3173051007\"\n[121] \"3173051006\" \"3173051004\" \"3175091003\" \"3172061003\" \"3172061001\"\n[126] \"3173071005\" \"3171031001\" \"3173081006\" \"3173081001\" \"3171041002\"\n[131] \"3173041005\" \"3175071003\" \"3172031001\" \"3173071006\" \"3173071003\"\n[136] \"3171041004\" \"3175041001\" \"3174071003\" \"3173031002\" \"3174031005\"\n[141] \"3174021008\" \"3171041005\" \"3172031003\" \"3174061002\" \"3174091004\"\n[146] \"3175101007\" \"3175081001\" \"3175071006\" \"3175071005\" \"3174031001\"\n[151] \"3173031005\" \"3171021005\" \"3174011007\" \"3174011006\" \"3173031003\"\n[156] \"3172041003\" \"3174071001\" \"3171061001\" \"3174021005\" \"3174011003\"\n[161] \"3173081003\" \"3173081002\" \"3175101004\" \"3172051002\" \"3172051001\"\n[166] \"3175011004\" \"3173071001\" \"3174081001\" \"3172021003\" \"3171021001\"\n[171] \"3174021006\" \"3174041001\" \"3171041003\" \"3173061005\" \"3171061002\"\n[176] \"3172061002\" \"3172011004\" \"3174041006\" \"3174041005\" \"3175051005\"\n[181] \"3173041009\" \"3174031003\" \"3174081005\" \"3175061003\" \"3172011001\"\n[186] \"3174101001\" \"3171071004\" \"3174071008\" \"3171011004\" \"3171011003\"\n[191] \"3174101004\" \"3174101003\" \"3175081002\" \"3173031008\" \"3175011001\"\n[196] \"3175021002\" \"3172011005\" \"3175071002\" \"3175071004\" \"3175071007\"\n[201] \"3174061003\" \"3174051002\" \"3175101003\" \"3101011003\" \"3101011002\"\n[206] \"3101011001\" \"3101021003\" \"3101021002\" \"3101021001\" \"3174071007\"\n[211] \"3175021001\" \"3175061005\" \"3174041004\" \"3175091005\" \"3172031006\"\n[216] \"3172031004\" \"3174071005\" \"3173011003\" \"3175031004\" \"3174081003\"\n[221] \"3175061002\" \"3175021005\" \"3171051003\" \"3173041010\" \"3172041006\"\n[226] \"3174071004\" \"3173061002\" \"3172041007\" \"3172041005\" \"3174071006\"\n[231] \"3171041001\" \"3171031004\" \"3174021001\" \"3175101005\" \"3173071002\"\n[236] \"3173081004\" \"3174091002\" \"3173051003\" \"3173051002\" \"3172041002\"\n[241] \"3171031007\" \"3172021004\" \"3172021006\" \"3172021002\" \"3175091004\"\n[246] \"3173031001\" \"3173041001\" \"3173041004\" \"3171081004\" \"3173031004\"\n[251] \"3174091005\" \"3173021005\" \"3173021002\" \"3172021001\" \"3174011002\"\n[256] \"3174011001\" \"3173061003\" \"3174031004\" \"3173021003\" \"3172031005\"\n[261] \"3172031002\" \"3175061006\" \"3174101005\" \"3175011006\" \"3175011002\"\n[266] \"3171031008\" \"3172021007\" \"3173021007\"\n\n$january\n  [1] NA           \"3172051003\" \"3173041007\" \"3175041005\" \"3175031003\"\n  [6] \"3175101006\" \"3174031002\" \"3175051002\" \"3175041004\" \"3171071002\"\n [11] \"3175031002\" \"3174101002\" \"3174011005\" \"3171041006\" \"3175061007\"\n [16] \"3175061004\" \"3175041007\" \"3175101008\" \"3171031006\" \"3171051002\"\n [21] \"3171051001\" \"3173011001\" \"3173011006\" \"3175091002\" \"3171011002\"\n [26] \"3174091003\" \"3175051003\" \"3171061003\" \"3174081006\" \"3174061001\"\n [31] \"3174041003\" \"3175101002\" \"3175041006\" \"3172041001\" \"3175101001\"\n [36] \"3174091006\" \"3174061005\" \"3174071010\" \"3175021003\" \"3175031007\"\n [41] \"3175031008\" \"3175031005\" \"3175081005\" \"3175031006\" \"3174051003\"\n [46] \"3175091001\" \"3175041003\" \"3175071001\" \"3174081004\" \"3173051005\"\n [51] \"3173011002\" \"3171011006\" \"3173041011\" \"3173041003\" \"3171081003\"\n [56] \"3171011001\" \"3174061004\" \"3174071009\" \"3175051001\" \"3171071001\"\n [61] \"3173031007\" \"3171061004\" \"3173021001\" \"3174051005\" \"3174051004\"\n [66] \"3174021007\" \"3174071002\" \"3171031005\" \"3171021004\" \"3175081004\"\n [71] \"3171031003\" \"3174091001\" \"3175021007\" \"3174041002\" \"3173071004\"\n [76] \"3175061001\" \"3175021004\" \"3173021004\" \"3173021006\" \"3173041006\"\n [81] \"3173041008\" \"3173081005\" \"3171081001\" \"3173041002\" \"3172041004\"\n [86] \"3174081002\" \"3173061001\" \"3175051004\" \"3173061004\" \"3172011002\"\n [91] \"3171071007\" \"3175031001\" \"3171081002\" \"3175041002\" \"3173011005\"\n [96] \"3172011003\" \"3171021002\" \"3174021004\" \"3174021003\" \"3174021002\"\n[101] \"3171071003\" \"3171021003\" \"3175011003\" \"3175021006\" \"3173031006\"\n[106] \"3174041007\" \"3174051006\" \"3174051001\" \"3174011004\" \"3172021005\"\n[111] \"3173051001\" \"3171071006\" \"3171011005\" \"3171031002\" \"3175011005\"\n[116] \"3171071005\" \"3175081003\" \"3171061005\" \"3173011004\" \"3173051007\"\n[121] \"3173051006\" \"3173051004\" \"3175091003\" \"3172061003\" \"3172061001\"\n[126] \"3173071005\" \"3171031001\" \"3173081006\" \"3173081001\" \"3171041002\"\n[131] \"3173041005\" \"3175071003\" \"3172031001\" \"3173071006\" \"3173071003\"\n[136] \"3171041004\" \"3175041001\" \"3174071003\" \"3173031002\" \"3174031005\"\n[141] \"3174021008\" \"3171041005\" \"3172031003\" \"3174061002\" \"3174091004\"\n[146] \"3175101007\" \"3175081001\" \"3175071006\" \"3175071005\" \"3174031001\"\n[151] \"3173031005\" \"3171021005\" \"3174011007\" \"3174011006\" \"3173031003\"\n[156] \"3172041003\" \"3174071001\" \"3171061001\" \"3174021005\" \"3174011003\"\n[161] \"3173081003\" \"3173081002\" \"3175101004\" \"3172051002\" \"3172051001\"\n[166] \"3175011004\" \"3173071001\" \"3174081001\" \"3172021003\" \"3171021001\"\n[171] \"3174021006\" \"3174041001\" \"3171041003\" \"3173061005\" \"3171061002\"\n[176] \"3172061002\" \"3172011004\" \"3174041006\" \"3174041005\" \"3175051005\"\n[181] \"3173041009\" \"3174031003\" \"3174081005\" \"3175061003\" \"3172011001\"\n[186] \"3174101001\" \"3171071004\" \"3174071008\" \"3171011004\" \"3171011003\"\n[191] \"3174101004\" \"3174101003\" \"3175081002\" \"3173031008\" \"3175011001\"\n[196] \"3175021002\" \"3172011005\" \"3175071002\" \"3175071004\" \"3175071007\"\n[201] \"3174061003\" \"3174051002\" \"3175101003\" \"3101011003\" \"3101011002\"\n[206] \"3101011001\" \"3101021003\" \"3101021002\" \"3101021001\" \"3174071007\"\n[211] \"3175021001\" \"3175061005\" \"3174041004\" \"3175091005\" \"3172031006\"\n[216] \"3172031004\" \"3174071005\" \"3173011003\" \"3175031004\" \"3174081003\"\n[221] \"3175061002\" \"3175021005\" \"3171051003\" \"3173041010\" \"3172041006\"\n[226] \"3174071004\" \"3173061002\" \"3172041007\" \"3172041005\" \"3174071006\"\n[231] \"3171041001\" \"3171031004\" \"3174021001\" \"3175101005\" \"3173071002\"\n[236] \"3173081004\" \"3174091002\" \"3173051003\" \"3173051002\" \"3172041002\"\n[241] \"3171031007\" \"3172021004\" \"3172021006\" \"3172021002\" \"3175091004\"\n[246] \"3173031001\" \"3173041001\" \"3173041004\" \"3171081004\" \"3173031004\"\n[251] \"3174091005\" \"3173021005\" \"3173021002\" \"3172021001\" \"3174011002\"\n[256] \"3174011001\" \"3173061003\" \"3174031004\" \"3173021003\" \"3172031005\"\n[261] \"3172031002\" \"3175061006\" \"3174101005\" \"3175011006\" \"3175011002\"\n[266] \"3171031008\" \"3172021007\" \"3173021007\"\n\n$february\n  [1] NA           \"3172051003\" \"3173041007\" \"3175041005\" \"3175031003\"\n  [6] \"3175101006\" \"3174031002\" \"3175051002\" \"3175041004\" \"3171071002\"\n [11] \"3175031002\" \"3174101002\" \"3174011005\" \"3171041006\" \"3175061007\"\n [16] \"3175061004\" \"3175041007\" \"3175101008\" \"3171031006\" \"3171051002\"\n [21] \"3171051001\" \"3173011001\" \"3173011006\" \"3175091002\" \"3171011002\"\n [26] \"3174091003\" \"3175051003\" \"3171061003\" \"3174081006\" \"3174061001\"\n [31] \"3174041003\" \"3175101002\" \"3175041006\" \"3172041001\" \"3175101001\"\n [36] \"3174091006\" \"3174061005\" \"3174071010\" \"3175021003\" \"3175031007\"\n [41] \"3175031008\" \"3175031005\" \"3175081005\" \"3175031006\" \"3174051003\"\n [46] \"3175091001\" \"3175041003\" \"3175071001\" \"3174081004\" \"3173051005\"\n [51] \"3173011002\" \"3171011006\" \"3173041011\" \"3173041003\" \"3171081003\"\n [56] \"3171011001\" \"3174061004\" \"3174071009\" \"3175051001\" \"3171071001\"\n [61] \"3173031007\" \"3171061004\" \"3173021001\" \"3174051005\" \"3174051004\"\n [66] \"3174021007\" \"3174071002\" \"3171031005\" \"3171021004\" \"3175081004\"\n [71] \"3171031003\" \"3174091001\" \"3175021007\" \"3174041002\" \"3173071004\"\n [76] \"3175061001\" \"3175021004\" \"3173021004\" \"3173021006\" \"3173041006\"\n [81] \"3173041008\" \"3173081005\" \"3171081001\" \"3173041002\" \"3172041004\"\n [86] \"3174081002\" \"3173061001\" \"3175051004\" \"3173061004\" \"3172011002\"\n [91] \"3171071007\" \"3175031001\" \"3171081002\" \"3175041002\" \"3173011005\"\n [96] \"3172011003\" \"3171021002\" \"3174021004\" \"3174021003\" \"3174021002\"\n[101] \"3171071003\" \"3171021003\" \"3175011003\" \"3175021006\" \"3173031006\"\n[106] \"3174041007\" \"3174051006\" \"3174051001\" \"3174011004\" \"3172021005\"\n[111] \"3173051001\" \"3171071006\" \"3171011005\" \"3171031002\" \"3175011005\"\n[116] \"3171071005\" \"3175081003\" \"3171061005\" \"3173011004\" \"3173051007\"\n[121] \"3173051006\" \"3173051004\" \"3175091003\" \"3172061003\" \"3172061001\"\n[126] \"3173071005\" \"3171031001\" \"3173081006\" \"3173081001\" \"3171041002\"\n[131] \"3173041005\" \"3175071003\" \"3172031001\" \"3173071006\" \"3173071003\"\n[136] \"3171041004\" \"3175041001\" \"3174071003\" \"3173031002\" \"3174031005\"\n[141] \"3174021008\" \"3171041005\" \"3172031003\" \"3174061002\" \"3174091004\"\n[146] \"3175101007\" \"3175081001\" \"3175071006\" \"3175071005\" \"3174031001\"\n[151] \"3173031005\" \"3171021005\" \"3174011007\" \"3174011006\" \"3173031003\"\n[156] \"3172041003\" \"3174071001\" \"3171061001\" \"3174021005\" \"3174011003\"\n[161] \"3173081003\" \"3173081002\" \"3175101004\" \"3172051002\" \"3172051001\"\n[166] \"3175011004\" \"3173071001\" \"3174081001\" \"3172021003\" \"3171021001\"\n[171] \"3174021006\" \"3174041001\" \"3171041003\" \"3173061005\" \"3171061002\"\n[176] \"3172061002\" \"3172011004\" \"3174041006\" \"3174041005\" \"3175051005\"\n[181] \"3173041009\" \"3174031003\" \"3174081005\" \"3175061003\" \"3172011001\"\n[186] \"3174101001\" \"3171071004\" \"3174071008\" \"3171011004\" \"3171011003\"\n[191] \"3174101004\" \"3174101003\" \"3175081002\" \"3173031008\" \"3175011001\"\n[196] \"3175021002\" \"3172011005\" \"3175071002\" \"3175071004\" \"3175071007\"\n[201] \"3174061003\" \"3174051002\" \"3175101003\" \"3101011003\" \"3101011002\"\n[206] \"3101011001\" \"3101021003\" \"3101021002\" \"3101021001\" \"3174071007\"\n[211] \"3175021001\" \"3175061005\" \"3174041004\" \"3175091005\" \"3172031006\"\n[216] \"3172031004\" \"3174071005\" \"3173011003\" \"3175031004\" \"3174081003\"\n[221] \"3175061002\" \"3175021005\" \"3171051003\" \"3173041010\" \"3172041006\"\n[226] \"3174071004\" \"3173061002\" \"3172041007\" \"3172041005\" \"3174071006\"\n[231] \"3171041001\" \"3171031004\" \"3174021001\" \"3175101005\" \"3173071002\"\n[236] \"3173081004\" \"3174091002\" \"3173051003\" \"3173051002\" \"3172041002\"\n[241] \"3171031007\" \"3172021004\" \"3172021006\" \"3172021002\" \"3175091004\"\n[246] \"3173031001\" \"3173041001\" \"3173041004\" \"3171081004\" \"3173031004\"\n[251] \"3174091005\" \"3173021005\" \"3173021002\" \"3172021001\" \"3174011002\"\n[256] \"3174011001\" \"3173061003\" \"3174031004\" \"3173021003\" \"3172031005\"\n[261] \"3172031002\" \"3175061006\" \"3174101005\" \"3175011006\" \"3175011002\"\n[266] \"3171031008\" \"3172021007\" \"3173021007\"\n\n$march\n  [1] NA           \"3172051003\" \"3173041007\" \"3175041005\" \"3175031003\"\n  [6] \"3175101006\" \"3174031002\" \"3175051002\" \"3175041004\" \"3171071002\"\n [11] \"3175031002\" \"3174101002\" \"3174011005\" \"3171041006\" \"3175061007\"\n [16] \"3175061004\" \"3175041007\" \"3175101008\" \"3171031006\" \"3171051002\"\n [21] \"3171051001\" \"3173011001\" \"3173011006\" \"3175091002\" \"3171011002\"\n [26] \"3174091003\" \"3175051003\" \"3171061003\" \"3174081006\" \"3174061001\"\n [31] \"3174041003\" \"3175101002\" \"3175041006\" \"3172041001\" \"3175101001\"\n [36] \"3174091006\" \"3174061005\" \"3174071010\" \"3175021003\" \"3175031007\"\n [41] \"3175031008\" \"3175031005\" \"3175081005\" \"3175031006\" \"3174051003\"\n [46] \"3175091001\" \"3175041003\" \"3175071001\" \"3174081004\" \"3173051005\"\n [51] \"3173011002\" \"3171011006\" \"3173041011\" \"3173041003\" \"3171081003\"\n [56] \"3171011001\" \"3174061004\" \"3174071009\" \"3175051001\" \"3171071001\"\n [61] \"3173031007\" \"3171061004\" \"3173021001\" \"3174051005\" \"3174051004\"\n [66] \"3174021007\" \"3174071002\" \"3171031005\" \"3171021004\" \"3175081004\"\n [71] \"3171031003\" \"3174091001\" \"3175021007\" \"3174041002\" \"3173071004\"\n [76] \"3175061001\" \"3175021004\" \"3173021004\" \"3173021006\" \"3173041006\"\n [81] \"3173041008\" \"3173081005\" \"3171081001\" \"3173041002\" \"3172041004\"\n [86] \"3174081002\" \"3173061001\" \"3175051004\" \"3173061004\" \"3172011002\"\n [91] \"3171071007\" \"3175031001\" \"3171081002\" \"3175041002\" \"3173011005\"\n [96] \"3172011003\" \"3171021002\" \"3174021004\" \"3174021003\" \"3174021002\"\n[101] \"3171071003\" \"3171021003\" \"3175011003\" \"3175021006\" \"3173031006\"\n[106] \"3174041007\" \"3174051006\" \"3174051001\" \"3174011004\" \"3172021005\"\n[111] \"3173051001\" \"3171071006\" \"3171011005\" \"3171031002\" \"3175011005\"\n[116] \"3171071005\" \"3175081003\" \"3171061005\" \"3173011004\" \"3173051007\"\n[121] \"3173051006\" \"3173051004\" \"3175091003\" \"3172061003\" \"3172061001\"\n[126] \"3173071005\" \"3171031001\" \"3173081006\" \"3173081001\" \"3171041002\"\n[131] \"3173041005\" \"3175071003\" \"3172031001\" \"3173071006\" \"3173071003\"\n[136] \"3171041004\" \"3175041001\" \"3174071003\" \"3173031002\" \"3174031005\"\n[141] \"3174021008\" \"3171041005\" \"3172031003\" \"3174061002\" \"3174091004\"\n[146] \"3175101007\" \"3175081001\" \"3175071006\" \"3175071005\" \"3174031001\"\n[151] \"3173031005\" \"3171021005\" \"3174011007\" \"3174011006\" \"3173031003\"\n[156] \"3172041003\" \"3174071001\" \"3171061001\" \"3174021005\" \"3174011003\"\n[161] \"3173081003\" \"3173081002\" \"3175101004\" \"3172051002\" \"3172051001\"\n[166] \"3175011004\" \"3173071001\" \"3174081001\" \"3172021003\" \"3171021001\"\n[171] \"3174021006\" \"3174041001\" \"3171041003\" \"3173061005\" \"3171061002\"\n[176] \"3172061002\" \"3172011004\" \"3174041006\" \"3174041005\" \"3175051005\"\n[181] \"3173041009\" \"3174031003\" \"3174081005\" \"3175061003\" \"3172011001\"\n[186] \"3174101001\" \"3171071004\" \"3174071008\" \"3171011004\" \"3171011003\"\n[191] \"3174101004\" \"3174101003\" \"3175081002\" \"3173031008\" \"3175011001\"\n[196] \"3175021002\" \"3172011005\" \"3175071002\" \"3175071004\" \"3175071007\"\n[201] \"3174061003\" \"3174051002\" \"3175101003\" \"3101011003\" \"3101011002\"\n[206] \"3101011001\" \"3101021003\" \"3101021002\" \"3101021001\" \"3174071007\"\n[211] \"3175021001\" \"3175061005\" \"3174041004\" \"3175091005\" \"3172031006\"\n[216] \"3172031004\" \"3174071005\" \"3173011003\" \"3175031004\" \"3174081003\"\n[221] \"3175061002\" \"3175021005\" \"3171051003\" \"3173041010\" \"3172041006\"\n[226] \"3174071004\" \"3173061002\" \"3172041007\" \"3172041005\" \"3174071006\"\n[231] \"3171041001\" \"3171031004\" \"3174021001\" \"3175101005\" \"3173071002\"\n[236] \"3173081004\" \"3174091002\" \"3173051003\" \"3173051002\" \"3172041002\"\n[241] \"3171031007\" \"3172021004\" \"3172021006\" \"3172021002\" \"3175091004\"\n[246] \"3173031001\" \"3173041001\" \"3173041004\" \"3171081004\" \"3173031004\"\n[251] \"3174091005\" \"3173021005\" \"3173021002\" \"3172021001\" \"3174011002\"\n[256] \"3174011001\" \"3173061003\" \"3174031004\" \"3173021003\" \"3172031005\"\n[261] \"3172031002\" \"3175061006\" \"3174101005\" \"3175011006\" \"3175011002\"\n[266] \"3171031008\" \"3172021007\" \"3173021007\"\n\n$april\n  [1] NA           \"3172051003\" \"3173041007\" \"3175041005\" \"3175031003\"\n  [6] \"3175101006\" \"3174031002\" \"3175051002\" \"3175041004\" \"3171071002\"\n [11] \"3175031002\" \"3174101002\" \"3174011005\" \"3171041006\" \"3175061007\"\n [16] \"3175061004\" \"3175041007\" \"3175101008\" \"3171031006\" \"3171051002\"\n [21] \"3171051001\" \"3173011001\" \"3173011006\" \"3175091002\" \"3171011002\"\n [26] \"3174091003\" \"3175051003\" \"3171061003\" \"3174081006\" \"3174061001\"\n [31] \"3174041003\" \"3175101002\" \"3175041006\" \"3172041001\" \"3175101001\"\n [36] \"3174091006\" \"3174061005\" \"3174071010\" \"3175021003\" \"3175031007\"\n [41] \"3175031008\" \"3175031005\" \"3175081005\" \"3175031006\" \"3174051003\"\n [46] \"3175091001\" \"3175041003\" \"3175071001\" \"3174081004\" \"3173051005\"\n [51] \"3173011002\" \"3171011006\" \"3173041011\" \"3173041003\" \"3171081003\"\n [56] \"3171011001\" \"3174061004\" \"3174071009\" \"3175051001\" \"3171071001\"\n [61] \"3173031007\" \"3171061004\" \"3173021001\" \"3174051005\" \"3174051004\"\n [66] \"3174021007\" \"3174071002\" \"3171031005\" \"3171021004\" \"3175081004\"\n [71] \"3171031003\" \"3174091001\" \"3175021007\" \"3174041002\" \"3173071004\"\n [76] \"3175061001\" \"3175021004\" \"3173021004\" \"3173021006\" \"3173041006\"\n [81] \"3173041008\" \"3173081005\" \"3171081001\" \"3173041002\" \"3172041004\"\n [86] \"3174081002\" \"3173061001\" \"3175051004\" \"3173061004\" \"3172011002\"\n [91] \"3171071007\" \"3175031001\" \"3171081002\" \"3175041002\" \"3173011005\"\n [96] \"3172011003\" \"3171021002\" \"3174021004\" \"3174021003\" \"3174021002\"\n[101] \"3171071003\" \"3171021003\" \"3175011003\" \"3175021006\" \"3173031006\"\n[106] \"3174041007\" \"3174051006\" \"3174051001\" \"3174011004\" \"3172021005\"\n[111] \"3173051001\" \"3171071006\" \"3171011005\" \"3171031002\" \"3175011005\"\n[116] \"3171071005\" \"3175081003\" \"3171061005\" \"3173011004\" \"3173051007\"\n[121] \"3173051006\" \"3173051004\" \"3175091003\" \"3172061003\" \"3172061001\"\n[126] \"3173071005\" \"3171031001\" \"3173081006\" \"3173081001\" \"3171041002\"\n[131] \"3173041005\" \"3175071003\" \"3172031001\" \"3173071006\" \"3173071003\"\n[136] \"3171041004\" \"3175041001\" \"3174071003\" \"3173031002\" \"3174031005\"\n[141] \"3174021008\" \"3171041005\" \"3172031003\" \"3174061002\" \"3174091004\"\n[146] \"3175101007\" \"3175081001\" \"3175071006\" \"3175071005\" \"3174031001\"\n[151] \"3173031005\" \"3171021005\" \"3174011007\" \"3174011006\" \"3173031003\"\n[156] \"3172041003\" \"3174071001\" \"3171061001\" \"3174021005\" \"3174011003\"\n[161] \"3173081003\" \"3173081002\" \"3175101004\" \"3172051002\" \"3172051001\"\n[166] \"3175011004\" \"3173071001\" \"3174081001\" \"3172021003\" \"3171021001\"\n[171] \"3174021006\" \"3174041001\" \"3171041003\" \"3173061005\" \"3171061002\"\n[176] \"3172061002\" \"3172011004\" \"3174041006\" \"3174041005\" \"3175051005\"\n[181] \"3173041009\" \"3174031003\" \"3174081005\" \"3175061003\" \"3172011001\"\n[186] \"3174101001\" \"3171071004\" \"3174071008\" \"3171011004\" \"3171011003\"\n[191] \"3174101004\" \"3174101003\" \"3175081002\" \"3173031008\" \"3175011001\"\n[196] \"3175021002\" \"3172011005\" \"3175071002\" \"3175071004\" \"3175071007\"\n[201] \"3174061003\" \"3174051002\" \"3175101003\" \"3101011003\" \"3101011002\"\n[206] \"3101011001\" \"3101021003\" \"3101021002\" \"3101021001\" \"3174071007\"\n[211] \"3175021001\" \"3175061005\" \"3174041004\" \"3175091005\" \"3172031006\"\n[216] \"3172031004\" \"3174071005\" \"3173011003\" \"3175031004\" \"3174081003\"\n[221] \"3175061002\" \"3175021005\" \"3171051003\" \"3173041010\" \"3172041006\"\n[226] \"3174071004\" \"3173061002\" \"3172041007\" \"3172041005\" \"3174071006\"\n[231] \"3171041001\" \"3171031004\" \"3174021001\" \"3175101005\" \"3173071002\"\n[236] \"3173081004\" \"3174091002\" \"3173051003\" \"3173051002\" \"3172041002\"\n[241] \"3171031007\" \"3172021004\" \"3172021006\" \"3172021002\" \"3175091004\"\n[246] \"3173031001\" \"3173041001\" \"3173041004\" \"3171081004\" \"3173031004\"\n[251] \"3174091005\" \"3173021005\" \"3173021002\" \"3172021001\" \"3174011002\"\n[256] \"3174011001\" \"3173061003\" \"3174031004\" \"3173021003\" \"3172031005\"\n[261] \"3172031002\" \"3175061006\" \"3174101005\" \"3175011006\" \"3175011002\"\n[266] \"3171031008\" \"3172021007\" \"3173021007\"\n\n$may\n  [1] NA           \"3172051003\" \"3173041007\" \"3175041005\" \"3175031003\"\n  [6] \"3175101006\" \"3174031002\" \"3175051002\" \"3175041004\" \"3171071002\"\n [11] \"3175031002\" \"3174101002\" \"3174011005\" \"3171041006\" \"3175061007\"\n [16] \"3175061004\" \"3175041007\" \"3175101008\" \"3171031006\" \"3171051002\"\n [21] \"3171051001\" \"3173011001\" \"3173011006\" \"3175091002\" \"3171011002\"\n [26] \"3174091003\" \"3175051003\" \"3171061003\" \"3174081006\" \"3174061001\"\n [31] \"3174041003\" \"3175101002\" \"3175041006\" \"3172041001\" \"3175101001\"\n [36] \"3174091006\" \"3174061005\" \"3174071010\" \"3175021003\" \"3175031007\"\n [41] \"3175031008\" \"3175031005\" \"3175081005\" \"3175031006\" \"3174051003\"\n [46] \"3175091001\" \"3175041003\" \"3175071001\" \"3174081004\" \"3173051005\"\n [51] \"3173011002\" \"3171011006\" \"3173041011\" \"3173041003\" \"3171081003\"\n [56] \"3171011001\" \"3174061004\" \"3174071009\" \"3175051001\" \"3171071001\"\n [61] \"3173031007\" \"3171061004\" \"3173021001\" \"3174051005\" \"3174051004\"\n [66] \"3174021007\" \"3174071002\" \"3171031005\" \"3171021004\" \"3175081004\"\n [71] \"3171031003\" \"3174091001\" \"3175021007\" \"3174041002\" \"3173071004\"\n [76] \"3175061001\" \"3175021004\" \"3173021004\" \"3173021006\" \"3173041006\"\n [81] \"3173041008\" \"3173081005\" \"3171081001\" \"3173041002\" \"3172041004\"\n [86] \"3174081002\" \"3173061001\" \"3175051004\" \"3173061004\" \"3172011002\"\n [91] \"3171071007\" \"3175031001\" \"3171081002\" \"3175041002\" \"3173011005\"\n [96] \"3172011003\" \"3171021002\" \"3174021004\" \"3174021003\" \"3174021002\"\n[101] \"3171071003\" \"3171021003\" \"3175011003\" \"3175021006\" \"3173031006\"\n[106] \"3174041007\" \"3174051006\" \"3174051001\" \"3174011004\" \"3172021005\"\n[111] \"3173051001\" \"3171071006\" \"3171011005\" \"3171031002\" \"3175011005\"\n[116] \"3171071005\" \"3175081003\" \"3171061005\" \"3173011004\" \"3173051007\"\n[121] \"3173051006\" \"3173051004\" \"3175091003\" \"3172061003\" \"3172061001\"\n[126] \"3173071005\" \"3171031001\" \"3173081006\" \"3173081001\" \"3171041002\"\n[131] \"3173041005\" \"3175071003\" \"3172031001\" \"3173071006\" \"3173071003\"\n[136] \"3171041004\" \"3175041001\" \"3174071003\" \"3173031002\" \"3174031005\"\n[141] \"3174021008\" \"3171041005\" \"3172031003\" \"3174061002\" \"3174091004\"\n[146] \"3175101007\" \"3175081001\" \"3175071006\" \"3175071005\" \"3174031001\"\n[151] \"3173031005\" \"3171021005\" \"3174011007\" \"3174011006\" \"3173031003\"\n[156] \"3172041003\" \"3174071001\" \"3171061001\" \"3174021005\" \"3174011003\"\n[161] \"3173081003\" \"3173081002\" \"3175101004\" \"3172051002\" \"3172051001\"\n[166] \"3175011004\" \"3173071001\" \"3174081001\" \"3172021003\" \"3171021001\"\n[171] \"3174021006\" \"3174041001\" \"3171041003\" \"3173061005\" \"3171061002\"\n[176] \"3172061002\" \"3172011004\" \"3174041006\" \"3174041005\" \"3175051005\"\n[181] \"3173041009\" \"3174031003\" \"3174081005\" \"3175061003\" \"3172011001\"\n[186] \"3174101001\" \"3171071004\" \"3174071008\" \"3171011004\" \"3171011003\"\n[191] \"3174101004\" \"3174101003\" \"3175081002\" \"3173031008\" \"3175011001\"\n[196] \"3175021002\" \"3172011005\" \"3175071002\" \"3175071004\" \"3175071007\"\n[201] \"3174061003\" \"3174051002\" \"3175101003\" \"3101011003\" \"3101011002\"\n[206] \"3101011001\" \"3101021003\" \"3101021002\" \"3101021001\" \"3174071007\"\n[211] \"3175021001\" \"3175061005\" \"3174041004\" \"3175091005\" \"3172031006\"\n[216] \"3172031004\" \"3174071005\" \"3173011003\" \"3175031004\" \"3174081003\"\n[221] \"3175061002\" \"3175021005\" \"3171051003\" \"3173041010\" \"3172041006\"\n[226] \"3174071004\" \"3173061002\" \"3172041007\" \"3172041005\" \"3174071006\"\n[231] \"3171041001\" \"3171031004\" \"3174021001\" \"3175101005\" \"3173071002\"\n[236] \"3173081004\" \"3174091002\" \"3173051003\" \"3173051002\" \"3172041002\"\n[241] \"3171031007\" \"3172021004\" \"3172021006\" \"3172021002\" \"3175091004\"\n[246] \"3173031001\" \"3173041001\" \"3173041004\" \"3171081004\" \"3173031004\"\n[251] \"3174091005\" \"3173021005\" \"3173021002\" \"3172021001\" \"3174011002\"\n[256] \"3174011001\" \"3173061003\" \"3174031004\" \"3173021003\" \"3172031005\"\n[261] \"3172031002\" \"3175061006\" \"3174101005\" \"3175011006\" \"3175011002\"\n[266] \"3171031008\" \"3172021007\" \"3173021007\"\n\n$june\n  [1] NA           \"3172051003\" \"3173041007\" \"3175041005\" \"3175031003\"\n  [6] \"3175101006\" \"3174031002\" \"3175051002\" \"3175041004\" \"3171071002\"\n [11] \"3175031002\" \"3174101002\" \"3174011005\" \"3171041006\" \"3175061007\"\n [16] \"3175061004\" \"3175041007\" \"3175101008\" \"3171031006\" \"3171051002\"\n [21] \"3171051001\" \"3173011001\" \"3173011006\" \"3175091002\" \"3171011002\"\n [26] \"3174091003\" \"3175051003\" \"3171061003\" \"3174081006\" \"3174061001\"\n [31] \"3174041003\" \"3175101002\" \"3175041006\" \"3172041001\" \"3175101001\"\n [36] \"3174091006\" \"3174061005\" \"3174071010\" \"3175021003\" \"3175031007\"\n [41] \"3175031008\" \"3175031005\" \"3175081005\" \"3175031006\" \"3174051003\"\n [46] \"3175091001\" \"3175041003\" \"3175071001\" \"3174081004\" \"3173051005\"\n [51] \"3173011002\" \"3171011006\" \"3173041011\" \"3173041003\" \"3171081003\"\n [56] \"3171011001\" \"3174061004\" \"3174071009\" \"3175051001\" \"3171071001\"\n [61] \"3173031007\" \"3171061004\" \"3173021001\" \"3174051005\" \"3174051004\"\n [66] \"3174021007\" \"3174071002\" \"3171031005\" \"3171021004\" \"3175081004\"\n [71] \"3171031003\" \"3174091001\" \"3175021007\" \"3174041002\" \"3173071004\"\n [76] \"3175061001\" \"3175021004\" \"3173021004\" \"3173021006\" \"3173041006\"\n [81] \"3173041008\" \"3173081005\" \"3171081001\" \"3173041002\" \"3172041004\"\n [86] \"3174081002\" \"3173061001\" \"3175051004\" \"3173061004\" \"3172011002\"\n [91] \"3171071007\" \"3175031001\" \"3171081002\" \"3175041002\" \"3173011005\"\n [96] \"3172011003\" \"3171021002\" \"3174021004\" \"3174021003\" \"3174021002\"\n[101] \"3171071003\" \"3171021003\" \"3175011003\" \"3175021006\" \"3173031006\"\n[106] \"3174041007\" \"3174051006\" \"3174051001\" \"3174011004\" \"3172021005\"\n[111] \"3173051001\" \"3171071006\" \"3171011005\" \"3171031002\" \"3175011005\"\n[116] \"3171071005\" \"3175081003\" \"3171061005\" \"3173011004\" \"3173051007\"\n[121] \"3173051006\" \"3173051004\" \"3175091003\" \"3172061003\" \"3172061001\"\n[126] \"3173071005\" \"3171031001\" \"3173081006\" \"3173081001\" \"3171041002\"\n[131] \"3173041005\" \"3175071003\" \"3172031001\" \"3173071006\" \"3173071003\"\n[136] \"3171041004\" \"3175041001\" \"3174071003\" \"3173031002\" \"3174031005\"\n[141] \"3174021008\" \"3171041005\" \"3172031003\" \"3174061002\" \"3174091004\"\n[146] \"3175101007\" \"3175081001\" \"3175071006\" \"3175071005\" \"3174031001\"\n[151] \"3173031005\" \"3171021005\" \"3174011007\" \"3174011006\" \"3173031003\"\n[156] \"3172041003\" \"3174071001\" \"3171061001\" \"3174021005\" \"3174011003\"\n[161] \"3173081003\" \"3173081002\" \"3175101004\" \"3172051002\" \"3172051001\"\n[166] \"3175011004\" \"3173071001\" \"3174081001\" \"3172021003\" \"3171021001\"\n[171] \"3174021006\" \"3174041001\" \"3171041003\" \"3173061005\" \"3171061002\"\n[176] \"3172061002\" \"3172011004\" \"3174041006\" \"3174041005\" \"3175051005\"\n[181] \"3173041009\" \"3174031003\" \"3174081005\" \"3175061003\" \"3172011001\"\n[186] \"3174101001\" \"3171071004\" \"3174071008\" \"3171011004\" \"3171011003\"\n[191] \"3174101004\" \"3174101003\" \"3175081002\" \"3173031008\" \"3175011001\"\n[196] \"3175021002\" \"3172011005\" \"3175071002\" \"3175071004\" \"3175071007\"\n[201] \"3174061003\" \"3174051002\" \"3175101003\" \"3101011003\" \"3101011002\"\n[206] \"3101011001\" \"3101021003\" \"3101021002\" \"3101021001\" \"3174071007\"\n[211] \"3175021001\" \"3175061005\" \"3174041004\" \"3175091005\" \"3172031006\"\n[216] \"3172031004\" \"3174071005\" \"3173011003\" \"3175031004\" \"3174081003\"\n[221] \"3175061002\" \"3175021005\" \"3171051003\" \"3173041010\" \"3172041006\"\n[226] \"3174071004\" \"3173061002\" \"3172041007\" \"3172041005\" \"3174071006\"\n[231] \"3171041001\" \"3171031004\" \"3174021001\" \"3175101005\" \"3173071002\"\n[236] \"3173081004\" \"3174091002\" \"3173051003\" \"3173051002\" \"3172041002\"\n[241] \"3171031007\" \"3172021004\" \"3172021006\" \"3172021002\" \"3175091004\"\n[246] \"3173031001\" \"3173041001\" \"3173041004\" \"3171081004\" \"3173031004\"\n[251] \"3174091005\" \"3173021005\" \"3173021002\" \"3172021001\" \"3174011002\"\n[256] \"3174011001\" \"3173061003\" \"3174031004\" \"3173021003\" \"3172031005\"\n[261] \"3172031002\" \"3175061006\" \"3174101005\" \"3175011006\" \"3175011002\"\n[266] \"3171031008\" \"3172021007\" \"3173021007\"\n\n\n\nresult$july\n\n  [1] NA           \"3172051003\" \"3173041007\" \"3175041005\" \"3175031003\"\n  [6] \"3175101006\" \"3174031002\" \"3175051002\" \"3175041004\" \"3171071002\"\n [11] \"3175031002\" \"3174101002\" \"3174011005\" \"3171041006\" \"3175061007\"\n [16] \"3175061004\" \"3175041007\" \"3175101008\" \"3171031006\" \"3171051002\"\n [21] \"3171051001\" \"3173011001\" \"3173011006\" \"3175091002\" \"3171011002\"\n [26] \"3174091003\" \"3175051003\" \"3171061003\" \"3174081006\" \"3174061001\"\n [31] \"3174041003\" \"3175101002\" \"3175041006\" \"3172041001\" \"3175101001\"\n [36] \"3174091006\" \"3174061005\" \"3174071010\" \"3175021003\" \"3175031007\"\n [41] \"3175031008\" \"3175031005\" \"3175081005\" \"3175031006\" \"3174051003\"\n [46] \"3175091001\" \"3175041003\" \"3175071001\" \"3174081004\" \"3173051005\"\n [51] \"3173011002\" \"3171011006\" \"3173041011\" \"3173041003\" \"3171081003\"\n [56] \"3171011001\" \"3174061004\" \"3174071009\" \"3175051001\" \"3171071001\"\n [61] \"3173031007\" \"3171061004\" \"3173021001\" \"3174051005\" \"3174051004\"\n [66] \"3174021007\" \"3174071002\" \"3171031005\" \"3171021004\" \"3175081004\"\n [71] \"3171031003\" \"3174091001\" \"3175021007\" \"3174041002\" \"3173071004\"\n [76] \"3175061001\" \"3175021004\" \"3173021004\" \"3173021006\" \"3173041006\"\n [81] \"3173041008\" \"3173081005\" \"3171081001\" \"3173041002\" \"3172041004\"\n [86] \"3174081002\" \"3173061001\" \"3175051004\" \"3173061004\" \"3172011002\"\n [91] \"3171071007\" \"3175031001\" \"3171081002\" \"3175041002\" \"3173011005\"\n [96] \"3172011003\" \"3171021002\" \"3174021004\" \"3174021003\" \"3174021002\"\n[101] \"3171071003\" \"3171021003\" \"3175011003\" \"3175021006\" \"3173031006\"\n[106] \"3174041007\" \"3174051006\" \"3174051001\" \"3174011004\" \"3172021005\"\n[111] \"3173051001\" \"3171071006\" \"3171011005\" \"3171031002\" \"3175011005\"\n[116] \"3171071005\" \"3175081003\" \"3171061005\" \"3173011004\" \"3173051007\"\n[121] \"3173051006\" \"3173051004\" \"3175091003\" \"3172061003\" \"3172061001\"\n[126] \"3173071005\" \"3171031001\" \"3173081006\" \"3173081001\" \"3171041002\"\n[131] \"3173041005\" \"3175071003\" \"3172031001\" \"3173071006\" \"3173071003\"\n[136] \"3171041004\" \"3175041001\" \"3174071003\" \"3173031002\" \"3174031005\"\n[141] \"3174021008\" \"3171041005\" \"3172031003\" \"3174061002\" \"3174091004\"\n[146] \"3175101007\" \"3175081001\" \"3175071006\" \"3175071005\" \"3174031001\"\n[151] \"3173031005\" \"3171021005\" \"3174011007\" \"3174011006\" \"3173031003\"\n[156] \"3172041003\" \"3174071001\" \"3171061001\" \"3174021005\" \"3174011003\"\n[161] \"3173081003\" \"3173081002\" \"3175101004\" \"3172051002\" \"3172051001\"\n[166] \"3175011004\" \"3173071001\" \"3174081001\" \"3172021003\" \"3171021001\"\n[171] \"3174021006\" \"3174041001\" \"3171041003\" \"3173061005\" \"3171061002\"\n[176] \"3172061002\" \"3172011004\" \"3174041006\" \"3174041005\" \"3175051005\"\n[181] \"3173041009\" \"3174031003\" \"3174081005\" \"3175061003\" \"3172011001\"\n[186] \"3174101001\" \"3171071004\" \"3174071008\" \"3171011004\" \"3171011003\"\n[191] \"3174101004\" \"3174101003\" \"3175081002\" \"3173031008\" \"3175011001\"\n[196] \"3175021002\" \"3172011005\" \"3175071002\" \"3175071004\" \"3175071007\"\n[201] \"3174061003\" \"3174051002\" \"3175101003\" \"3101011003\" \"3101011002\"\n[206] \"3101011001\" \"3101021003\" \"3101021002\" \"3101021001\" \"3174071007\"\n[211] \"3175021001\" \"3175061005\" \"3174041004\" \"3175091005\" \"3172031006\"\n[216] \"3172031004\" \"3174071005\" \"3173011003\" \"3175031004\" \"3174081003\"\n[221] \"3175061002\" \"3175021005\" \"3171051003\" \"3173041010\" \"3172041006\"\n[226] \"3174071004\" \"3173061002\" \"3172041007\" \"3172041005\" \"3174071006\"\n[231] \"3171041001\" \"3171031004\" \"3174021001\" \"3175101005\" \"3173071002\"\n[236] \"3173081004\" \"3174091002\" \"3173051003\" \"3173051002\" \"3172041002\"\n[241] \"3171031007\" \"3172021004\" \"3172021006\" \"3172021002\" \"3175091004\"\n[246] \"3173031001\" \"3173041001\" \"3173041004\" \"3171081004\" \"3173031004\"\n[251] \"3174091005\" \"3173021005\" \"3173021002\" \"3172021001\" \"3174011002\"\n[256] \"3174011001\" \"3173061003\" \"3174031004\" \"3173021003\" \"3172031005\"\n[261] \"3172031002\" \"3175061006\" \"3174101005\" \"3175011006\" \"3175011002\"\n[266] \"3171031008\" \"3172021007\" \"3173021007\""
  }
]